{"version":3,"sources":["components/Users/User.module.css","components/MyPosts/MyPosts.module.css","components/MyPosts/Post/Post.module.css","components/NavBar/NavBar.module.css","redux/reducer/dialog-reducer.tsx","api/apiConfig/index.ts","api/api.ts","redux/reducer/profile-reducer.tsx","redux/reducer/sidebar-reducer.tsx","redux/reducer/user-reducer.ts","redux/reducer/auth-reducer.ts","redux/reducer/app-reducer.ts","redux/redux-store.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","common/paginator/Paginator.tsx","components/Users/Users.tsx","assets/circles.svg","common/preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/Message.tsx","common/utils/validators.tsx","components/FormsControl/FormsControl.tsx","components/Dialogs/Dialogs.tsx","hoc/withRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/MyPosts/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/MyPosts/ProfileInfo/ProfileInfo.tsx","components/MyPosts/Post/Post.tsx","components/MyPosts/MyPosts.tsx","components/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","components/NavBar/NavBar.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/MyPosts/ProfileInfo/ProfileInfo.module.css","components/FormsControl/FormsControl.module.css","components/Header/Header.module.css","common/paginator/Paginator.module.css","components/Dialogs/Dialog/Dialog.module.css"],"names":["module","exports","initialState","dialogsData","id","v1","user","messageData","textMessage","dialogReducer","state","action","type","newMessage","messageText","newMessageText","instance","axios","create","baseURL","withCredentials","headers","process","UsersAPI","currentPage","pageSize","get","then","response","data","ProfileAPI","status","put","LoginAPI","loginData","email","password","rememberMe","captcha","post","delete","followUserAPI","unfollowUserAPI","postsData","message","likes","profile","setStatus","payload","profileReducer","newPost","postText","newPostText","sidebarData","sidebarReducer","items","totalUserCount","isFetching","followingInProgress","followUser","unFollowUser","setUsers","changePage","toggleIsFetching","toggleFollowProgress","isFollowInProgress","userId","userReducer","map","m","followed","filter","f","login","isAuth","setAuthUserData","getAuthDataThunk","dispatch","a","resultCode","authReducer","isInitialization","appReducer","reducers","combineReducers","DialogsPage","ProfilePage","sidebarPage","UsersPage","auth","form","formReducer","app","store","createStore","composeWithDevTools","applyMiddleware","ThunkMiddleware","window","News","props","Music","Settings","Header","className","s","header","loginBlock","onClick","logoutThunk","to","HeaderContainer","this","React","Component","connect","Paginator","pagesCount","Math","ceil","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","pageNum","changePageHandler","Users","src","photos","small","userPhoto","alt","disabled","some","unfollowThunk","followThunk","name","Preloader","preload","UsersContainer","ChangePageHandler","changePageThunk","getUsersThunk","compose","totalCount","DialogItem","number","dialog","activeClassName","active","MessageItem","required","value","maxLengthCreator","maxLength","length","Textarea","input","meta","restProps","error","touched","errorMessage","maxLength100","DialogReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","mapStateToProps","withRedirect","dialogs","messages","addMessage","dialogsElements","messagesElements","dialogsItems","addMessageWrapper","formData","ProfileStatusWithHooks","editMode","setEditMode","activateSpanHandler","updateUserStatus","useEffect","autoFocus","onBlur","onChange","e","currentTarget","onKeyPress","code","onDoubleClick","ProfileInfo","container","fullName","profilePhoto","userForm","aboutMe","contacts","vk","statusBlock","Post","postItem","likesCount","maxLength70","MyPostReduxForm","placeholoder","posts","addPost","postsElements","myPosts","Profile","MyPostsContainer","ProfileContainer","match","params","userIdAuth","toString","history","getUserProfile","getUserStatus","withRouter","maxLength30","LoginReduxForm","loginThunk","textErr","stopSubmit","_error","authId","navBar","item","App","Initialize","path","render","DialogsContainer","LoginContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.28d1951c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"User_userPhoto__1R2pD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3UiyR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__2wxq8\",\"active\":\"Post_active__1ce30\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__3C9vJ\",\"item\":\"NavBar_item__3Oh5B\",\"active\":\"NavBar_active__27_8i\"};","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    dialogsData: [{id: v1(), user: 'Nastya'},\r\n        {id: v1(), user: 'Dima'},\r\n        {id: v1(), user: 'Victor'}],\r\n    messageData: [{id: v1(), textMessage: 'yo'},\r\n        {id: v1(), textMessage: 'konichiwa'}],\r\n}\r\n\r\nexport type dialogsDataType = {\r\n    id: string\r\n    user: string\r\n}\r\nexport type messageDataType = {\r\n    id: string\r\n    textMessage: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<dialogsDataType>\r\n    messageData: Array<messageDataType>\r\n\r\n\r\n}\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE':\r\n            let newMessage: messageDataType = {id: v1(), textMessage: action.messageText}\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n                newMessageText: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (messageText: string) => ({\r\n    type: 'ADD-MESSAGE',\r\n    messageText: messageText\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogReducer","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": process.env.REACT_APP_API_KEY}\r\n})","import {profileDataUserType} from \"../redux/reducer/profile-reducer\";\r\nimport {authDataType} from \"../redux/reducer/auth-reducer\";\r\nimport {instance} from \"./apiConfig\";\r\nimport {getUsersResponse, loginAPIDataType, ResponseLoginType, UpdateStatusResponseType, ResponseType} from \"./types\";\r\n\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (currentPage: number, pageSize: number) => {\r\n        return instance.get<getUsersResponse>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUserProfileAPI: (id: string) => {\r\n\r\n        return instance.get<profileDataUserType>(`profile/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus: (id: string) => {\r\n        return instance.get<string>(`/profile/status/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus: (status: string) => {\r\n        return instance.put<UpdateStatusResponseType>(`/profile/status`, {status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\nexport const LoginAPI = {\r\n    login: (loginData: loginAPIDataType) => {\r\n        let {email, password, rememberMe, captcha} = loginData\r\n        return instance.post<ResponseLoginType<{ userId: number }>>('/auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }, logout: () => {\r\n        return instance.delete<ResponseLoginType>('/auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = () => {\r\n    return instance.get<ResponseType<authDataType>>(`auth/me`)\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n}\r\n\r\nexport const followUserAPI = (id: number) => {\r\n    return instance.post<ResponseType>(`follow/${id}`).then(response => {\r\n        return response.data\r\n    })\r\n}\r\nexport const unfollowUserAPI = (id: number) => {\r\n    return instance.delete<ResponseType>(`follow/${id}`).then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ProfileAPI} from \"../../api/api\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'it is my first post', likes: 30},\r\n        {id: v1(), message: 'it-kamasutra', likes: 10}],\r\n    profile: null /*as profileDataUserType*/,\r\n    status:'',\r\n}\r\nexport type postsDataType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\n\r\nexport type ProfilePageType = {\r\n    postsData: Array<postsDataType>\r\n    profile: profileDataUserType\r\n    status:string\r\n}\r\nexport type profileDataUserType = Nullable< {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}>\r\nexport type ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            let newPost: postsDataType = {id: v1(), message: action.postText, likes: 0}\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case \"SET-USER-PROFILE\":\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addPost = (postText: string) => ({\r\n    type: 'ADD-POST',\r\n    postText: postText\r\n}) as const\r\n\r\n\r\n\r\nexport const setUserProfile = (profile: profileDataUserType) => ({\r\n    type: 'SET-USER-PROFILE',\r\n    payload:{profile},\r\n}) as const\r\nexport const setStatus = (status: string) => ({\r\n    type: 'SET-STATUS',\r\n    payload:{status},\r\n}) as const\r\n\r\n\r\nexport const getUserProfile = (userId: string) =>\r\n   async (dispatch: Dispatch<actionsType>) => {\r\n        let data=await ProfileAPI.getUserProfileAPI(userId)\r\n                dispatch(setUserProfile(data))\r\n    }\r\n\r\nexport const getUserStatus = (userId: string) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        let data = await ProfileAPI.getStatus(userId)\r\n                dispatch(setStatus(data))\r\n}\r\nexport const updateUserStatus = (status: string) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n       let data= await ProfileAPI.updateStatus(status)\r\n                if(data.resultCode===0){\r\n                dispatch(setStatus(status))}\r\n}\r\n\r\nexport default profileReducer","import {actionsType} from \"../redux-store\";\r\n\r\nlet initialState={\r\n    sidebarData: []\r\n}\r\nexport type sidebarPageType = {\r\n    sidebarData: sidebarDataType\r\n}\r\nexport type sidebarDataType = {}\r\n\r\nexport const sidebarReducer=(state:sidebarPageType=initialState,action:actionsType)=>{\r\n    switch (action.type) {\r\n        default:return state\r\n    }\r\n}\r\n\r\nexport default sidebarReducer","import {actionsType} from \"../redux-store\";\r\nimport {followUserAPI, unfollowUserAPI, UsersAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\n\r\n\r\nlet initialState = {\r\n    items: [],\r\n    pageSize: 10,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n};\r\nexport type UsersPageType = {\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\n/*export type ItemsUsersResponseType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: {\r\n        small: null | string\r\n        large: null | string\r\n    }\r\n    status: null | string\r\n    followed: boolean\r\n}*/\r\n\r\nexport const userReducer = (state: UsersPageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case \"FOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: true} : m)\r\n            }\r\n        case \"UNFOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: false} : m)\r\n            }     //и тут\r\n        case \"SET-USERS\":\r\n        case \"CHANGE-PAGE\":\r\n        case \"SET-TOTAL-USER-COUNT\":\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case \"TOGGLE-FOLLOW-PROGRESS\":\r\n            return action.isFollowInProgress ? {\r\n                ...state, followingInProgress: [...state.followingInProgress, action.userId]\r\n            } : {...state, followingInProgress: state.followingInProgress.filter(f => f !== action.userId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followUser = (id: number) => ({\r\n    type: 'FOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const unFollowUser = (id: number) => ({\r\n    type: 'UNFOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const setUsers = (items: Array<ItemsUsersResponseType>) => {\r\n    return(\r\n        {\r\n            type: 'SET-USERS',\r\n            payload:{items},\r\n        } as const)\r\n\r\n}\r\nexport const changePage = (currentPage: number) => (\r\n    {\r\n        type: 'CHANGE-PAGE',\r\n        payload:{currentPage},\r\n    }\r\n) as const\r\n\r\nexport const setTotalUsersCount = (totalUserCount: number) =>{\r\n    return(\r\n    {\r\n        type: 'SET-TOTAL-USER-COUNT',\r\n        payload:{totalUserCount},\r\n    }\r\n) as const}\r\nexport const toggleIsFetching = (isFetching: boolean) => (\r\n    {\r\n        type: 'TOGGLE-IS-FETCHING',\r\n        payload:{isFetching},\r\n    }\r\n) as const\r\nexport const toggleFollowProgress = (isFollowInProgress: boolean, userId: number) => (\r\n    {\r\n        type: 'TOGGLE-FOLLOW-PROGRESS',\r\n        isFollowInProgress,\r\n        userId,\r\n    }\r\n) as const\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let data = await UsersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n\r\nexport const changePageThunk = (currentPage: number, pageSize: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(changePage(currentPage))\r\n        let data = await UsersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n\r\nexport const followThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await followUserAPI(id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(followUser(id))\r\n        }\r\n    }\r\n\r\n\r\nexport const unfollowThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await unfollowUserAPI(id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(unFollowUser(id))\r\n        }\r\n    }\r\n\r\nexport default userReducer","import {actionsType, stateType} from \"../redux-store\";\r\nimport {profileDataUserType} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {getAuthUserData, LoginAPI} from \"../../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\n\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: '',\r\n        id: null,\r\n        login: '',\r\n    },\r\n    isAuth: false,\r\n    profile: null\r\n};\r\n\r\nexport type authType = {\r\n    data: authDataType\r\n    isAuth: boolean\r\n    profile: Nullable<profileDataUserType>\r\n}\r\n\r\nexport type authDataType = {\r\n    id: Nullable<number>\r\n    login: Nullable<string>\r\n    email: Nullable<string>\r\n}\r\n\r\nexport const authReducer = (state: authType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-AUTH-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: {...action.data}, isAuth: action.isAuth\r\n            }\r\n        case \"SET-MY-PROFILE-DATA\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: authDataType, isAuth: boolean) => ({\r\n    type: 'SET-AUTH-USER-DATA',\r\n    data,\r\n    isAuth,\r\n}) as const\r\nexport const setMyProfileData = (profile: profileDataUserType) => ({\r\n    type: 'SET-MY-PROFILE-DATA',\r\n    payload:{profile},\r\n}) as const\r\n\r\n\r\ntype ThunkType = ThunkAction<void, stateType, unknown, actionsType>\r\n\r\n\r\nexport const getAuthDataThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        let data = await getAuthUserData()\r\n        if (data.resultCode === 0) {\r\n            dispatch(setAuthUserData(data.data, true))\r\n        }\r\n    }\r\n\r\n\r\nexport const loginThunk = (loginData: loginAPIDataType): ThunkType =>\r\n    async (dispatch) => {\r\n        let data = await LoginAPI.login(loginData)\r\n        if (data.resultCode === 0) {\r\n           await dispatch(getAuthDataThunk())\r\n        } else {\r\n            let textErr = data.messages.length > 0 ? data.messages[0] : 'some err'\r\n            dispatch(stopSubmit('login', {_error: textErr}))\r\n        }\r\n    }\r\n\r\n\r\nexport const logoutThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        let data = await LoginAPI.logout()\r\n                if (data.resultCode === 0) {\r\n                    dispatch(setAuthUserData({id: null, login: null, email: null}, false))\r\n                }\r\n    }\r\n\r\nexport default authReducer","import {actionsType, stateType} from \"../redux-store\";\r\n\r\nimport {getAuthDataThunk} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nlet initialState = {\r\n    isInitialization: false,\r\n};\r\n\r\ntype initialStateAppType = {\r\n    isInitialization: boolean\r\n}\r\n\r\nexport const appReducer = (state: initialStateAppType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-INITIALIZATION':\r\n            return {\r\n                ...state,\r\n                isInitialization: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitialization = () => ({\r\n    type: 'SET-INITIALIZATION',\r\n}) as const\r\n\r\ntype ThunkType = ThunkAction<void, stateType, unknown, actionsType>\r\n\r\nexport const Initialize = (): ThunkType =>\r\n    async (dispatch) => {\r\n      await dispatch(getAuthDataThunk())\r\n            dispatch(setInitialization())\r\n    }\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogReducer, {addMessage} from \"./reducer/dialog-reducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport profileReducer, {addPost, setStatus, setUserProfile} from \"./reducer/profile-reducer\";\r\nimport sidebarReducer from \"./reducer/sidebar-reducer\";\r\nimport userReducer, {\r\n    changePage,\r\n    followUser,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowProgress,\r\n    toggleIsFetching,\r\n    unFollowUser\r\n} from \"./reducer/user-reducer\";\r\nimport authReducer, {setAuthUserData, setMyProfileData} from \"./reducer/auth-reducer\";\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport appReducer, {setInitialization} from \"./reducer/app-reducer\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nlet reducers = combineReducers({\r\n    DialogsPage: dialogReducer,\r\n    ProfilePage: profileReducer,\r\n    sidebarPage: sidebarReducer,\r\n    UsersPage: userReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type stateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, composeWithDevTools(applyMiddleware(ThunkMiddleware)))\r\n\r\nexport type actionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof addMessage>\r\n    | ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof changePage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowProgress>\r\n    | ReturnType<typeof setMyProfileData>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof setInitialization>\r\n\r\n\r\n/*\r\nexport type storeType = {\r\n    _state: stateType\r\n    subscribe: (observer: () => void) => void\r\n    _callSubscriber: () => void\r\n    getState: () => stateType\r\n    dispatch: (action: actionsType) => void\r\n}*/\r\n\r\n// @ts-ignore\r\nwindow.store = store","import s from \"./News.module.css\"\r\nimport React from \"react\";\r\ntype NewsPropsType={\r\n\r\n}\r\n\r\n\r\nexport const News = (props:NewsPropsType)=>{\r\n    return(\r\n        <div>news</div>\r\n    )\r\n}","import s from \"./Music.module.css\"\r\nimport React from \"react\";\r\ntype MusicPropsType={\r\n\r\n}\r\n\r\n\r\nexport const Music = (props:MusicPropsType)=>{\r\n\r\n    return(\r\n        <div>music</div>\r\n    )\r\n}","import s from \"./Settings.module.css\"\r\nimport React from \"react\";\r\ntype SettingsPropsType={\r\n\r\n}\r\n\r\n\r\nexport const Settings = (props:SettingsPropsType)=>{\r\n    return(\r\n        <div>settings</div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css'\r\n\r\n\r\ntype HeaderPropsType = {\r\n    login: string|null\r\n    isAuth: boolean\r\n    logoutThunk:()=>any\r\n}\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n\r\n        <header className={s.header}>\r\n            <div className={s.loginBlock}>{props.isAuth ? <div>{props.login}\r\n            <button onClick={props.logoutThunk}>logout</button></div>\r\n                : <NavLink to={'/login'}>login</NavLink>}\r\n               </div>\r\n\r\n        </header>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport { logoutThunk} from \"../../redux/reducer/auth-reducer\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype HeaderPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n    login: string |null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logoutThunk:()=>any\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n\r\n    login: state.auth.data.login,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logoutThunk})(HeaderContainer)","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\n\r\ntype PaginatorPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    changePageHandler: (currentPage: number) => void\r\n    portionSize: number\r\n}\r\n\r\nlet Paginator = (props: PaginatorPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUserCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span key={p}\r\n                             className={styles.pageNum}\r\n                             onClick={() => {\r\n                                 props.changePageHandler(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import s from \"./User.module.css\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../../common/paginator/Paginator\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    changePage: (currentPage: number) => void\r\n    currentPage: number\r\n    items: Array<ItemsUsersResponseType>\r\n    followingInProgress: number[]\r\n    followThunk: any\r\n    unfollowThunk: any\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    return (\r\n        <div>\r\n            <Paginator totalUserCount={props.totalUserCount} pageSize={props.pageSize} currentPage={props.currentPage}\r\n                       changePageHandler={props.changePage} portionSize={10}/>\r\n\r\n            {props.items.map(m => <div key={m.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + m.id}><img\r\n                            src={m.photos.small || 'https://cdn.iconscout.com/icon/free/png-256/laptop-user-1-1179329.png'}\r\n                            className={s.userPhoto} alt={'profile avatar'}/></NavLink></div>\r\n\r\n                    <div>{m.followed ?\r\n                        <button disabled={props.followingInProgress.some(id => id === m.id)} onClick={() => {\r\n                            props.unfollowThunk(m.id)\r\n                        }\r\n                        }>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some(id => id === m.id)} onClick={() => {\r\n                            props.followThunk(m.id)\r\n                        }\r\n                        }>Follow</button>}</div>\r\n\r\n                </span>\r\n                    <span>\r\n                    <div>{m.name}</div>\r\n                    <div>{m.status}</div>\r\n                </span>\r\n                    <span>\r\n                    <div>m.location.country</div>\r\n                    <div>m.location.city</div>\r\n                </span>\r\n                </div>\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","export default __webpack_public_path__ + \"static/media/circles.8226ec63.svg\";","import preload from \"../../assets/circles.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload}/>)\r\n}\r\n\r\nexport default Preloader","import React from \"react\"\r\nimport {Users} from \"./Users\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    changePageThunk, followThunk,\r\n    getUsersThunk,\r\n    unfollowThunk,\r\n\r\n} from \"../../redux/reducer/user-reducer\";\r\n\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\n\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    ChangePageHandler = (currentPage: number) => {\r\n        this.props.changePageThunk(currentPage, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users {...this.props} changePage={this.ChangePageHandler}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUsersThunk: (currentPage: number, pageSize: number) => any\r\n    changePageThunk: (currentPage: number, pageSize: number) => any\r\n    followThunk: (id: number) => any\r\n    unfollowThunk: (id: number) => any\r\n\r\n}\r\ntype mapStateToPropsType = {\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nexport type PropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    items: state.UsersPage.items,\r\n    pageSize: state.UsersPage.pageSize,\r\n    totalUserCount: state.UsersPage.totalUserCount,\r\n    currentPage: state.UsersPage.currentPage,\r\n    isFetching: state.UsersPage.isFetching,\r\n    followingInProgress: state.UsersPage.followingInProgress,\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        changePageThunk,\r\n        getUsersThunk,\r\n        followThunk,\r\n        unfollowThunk,\r\n    }))(UsersContainer)\r\n","import s from \"./Dialog.module.css\"\r\nimport React from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemType = {\r\n    number: string\r\n    user: string\r\n}\r\n\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={'/dialogs/' + props.number} className={s.dialog}\r\n                     activeClassName={s.active}>{props.user}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"./Message.module.css\"\r\nimport React from \"react\"\r\n\r\n\r\ntype MessageItemType = {\r\n    textMessage: string\r\n}\r\n\r\n\r\nexport const MessageItem = (props: MessageItemType) => {\r\n    return (\r\n        <div className={s.message}>{props.textMessage}</div>\r\n    )\r\n}\r\n\r\n","export const required=(value:string)=>{\r\n    if (value) return undefined;\r\n    return 'Value is required';\r\n}\r\nexport const maxLengthCreator=(maxLength:number)=>(value:string)=>{\r\n    if(value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport styles from './FormsControl.module.css'\r\n\r\nexport const Textarea = (props: any) => {\r\n\r\n    let {input, meta, ...restProps} = props\r\n    let error = meta.error && meta.touched\r\n    let currentForm = restProps.type\r\n    if (currentForm === 'textarea')\r\n\r\n        return <div>\r\n            <textarea {...input} {...restProps} className={error ? styles.error : ''}/>\r\n            {error && <span className={styles.errorMessage}>{meta.error}</span>}\r\n        </div>;\r\n\r\n    return <div><input {...input} {...restProps}/>\r\n        {error && <span className={styles.errorMessage}>{meta.error}</span>}</div>;\r\n\r\n}\r\n\r\n","import s from \"./Dialogs.module.css\"\r\nimport React from \"react\"\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport {MessageItem} from \"./Message/Message\";\r\nimport {dialogsDataType, messageDataType} from \"../../redux/reducer/dialog-reducer\";\r\nimport  {Field,InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../common/utils/validators\";\r\nimport { Textarea} from \"../FormsControl/FormsControl\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<dialogsDataType>\r\n    messages: Array<messageDataType>\r\n    addMessage: (newMessage: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogs.map(m => <DialogItem key={m.id} number={m.id} user={m.user}/>)\r\n    let messagesElements = props.messages.map(m => <MessageItem key={m.id} textMessage={m.textMessage}/>)\r\n\r\n\r\n    const onSubmit=(formData:FormDataType)=>{\r\n        props.addMessage(formData.message)\r\n        formData.message=''\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.addMessageWrapper}>\r\n                <DialogReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType={\r\n    message:string\r\n}\r\nconst maxLength100=maxLengthCreator(100)\r\nexport const DialogForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} type={'textarea'} name={'message'} placeholder={'add message'} validate={[required,maxLength100]}/>\r\n            <button>Send message</button>\r\n        </form>\r\n    )\r\n}\r\nconst DialogReduxForm=reduxForm<FormDataType>({form:'dialogs'})(DialogForm)","import {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    let RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {addMessage,  dialogsDataType, messageDataType} from \"../../redux/reducer/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<dialogsDataType>\r\n    messages: Array<messageDataType>\r\n}\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    dialogs: state.DialogsPage.dialogsData,\r\n    messages: state.DialogsPage.messageData,\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withRedirect)(Dialogs)\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => any\r\n}\r\n\r\nexport const ProfileStatusWithHooks=(props:ProfileStatusPropsType)=> {\r\n\r\n    let [editMode,setEditMode]=useState(false)\r\n    let [status,setStatus]=useState(props.status)\r\n    const activateInputHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n   const activateSpanHandler = () => {\r\n       setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onKeyPressActivateSpan = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            activateSpanHandler()\r\n        }\r\n    }\r\n    const updateStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus( e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(()=>{\r\n       setStatus(props.status)\r\n    },[props.status])\r\n\r\n            return (\r\n            <div>\r\n                {editMode\r\n                    ? <input value={status} autoFocus onBlur={activateSpanHandler}\r\n                             onChange={updateStatus} onKeyPress={onKeyPressActivateSpan}/>\r\n                    : <span onDoubleClick={activateInputHandler}>{status || '----'}</span>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/preloader/Preloader\";\r\nimport {profileDataUserType} from \"../../../redux/reducer/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: profileDataUserType | null\r\n    updateUserStatus: (status: string) => any\r\n    status: string\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.container}>\r\n                {props.profile.fullName}\r\n                <div><img className={s.profilePhoto}\r\n                          src={props.profile.photos.small || 'http://pm1.narvii.com/7812/ed9961348bc94cd31227151dd9aa1f918c40cff5r1-869-968v2_uhq.jpg'}\r\n                          alt={'profile avatar'}/></div>\r\n                <div className={s.userForm}><span>About me:{props.profile.aboutMe}</span>\r\n                    <span>My contacts: {props.profile.contacts.vk}</span>\r\n                </div>\r\n            </div>\r\n            <div className={s.statusBlock}>\r\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount:number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.postItem}>\r\n                <img src=''/>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {postsDataType} from \"../../redux/reducer/profile-reducer\";\r\n\r\nimport  {Field,InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../common/utils/validators\";\r\nimport { Textarea} from \"../FormsControl/FormsControl\";\r\n\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<postsDataType>\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n    changePost: (text: string) => void\r\n}\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(m => <Post message={m.message} likesCount={m.likes}/>)\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.addPost(formData.newPost)\r\n        formData.newPost=''\r\n    }\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <MyPostReduxForm onSubmit={onSubmit} />\r\n            {postsElements}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newPost: string\r\n}\r\n\r\nconst maxLength70=maxLengthCreator(70)\r\n\r\nexport const MyPostForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field  component={Textarea} name={'newPost'} validate={[required,maxLength70]}\r\n                        type={'textarea'} placeholoder={'add post'}>textarea</Field>\r\n            </div>\r\n            <div>\r\n                <button >Add post</button>\r\n            </div>\r\n        </form>\r\n        )}\r\n\r\nconst MyPostReduxForm=reduxForm<FormDataType>({form: 'newPost'})(MyPostForm)\r\n","import {addPost} from \"../../redux/reducer/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return {\r\n        posts: state.ProfilePage.postsData,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addPost}),\r\n    withRedirect)(MyPosts)","import React from 'react';\r\n\r\nimport {ProfileInfo} from \"../MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {profileDataUserType} from \"../../redux/reducer/profile-reducer\";\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile:profileDataUserType|null\r\n    updateUserStatus:(status: string) => any\r\n    status:string\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} updateUserStatus={props.updateUserStatus} status={props.status}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    getUserProfile, getUserStatus,\r\n    profileDataUserType, updateUserStatus,\r\n} from \"../../redux/reducer/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.isAuth) {\r\n\r\n            // @ts-ignore\r\n            userId= this.props.userIdAuth.toString()}\r\n            if(!userId){\r\n\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype ProfilePropsType = OwnProfilePropsType & RouteComponentProps<PathParamsType>\r\ntype OwnProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n\r\n    profile: profileDataUserType | null\r\n    userIdAuth: number| null\r\n    status: string\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => any\r\n    getUserStatus: (userId: string) => any\r\n    updateUserStatus: (status: string) => any\r\n}\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    profile: state.ProfilePage.profile,\r\n    userIdAuth: state.auth.data.id,\r\n    status: state.ProfilePage.status,\r\n    isAuth:state.auth.isAuth,\r\n\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus,updateUserStatus}),\r\n    withRouter)(ProfileContainer)\r\n\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../common/utils/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\n\r\ntype LoginPropsType={\r\n    loginThunk:(loginData:loginAPIDataType)=>void\r\n    isAuth:boolean\r\n    userId:number|undefined\r\n}\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = (props:LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginThunk(formData)\r\n    }\r\n    if(props.isAuth ) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div>\r\n            <h4>login</h4>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength30=maxLengthCreator(30)\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field validate={[required,maxLength30]} component={Textarea} type={'input'} placeholder={'login'} name={'email'}/></div>\r\n            <div><Field validate={[required,maxLength30]} component={Textarea} type={'input'} placeholder={'password'} name={'password'}/></div>\r\n            <div><Field  component={'input'} type={'checkbox'} name={'rememberMe'}/>remember me</div>\r\n            {props.error&&<div>{props.error}</div>}\r\n            <button>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)","import {connect} from \"react-redux\";\r\nimport {loginThunk} from \"../../redux/reducer/auth-reducer\";\r\nimport {Login} from \"./Login\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\n\r\ntype mapDispatchToPropsType={\r\n    loginThunk:(loginData:loginAPIDataType)=>void\r\n}\r\ntype mapStateToPropsType={\r\n    isAuth:boolean\r\n    userId:number|undefined\r\n}\r\nconst mapStateToProps=(state:stateType):mapStateToPropsType=>({\r\n    isAuth:state.auth.isAuth,\r\n    userId:state.ProfilePage.profile?.userId\r\n})\r\n\r\nexport default connect<mapStateToPropsType,mapDispatchToPropsType, { },stateType>(mapStateToProps,{loginThunk})(Login)","import React from 'react';\r\nimport s from './NavBar.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\n\r\ntype NavBarPropsType = mapStateToPropsType\r\nconst NavBar = (props:NavBarPropsType)=>{\r\n    if(props.authId){\r\n\r\n    }\r\n    return (\r\n\r\n            <nav className={s.navBar}>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/profile'>Profile</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/dialogs'>Dialogs</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/users'>Users</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/news'>News</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/music'>Music</NavLink></div>\r\n                <div className={s.item}><NavLink activeClassName={s.active} to='/settings'>Settings</NavLink></div>\r\n            </nav>\r\n\r\n    )\r\n}\r\ntype mapStateToPropsType={\r\n    authId:number | null\r\n}\r\nlet mapStateToProps=(state:stateType)=>({\r\n    authId:state.auth.data.id\r\n})\r\n\r\nexport default connect (mapStateToProps,{})(NavBar)","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Route} from 'react-router-dom';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"./redux/redux-store\";\r\n\r\nimport {Initialize} from \"./redux/reducer/app-reducer\";\r\nimport Preloader from \"./common/preloader/Preloader\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\n\r\ntype AppPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.Initialize()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isInitialization) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='appWrapper'>\r\n                <HeaderContainer/>\r\n                <NavBar/>\r\n                <div className='appWrapperContent'>\r\n                    <Route path='/profile/:userId?'\r\n                           render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/settings' render={() => <Settings/>}/>\r\n                    <Route path='/login' render={() => <LoginContainer/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    isInitialization: state.app.isInitialization\r\n})\r\ntype mapStateToPropsType = {\r\n    isInitialization: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    Initialize: () => void\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {Initialize})(App);\r\n","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>,\r\n\r\n        </HashRouter>, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JOtC\",\"dialogsItems\":\"Dialogs_dialogsItems__1YeOq\",\"dialog\":\"Dialogs_dialog__2AVQe\",\"active\":\"Dialogs_active__3Zhq4\",\"addMessageWrapper\":\"Dialogs_addMessageWrapper__hc9Qh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__3eKBj\",\"userForm\":\"ProfileInfo_userForm__13yXH\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1melj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControl_error__2-pFq\",\"errorMessage\":\"FormsControl_errorMessage__bCqED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__39KHB\",\"loginBlock\":\"Header_loginBlock__1Q1kx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Paginator_currentPage__h8BNM\",\"pageNum\":\"Paginator_pageNum__dAqj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__YbpnJ\",\"active\":\"Dialog_active__29P3J\"};"],"sourceRoot":""}