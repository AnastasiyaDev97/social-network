{"version":3,"sources":["components/MyPosts/Post/Post.module.scss","utils/handles.ts","const/index.ts","redux/reducer/dialogs/dialog-reducer.tsx","redux/reducer/profile/profile-reducer.tsx","redux/reducer/users/user-reducer.ts","redux/reducer/auth/auth-reducer.ts","redux/reducer/app/app-reducer.ts","redux/reducer/posts/posts-reducer.ts","redux/redux-store.tsx","enums/PATH.ts","components/SuperButton/SuperButton.tsx","common/paginator/Paginator.tsx","assets/oval.svg","common/preloader/Preloader.tsx","enums/ResultCode.ts","api/apiConfig/index.ts","api/api.ts","redux/reducer/users/thunk.ts","components/FollowUnfollowBtn/FollowUnfollowBtn.tsx","components/Users/User/User.tsx","components/SuperInput/SuperInputText.tsx","components/Users/UserNav/UserNav.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/SuperTextarea/SuperTextarea.tsx","components/Dialogs/Dialogs.tsx","hoc/withRedirect.tsx","components/Dialogs/DialogsContainer.tsx","enums/ErrorMessages.ts","assets/like.svg","assets/redLike.svg","components/MyPosts/Post/Post.tsx","components/MyPosts/MyPosts.tsx","components/MyPosts/MyPostsContainer.tsx","components/EditableSpan/EditableSpan.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.tsx","components/MyPosts/ProfileInfo/EditProfileForm/FriendsIcons/FriendsIcons.tsx","components/SuperCheckBox/SuperCheckBox.tsx","components/Modal/Modal.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.tsx","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/reducer/profile/thunk.ts","components/MyPosts/ProfileInfo/ProfileInfoContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","utils/validators.ts","components/Login/Login.tsx","utils/errorHandler.ts","redux/reducer/auth/thunk.ts","components/Login/LoginContainer.tsx","components/NavBar/ItemList/ItemList.tsx","components/NavBar/NavBar.tsx","components/NotFound/NotFound.tsx","App.tsx","redux/reducer/app/thunk.ts","index.tsx","components/Users/Users.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.module.scss","components/Login/Login.module.scss","components/Dialogs/Dialogs.module.scss","components/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Users/User/User.module.scss","components/NavBar/NavBar.module.scss","App.module.scss","components/Modal/Modal.module.scss","common/paginator/Paginator.module.css","components/SuperButton/SuperButton.module.scss","components/SuperInput/SuperInputText.module.scss","components/Dialogs/Dialog/DialogItem.module.scss","components/MyPosts/MyPosts.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.module.scss","components/SuperCheckBox/SuperCheckBox.module.scss","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.module.scss","components/NavBar/ItemList/ItemList.module.scss","common/preloader/Preloader.module.scss","components/SuperTextarea/SuperTextarea.module.scss","components/Profile/Profile.module.scss","components/EditableSpan/EditableSpan.module.scss"],"names":["module","exports","conversionDate","date","length","EMPTY_STRING","initialUserAvatar","currentMonth","Date","getMonth","toString","currentDay","getDate","currentDate","getFullYear","initialState","dialogsData","id","v1","user","messageData","textMessage","dialogReducer","state","action","type","newMessage","messageText","newMessageText","profile","status","setStatus","payload","profileReducer","photos","items","pageSize","totalUserCount","currentPage","isFetching","followingInProgress","itemsType","term","followUser","unFollowUser","changePage","toggleIsFetching","toggleFollowProgress","isFollowInProgress","userId","toggleItemsType","userReducer","map","m","followed","filter","f","data","email","login","isAuth","captchaUrl","isLoggedIn","setAuthUserData","toggleIsLoggedIn","authReducer","isInitialization","RequestStatus","setAppStatusAC","appReducer","postsData","message","likes","isLiked","postsReducer","deletedPost","post","newPost","postText","rootReducer","combineReducers","DialogsPage","ProfilePage","UsersPage","auth","app","posts","store","createStore","composeWithDevTools","applyMiddleware","ThunkMiddleware","window","PATH","SuperButton","memo","red","className","restProps","finalClassName","style","btn","default","Paginator","onChangePageClick","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","conditionForShowPrevButton","conditionForShowNextButton","styles","paginator","onClick","page","pageNum","scrollTo","Preloader","src","preload","alt","imgPreload","RESULT_CODES","instance","axios","create","baseURL","process","withCredentials","headers","UsersAPI","getUsersQueryParams","get","params","then","response","delete","ProfileAPI","put","photoFile","formData","FormData","append","updateProfile","LoginAPI","loginData","password","rememberMe","captcha","getUsersThunk","actualPage","dispatch","getState","a","paramsForQuery","count","friend","totalCount","FollowUnfollowBtn","item","unfollowThunk","followThunk","conditionForDisabledButton","some","disabled","connect","ownProps","resultCode","SUCCESS","User","userBlock","to","PROFILE","link","small","userPhoto","userName","name","userStatus","followBtn","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","UsersNav","disabledSpanStyle","itemsArr","callback","styleName","activeLink","navBar","Users","setTerm","searchValue","setSearchValue","titleText","useEffect","idOfTimeout","setTimeout","clearTimeout","handleChangePageClick","useCallback","userContainer","usersBlock","titleWithSearchInput","usersBlockTitle","trim","inputSearch","users","compose","UsersContainer","this","props","Component","withRouter","DialogItem","number","dialogsWrapper","DIALOGS","dialog","activeClassName","active","MessageItem","SuperTextarea","finalTextareaClassName","textarea","Dialogs","dialogs","messages","addMessage","dialogsElements","messagesElements","formik","useFormik","initialValues","onSubmit","values","resetForm","dialogsItems","messagesBlock","addMessageWrapper","handleSubmit","form","placeholder","getFieldProps","mapStateToProps","ERROR_MESSAGE","LOGIN","Post","likesCount","fullName","photo","deletePost","likePost","dislikePost","srcForAvatar","postWrapper","myPosts","leftBlock","avatar","nameLink","dateSettingsBlock","settingsBtn","postBlock","likeBlock","redLike","like","likeIcon","MyPosts","addPost","postsElements","myPostsContainer","addPostForm","fieldAddPost","EditableSpan","title","updateTitle","myStyle","isOwner","text","setText","edit","setEdit","activateSpanMode","onDoubleClick","onBlur","autoFocus","code","ProfileContact","icon","linkURL","setLinkURL","classNameForEmptyLink","emptyLink","href","preventDefault","target","rel","FriendsIcons","followingUsers","history","useHistory","followingCount","following","followingTitle","USERS","followingIconsBlock","followingPhoto","SuperCheckBox","onChangeChecked","children","spanClassName","checkbox","labelForCheckBox","checked","Modal","itemsForForm","onSubmitBtnClick","setIsModalShown","objInitialValues","newVal","initialValueTitle","initialValue","shallowEqual","modalContainer","modalBlock","btnSave","ProfileForm","contacts","aboutMe","isContactEditFormShown","setIsContactEditFormShown","contactsArr","vk","faVk","facebook","faFacebook","twitter","faTwitter","instagram","faInstagram","youtube","faYoutube","github","faGithub","website","faLinkedinIn","mainLink","faTelegramPlane","handleIconUpdateLinkClick","updateContact","userForm","contact","btnEditLinks","ProfileAvatar","saveProfileAvatar","inRef","useRef","imgWrappOwner","imgWrapp","current","click","profilePhoto","files","ref","display","ProfileInfo","updateUserStatus","userIdAuth","isModalShown","currentUser","find","valuesForUpdateProfile","lookingForAJob","lookingForAJobDescription","handleEditableSpanClick","newTitle","profileInfoWrapper","headerBlock","flexCont","nameBlock","getUserProfile","newAvatar","profileForUpdate","Profile","Object","keys","profileWrapper","ProfileInfoContainer","MyPostsContainer","ProfileContainer","refresh","match","getUserStatus","prevProps","PureComponent","passwordRegex","Login","loginThunk","validate","errors","test","INVALID_EMAIL","REQUIRED","SHORT_PASSWORD","NEED_NUMBER","validateLoginForm","fieldsWithValidation","touched","loginWrapper","field","relativeInputBlock","padding","btnMargin","handleServerNetworkError","textErr","stopSubmit","_error","getAuthDataThunk","getCaptcha","url","CAPTCHA","ItemList","path","NavBar","logoutThunk","listArray","faUser","faEnvelope","faUsers","list","span","faSignOutAlt","authId","NotFound","App","Initialize","appContainer","appWrapperAuth","appWrapperContent","exact","START","render","DialogsContainer","LoginContainer","NOT_FOUND","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.93f03b03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__3S9rf\",\"myPosts\":\"Post_myPosts__3AlgG\",\"leftBlock\":\"Post_leftBlock__3Qhe6\",\"avatar\":\"Post_avatar__wBrjw\",\"nameLink\":\"Post_nameLink__2MZS8\",\"name\":\"Post_name__3cP6i\",\"email\":\"Post_email__f1-J_\",\"dateSettingsBlock\":\"Post_dateSettingsBlock__1yelX\",\"date\":\"Post_date__1pAIp\",\"settingsBtn\":\"Post_settingsBtn__3mmL4\",\"settingsBlock\":\"Post_settingsBlock__gYr7n\",\"postBlock\":\"Post_postBlock__1t0e2\",\"postText\":\"Post_postText__1Hbr-\",\"likeBlock\":\"Post_likeBlock__1FsIr\",\"likeIcon\":\"Post_likeIcon__UwLfi\"};","export const conversionDate = (date: string) => {\r\n    if (date.length === 1) {\r\n       return `0${date}`\r\n    }\r\n    return date\r\n}","import { conversionDate } from \"utils/handles\";\r\n\r\nexport const EMPTY_STRING = \"\";\r\n\r\nexport const PAGE_SIZE = 10;\r\n\r\nexport const FIRST_PAGE = 1;\r\n\r\nexport const initialUserAvatar =\r\n  \"http://pm1.narvii.com/7812/ed9961348bc94cd31227151dd9aa1f918c40cff5r1-869-968v2_uhq.jpg\";\r\n\r\nexport const currentMonth = conversionDate(\r\n  (new Date().getMonth() + 1).toString()\r\n);\r\nexport const currentDay = conversionDate(new Date().getDate().toString());\r\n\r\nexport const currentDate = `${currentDay}.${currentMonth}.${new Date().getFullYear()}`;\r\n","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    dialogsData: [{id: v1(), user: 'Nastya'},\r\n        {id: v1(), user: 'Dima'},\r\n        {id: v1(), user: 'Victor'}],\r\n    messageData: [{id: v1(), textMessage: 'yo'},\r\n        {id: v1(), textMessage: 'konichiwa'}],\r\n}\r\n\r\nexport type dialogsDataType = {\r\n    id: string\r\n    user: string\r\n}\r\nexport type messageDataType = {\r\n    id: string\r\n    textMessage: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<dialogsDataType>\r\n    messageData: Array<messageDataType>\r\n\r\n\r\n}\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-MESSAGE':\r\n            let newMessage: messageDataType = {id: v1(), textMessage: action.messageText}\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n                newMessageText: EMPTY_STRING\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (messageText: string) => ({\r\n    type: 'DIALOGS/ADD-MESSAGE',\r\n    messageText: messageText\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogReducer","import {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    profile: {} as profileDataUserType,\r\n    status: EMPTY_STRING,\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n}\r\n\r\nexport type profileDataUserType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\":\r\n        case \"PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case 'PROFILE/SET_PHOTOS':\r\n            return {\r\n                ...state, profile: {...state.profile, photos: {...action.payload}}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserProfile = (profile: profileDataUserType) => ({\r\n    type: 'PROFILE/SET-USER-PROFILE',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setStatus = (status: string) => ({\r\n    type: 'PROFILE/SET-STATUS',\r\n    payload: {status},\r\n}) as const\r\n\r\nexport const setAvatar = (photos: PhotosType) => ({\r\n        type: 'PROFILE/SET_PHOTOS',\r\n        payload: photos\r\n    }\r\n) as const\r\n\r\n\r\nexport default profileReducer","import { EMPTY_STRING, FIRST_PAGE } from './../../../const/index';\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {PAGE_SIZE} from \"../../../const\";\r\n\r\nexport type itemsT = 'users' | 'friends' | null\r\n\r\nlet initialState = {\r\n    items: [ ],\r\n    pageSize: PAGE_SIZE,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    itemsType: 'users' as itemsT,\r\n    term: EMPTY_STRING\r\n};\r\nexport type UsersPageType = {\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    itemsType: itemsT\r\n    term: string\r\n}\r\n\r\n\r\nexport const userReducer = (state: UsersPageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"USER/FOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: true} : m)\r\n            }\r\n        case \"USER/UNFOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: false} : m)\r\n            }     \r\n        case \"USER/SET-USERS\":\r\n        case \"USER/CHANGE-PAGE\":\r\n        case \"USER/SET-TOTAL-USER-COUNT\":\r\n        case \"USER/TOGGLE-IS-FETCHING\":\r\n        case 'USER/TOGGLE-ITEMS-TYPE':\r\n        case 'USER/SET-TERM':\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case \"USER/TOGGLE-FOLLOW-PROGRESS\":\r\n            return action.isFollowInProgress ? {\r\n                ...state, followingInProgress: [...state.followingInProgress, action.userId]\r\n            } : {...state, followingInProgress: state.followingInProgress.filter(f => f !== action.userId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followUser = (id: number) => ({\r\n    type: 'USER/FOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const unFollowUser = (id: number) => ({\r\n    type: 'USER/UNFOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const setUsers = (items: Array<ItemsUsersResponseType>) => ({\r\n    type: 'USER/SET-USERS',\r\n    payload: {items},\r\n} as const)\r\n\r\nexport const changePage = (currentPage: number=FIRST_PAGE) => ({\r\n        type: 'USER/CHANGE-PAGE',\r\n        payload: {currentPage},\r\n    } as const\r\n)\r\n\r\nexport const setTotalUsersCount = (totalUserCount: number) => ({\r\n        type: 'USER/SET-TOTAL-USER-COUNT',\r\n        payload: {totalUserCount},\r\n    } as const\r\n)\r\n\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n        type: 'USER/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching},\r\n    }\r\n) as const\r\n\r\nexport const toggleFollowProgress = (isFollowInProgress: boolean, userId: number) => ({\r\n        type: 'USER/TOGGLE-FOLLOW-PROGRESS',\r\n        isFollowInProgress,\r\n        userId,\r\n    }\r\n) as const\r\n\r\nexport const toggleItemsType = (itemsType: itemsT) => ({\r\n        type: 'USER/TOGGLE-ITEMS-TYPE',\r\n        payload: {itemsType}\r\n    }\r\n) as const\r\n\r\nexport const setTerm = (term: string) => ({\r\n        type: 'USER/SET-TERM',\r\n        payload: {term}\r\n    }\r\n) as const\r\n\r\n\r\nexport default userReducer","import {actionsType} from \"../../redux-store\";\r\nimport {profileDataUserType} from \"../profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: EMPTY_STRING,\r\n        id: null,\r\n        login: EMPTY_STRING,\r\n    },\r\n    isAuth: false,\r\n    profile: null,\r\n    captchaUrl: EMPTY_STRING,\r\n    isLoggedIn:false\r\n};\r\n\r\nexport type authType = {\r\n    data: authDataType\r\n    isAuth: boolean\r\n    profile: Nullable<profileDataUserType>\r\n    captchaUrl: string\r\n    isLoggedIn:boolean\r\n}\r\n\r\nexport type authDataType = {\r\n    id: Nullable<number>\r\n    login: Nullable<string>\r\n    email: Nullable<string>\r\n}\r\n\r\nexport const authReducer = (state: authType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: {...action.data}, isAuth: action.isAuth\r\n            }\r\n        case 'AUTH/TOGGLE-IS-LOGGED-IN':\r\n\r\n            return {...state, ...action.payload}\r\n        case 'AUTH/SET-MY-PROFILE-DATA':\r\n        case 'AUTH/SET-CAPTCHA':\r\n\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: authDataType, isAuth: boolean) => {\r\n    return({\r\n        type: 'AUTH/SET-AUTH-USER-DATA',\r\n        data,\r\n        isAuth,\r\n    }) as const\r\n}\r\n\r\nexport const setMyProfileData = (profile: profileDataUserType) => ({\r\n    type: 'AUTH/SET-MY-PROFILE-DATA',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setCaptchaSuccess = (captchaUrl: string) => ({\r\n    type: 'AUTH/SET-CAPTCHA',\r\n    payload: {captchaUrl},\r\n}) as const\r\n\r\nexport const toggleIsLoggedIn = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/TOGGLE-IS-LOGGED-IN',\r\n    payload: {isLoggedIn},\r\n}) as const\r\n\r\n\r\nexport default authReducer","import { actionsType } from \"../../redux-store\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n\r\nlet initialState = {\r\n  isInitialization: false,\r\n  RequestStatus: \"idle\" as RequestStatusType,\r\n};\r\n\r\ntype initialStateAppType = {\r\n  isInitialization: boolean;\r\n  RequestStatus: RequestStatusType;\r\n};\r\n\r\nexport const appReducer = (\r\n  state: initialStateAppType = initialState,\r\n  action: actionsType\r\n) => {\r\n  switch (action.type) {\r\n    case \"APP/SET-INITIALIZATION\":\r\n      return {\r\n        ...state,\r\n        isInitialization: true,\r\n      };\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setInitialization = () =>\r\n  ({\r\n    type: \"APP/SET-INITIALIZATION\",\r\n  } as const);\r\n\r\nexport const setAppStatusAC = (RequestStatus: RequestStatusType) =>\r\n  ({\r\n    type: \"APP/SET-STATUS\",\r\n    payload: {\r\n      RequestStatus,\r\n    },\r\n  } as const);\r\n\r\nexport default appReducer;\r\n","import { v1 } from \"uuid\";\r\nimport { actionsType } from \"../../redux-store\";\r\nimport { currentDate } from \"const\";\r\n\r\nlet initialState = {\r\n  postsData: [\r\n    {\r\n      id: v1(),\r\n      message: \"it is my first post\",\r\n      likes: 30,\r\n      date: \"18.12.2020\",\r\n      isLiked: false,\r\n    },\r\n    {\r\n      id: v1(),\r\n      message: \"it-kamasutra\",\r\n      likes: 10,\r\n      date: \"20.02.2021\",\r\n      isLiked: false,\r\n    },\r\n  ],\r\n} as PostsType;\r\nexport type postsDataType = {\r\n  id: string;\r\n  message: string;\r\n  likes: number;\r\n  date: string | number;\r\n  isLiked: boolean;\r\n};\r\n\r\nexport type PostsType = {\r\n  postsData: Array<postsDataType>;\r\n};\r\n\r\nexport const postsReducer = (\r\n  state: PostsType = initialState,\r\n  action: actionsType\r\n) => {\r\n  switch (action.type) {\r\n    case \"POSTS/DELETE-POST\":\r\n      let deletedPost = state.postsData.filter((post) => post.id !== action.id);\r\n      return { ...state, postsData: deletedPost };\r\n\r\n    case \"POSTS/LIKE-POST\":\r\n      return {\r\n        ...state,\r\n        postsData: state.postsData.map((post) =>\r\n          post.id === action.id\r\n            ? { ...post, likes: post.likes + 1, isLiked: true }\r\n            : post\r\n        ),\r\n      };\r\n\r\n    case \"POSTS/DISLIKE-POST\":\r\n      return {\r\n        ...state,\r\n        postsData: state.postsData.map((post) =>\r\n          post.id === action.id\r\n            ? { ...post, likes: post.likes - 1, isLiked: false }\r\n            : post\r\n        ),\r\n      };\r\n\r\n    case \"POSTS/ADD-POST\":\r\n      let newPost: postsDataType = {\r\n        id: v1(),\r\n        message: action.postText,\r\n        likes: 0,\r\n        date: currentDate,\r\n        isLiked: false,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        postsData: [...state.postsData, newPost],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const addPost = (postText: string) =>\r\n  ({\r\n    type: \"POSTS/ADD-POST\",\r\n    postText: postText,\r\n  } as const);\r\n\r\nexport const deletePost = (id: string) =>\r\n  ({\r\n    type: \"POSTS/DELETE-POST\",\r\n    id,\r\n  } as const);\r\n\r\nexport const likePost = (id: string) =>\r\n  ({\r\n    type: \"POSTS/LIKE-POST\",\r\n    id,\r\n  } as const);\r\n\r\nexport const dislikePost = (id: string) =>\r\n  ({\r\n    type: \"POSTS/DISLIKE-POST\",\r\n    id,\r\n  } as const);\r\n\r\nexport default postsReducer;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogReducer, {addMessage} from \"./reducer/dialogs/dialog-reducer\";\r\nimport profileReducer, {\r\n\r\n    setAvatar,\r\n    setStatus,\r\n    setUserProfile\r\n} from \"./reducer/profile/profile-reducer\";\r\nimport userReducer, {\r\n    changePage,\r\n    followUser, setTerm,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowProgress,\r\n    toggleIsFetching, toggleItemsType,\r\n    unFollowUser\r\n} from \"./reducer/users/user-reducer\";\r\nimport authReducer, {\r\n    setCaptchaSuccess,\r\n    setAuthUserData,\r\n    setMyProfileData,\r\n    toggleIsLoggedIn\r\n} from \"./reducer/auth/auth-reducer\";\r\nimport ThunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport appReducer, {setAppStatusAC, setInitialization} from \"./reducer/app/app-reducer\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport postsReducer, {addPost, deletePost, dislikePost, likePost} from \"./reducer/posts/posts-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    DialogsPage: dialogReducer,\r\n    ProfilePage: profileReducer,\r\n    UsersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    posts:postsReducer,\r\n})\r\n\r\nexport type stateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ThunkMiddleware)))\r\n\r\nexport type actionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof addMessage>\r\n    | ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof changePage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowProgress>\r\n    | ReturnType<typeof setMyProfileData>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof setInitialization>\r\n    | ReturnType<typeof setAvatar>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setCaptchaSuccess>\r\n    | ReturnType<typeof toggleIsLoggedIn>\r\n    | ReturnType<typeof toggleItemsType>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof likePost>\r\n    | ReturnType<typeof dislikePost>\r\n    | ReturnType<typeof setTerm>\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, stateType, unknown, actionsType>\r\n\r\n/*\r\nexport type storeType = {\r\n    _state: stateType\r\n    subscribe: (observer: () => void) => void\r\n    _callSubscriber: () => void\r\n    getState: () => stateType\r\n    dispatch: (action: actionsType) => void\r\n}*/\r\n\r\n// @ts-ignore\r\nwindow.store = store","export enum PATH {\r\n  START = \"/\",\r\n  LOGIN = \"/login\",\r\n  DIALOGS = \"/dialogs\",\r\n  PROFILE = \"/profile\",\r\n  USERS = \"/users\",\r\n  NEWS = \"/news\",\r\n  MUSIC = \"/music\",\r\n  SETTINGS = \"/settings\",\r\n  NOT_FOUND = \"/404\",\r\n  FRIENDS = \"/friends\",\r\n}\r\n","import { ButtonHTMLAttributes, DetailedHTMLProps, FC, memo } from \"react\";\r\nimport style from \"./SuperButton.module.scss\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<\r\n  ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean;\r\n};\r\n\r\nconst SuperButton: FC<SuperButtonPropsType> = memo(\r\n  ({ red, className, ...restProps }) => {\r\n    const finalClassName = `${style.btn} ${\r\n      red ? style.red : style.default\r\n    } ${className}`;\r\n\r\n    return <button className={finalClassName} {...restProps} />;\r\n  }\r\n);\r\n\r\nexport default SuperButton;\r\n","import React, { FC, memo, useState } from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport SuperButton from \"../../components/SuperButton/SuperButton\";\r\n\r\ntype PaginatorPropsType = {\r\n  totalUserCount: number;\r\n  pageSize: number;\r\n  onChangePageClick: (currentPage: number) => void;\r\n  portionSize: number;\r\n  currentPage: number;\r\n};\r\n\r\nconst Paginator: FC<PaginatorPropsType> = memo(\r\n  ({\r\n    totalUserCount,\r\n    pageSize,\r\n    onChangePageClick,\r\n    portionSize,\r\n    currentPage,\r\n  }) => {\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const conditionForShowPrevButton = portionNumber > 1;\r\n    const conditionForShowNextButton = portionCount > portionNumber;\r\n\r\n    const onPrevButtonClick = () => {\r\n      setPortionNumber(portionNumber - 1);\r\n    };\r\n\r\n    const onNextButtonClick = () => {\r\n      setPortionNumber(portionNumber + 1);\r\n    };\r\n\r\n    return (\r\n      <div className={styles.paginator}>\r\n        {conditionForShowPrevButton && (\r\n          <SuperButton onClick={onPrevButtonClick}>PREV</SuperButton>\r\n        )}\r\n\r\n        {pages\r\n          .filter(\r\n            (page) =>\r\n              page >= leftPortionPageNumber && page <= rightPortionPageNumber\r\n          )\r\n          .map((page) => {\r\n            const onPageClick = () => {\r\n              onChangePageClick(page);\r\n              window.scrollTo(0, 0);\r\n            };\r\n\r\n            return (\r\n              <span\r\n                key={page}\r\n                className={\r\n                  page === currentPage ? styles.currentPage : styles.pageNum\r\n                }\r\n                onClick={onPageClick}\r\n              >\r\n                {page}\r\n              </span>\r\n            );\r\n          })}\r\n\r\n        {conditionForShowNextButton && (\r\n          <SuperButton onClick={onNextButtonClick}>NEXT</SuperButton>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Paginator;\r\n","export default __webpack_public_path__ + \"static/media/oval.20fb271d.svg\";","import preload from \"assets/oval.svg\";\r\nimport style from \"./Preloader.module.scss\";\r\n\r\nconst Preloader = () => {\r\n  return <img src={preload} alt=\"preloader\" className={style.imgPreload} />;\r\n};\r\n\r\nexport default Preloader;\r\n","export enum RESULT_CODES {\r\n  SUCCESS = 0,\r\n  CAPTCHA = 10,\r\n  ERROR = 1,\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n  withCredentials: true,\r\n  headers: { \"API-KEY\": process.env.REACT_APP_API_KEY },\r\n});\r\n","import { profileDataUserType } from \"redux/reducer/profile/profile-reducer\";\r\nimport { authDataType } from \"redux/reducer/auth/auth-reducer\";\r\nimport { instance } from \"./apiConfig\";\r\nimport {\r\n  getUsersQueryParamsType,\r\n  getUsersResponse,\r\n  loginAPIDataType,\r\n  photosType,\r\n  ResponseType,\r\n  securityAPIResponseT,\r\n  updateProfilePayloadT,\r\n} from \"./types\";\r\n\r\nexport const UsersAPI = {\r\n  getUsers: (getUsersQueryParams?: getUsersQueryParamsType) => {\r\n    return instance\r\n      .get<getUsersResponse>(`users`, { params: getUsersQueryParams })\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  followUserAPI: (id: number) => {\r\n    return instance\r\n      .post<ResponseType>(`follow/${id}`)\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  unfollowUserAPI: (id: number) => {\r\n    return instance\r\n      .delete<ResponseType>(`follow/${id}`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\nexport const ProfileAPI = {\r\n  getUserProfileAPI: (id: number) => {\r\n    return instance\r\n      .get<profileDataUserType>(`profile/${id}`)\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  getStatus: (id: number) => {\r\n    return instance\r\n      .get<string>(`/profile/status/${id}`)\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  updateStatus: (status: string) => {\r\n    return instance\r\n      .put<ResponseType>(`/profile/status`, { status })\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  updateAvatar: (photoFile: File) => {\r\n    let formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    return instance\r\n      .put<ResponseType<photosType>>(`/profile/photo`, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  updateProfile: (updateProfile: updateProfilePayloadT) => {\r\n    return instance\r\n      .put<ResponseType>(`/profile`, updateProfile)\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  },\r\n};\r\n\r\nexport const LoginAPI = {\r\n  login: (loginData: loginAPIDataType) => {\r\n    let { email, password, rememberMe, captcha } = loginData;\r\n    return instance\r\n      .post<ResponseType<{ userId: number }>>(\"/auth/login\", {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha,\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  logout: () => {\r\n    return instance\r\n      .delete<ResponseType>(\"/auth/login\")\r\n      .then((response) => response.data);\r\n  },\r\n\r\n  getAuthUserData: () => {\r\n    return instance\r\n      .get<ResponseType<authDataType>>(`auth/me`)\r\n      .then((response) => {\r\n        return response.data;\r\n      });\r\n  },\r\n};\r\n\r\nexport const securityAPI = () => {\r\n  return instance\r\n    .get<securityAPIResponseT>(`security/get-captcha-url`)\r\n    .then((response) => response.data);\r\n};\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {UsersAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {\r\n    changePage,\r\n    followUser,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleFollowProgress,\r\n    toggleIsFetching,\r\n    unFollowUser\r\n} from \"./user-reducer\";\r\n\r\nexport const getUsersThunk = (actualPage?:number) =>\r\n    async (dispatch: Dispatch<actionsType>, getState: () => stateType) => {\r\n        \r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleIsFetching(true))\r\n        const {currentPage, pageSize, itemsType, term} = getState().UsersPage\r\n     if(actualPage!==currentPage){\r\n        dispatch(changePage())\r\n     }\r\n        const paramsForQuery = {\r\n            count:pageSize,\r\n            page:currentPage,\r\n            term,\r\n            friend: itemsType === 'friends'\r\n        }\r\n    \r\n        let data = await UsersAPI.getUsers(paramsForQuery)\r\n        if (data) {\r\n           \r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n\r\n\r\nexport const followThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.followUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(followUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const unfollowThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.unfollowUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(unFollowUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n","import SuperButton from \"../SuperButton/SuperButton\";\r\nimport { FC, memo } from \"react\";\r\nimport { ItemsUsersResponseType } from \"api/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { followThunk, unfollowThunk } from \"redux/reducer/users/thunk\";\r\n\r\nconst FollowUnfollowBtn: FC<FollowUnfollowBtnPropsType> = memo(\r\n  ({ item, followingInProgress, unfollowThunk, followThunk }) => {\r\n    const conditionForDisabledButton = followingInProgress.some(\r\n      (id) => id === item.id\r\n    );\r\n\r\n    const onUnfollowButtonClick = () => {\r\n      unfollowThunk(item.id);\r\n    };\r\n\r\n    const onFollowButtonClick = () => {\r\n      followThunk(item.id);\r\n    };\r\n\r\n    return (\r\n      <SuperButton\r\n        disabled={conditionForDisabledButton}\r\n        onClick={item.followed ? onUnfollowButtonClick : onFollowButtonClick}\r\n      >\r\n        {item.followed ? \"Unfollow\" : \"Follow\"}\r\n      </SuperButton>\r\n    );\r\n  }\r\n);\r\n\r\ntype FollowUnfollowBtnPropsType = MapDispatchPropsType &\r\n  MapStateToPropsType &\r\n  OwnPropsT;\r\n\r\ntype MapStateToPropsType = {\r\n  followingInProgress: number[];\r\n};\r\ntype OwnPropsT = {\r\n  item: ItemsUsersResponseType;\r\n};\r\n\r\nlet mapStateToProps = (state: stateType, ownProps: OwnPropsT) => ({\r\n  followingInProgress: state.UsersPage.followingInProgress,\r\n  item: ownProps.item,\r\n});\r\n\r\ntype MapDispatchPropsType = {\r\n  followThunk: (id: number) => void;\r\n  unfollowThunk: (id: number) => void;\r\n};\r\n\r\nexport default connect<\r\n  MapStateToPropsType,\r\n  MapDispatchPropsType,\r\n  OwnPropsT,\r\n  stateType\r\n>(mapStateToProps, { followThunk, unfollowThunk })(FollowUnfollowBtn);\r\n","import { FC, memo } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PATH } from \"../../../enums/PATH\";\r\nimport { initialUserAvatar } from \"../../../const\";\r\nimport style from \"./User.module.scss\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport { ItemsUsersResponseType } from \"../../../api/types\";\r\n\r\ntype UserPropsType = {\r\n  item: ItemsUsersResponseType;\r\n  isAuth: boolean;\r\n};\r\n\r\nexport const User: FC<UserPropsType> = memo(({ item, isAuth }) => {\r\n  return (\r\n    <div className={style.userBlock}>\r\n      <NavLink\r\n        to={PATH.PROFILE + \"/\" + item.id}\r\n        key={item.id}\r\n        className={style.link}\r\n      >\r\n        <img\r\n          src={item.photos.small || initialUserAvatar}\r\n          className={style.userPhoto}\r\n          alt={\"profile avatar\"}\r\n        />\r\n      </NavLink>\r\n\r\n      <div>\r\n        <p className={style.userName}>{item.name}</p>\r\n        <div className={style.userStatus}>{item.status}</div>\r\n      </div>\r\n      <div className={style.followBtn}>\r\n        {isAuth && <FollowUnfollowBtn item={item} />}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  FC,\r\n  InputHTMLAttributes,\r\n  KeyboardEvent,\r\n  memo,\r\n} from \"react\";\r\nimport style from \"./SuperInputText.module.scss\";\r\nimport { Nullable } from \"types/Nullable\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n  // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n  error?: Nullable<string>;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperInputText: FC<SuperInputTextPropsType> = memo(\r\n  ({\r\n    type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n    onChange,\r\n    onChangeText,\r\n    onKeyPress,\r\n    onEnter,\r\n    error,\r\n    className,\r\n    /*value*/\r\n    ...restProps // все остальные пропсы попадут в объект restProps\r\n  }) => {\r\n    const finalInputClassName = `${style.input} ${\r\n      error ? style.errorInput : style.superInput\r\n    } ${className} `;\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n      onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n      onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      onKeyPress && onKeyPress(e);\r\n      onEnter && // если есть пропс onEnter\r\n        e.key === \"Enter\" && // и если нажата кнопка Enter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <input\r\n          type={type}\r\n          onChange={onChangeCallback}\r\n          onKeyPress={onKeyPressCallback}\r\n          className={finalInputClassName}\r\n          {...restProps}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default SuperInputText;\r\n","import { FC, memo } from 'react';\r\nimport { EMPTY_STRING } from '../../../const';\r\nimport { itemsT } from '../../../redux/reducer/users/user-reducer';\r\nimport style from './../Users.module.scss'\r\n\r\ntype UserNavPropsT={\r\n  isLoggedIn:boolean\r\n  itemsType:itemsT\r\n  toggleItemsType: (itemsType: itemsT) => void\r\n}\r\n\r\nexport const UsersNav: FC<UserNavPropsT> = memo(({itemsType,isLoggedIn,toggleItemsType}) => {\r\n\r\n  const disabledSpanStyle = !isLoggedIn && style.disabled;\r\n  const itemsArr = [\r\n    {\r\n      name: \"PEOPLE\",\r\n      callback: onPeopleLinkClick,\r\n      styleName: itemsType === \"users\" ? style.activeLink : EMPTY_STRING,\r\n    },\r\n    {\r\n      name: \"FRIENDS\",\r\n      callback: onFriendsLinkClick,\r\n      styleName: `${disabledSpanStyle} ${\r\n        itemsType === \"friends\" ? style.activeLink : EMPTY_STRING\r\n      }`,\r\n    },\r\n  ];\r\n\r\n  function onPeopleLinkClick() {\r\n    \r\n    toggleItemsType(\"users\");\r\n  }\r\n\r\n  function onFriendsLinkClick() {\r\n      if(isLoggedIn){\r\n      \r\n    toggleItemsType(\"friends\");\r\n      }\r\n  }\r\n\r\n  return (\r\n    <ul className={style.navBar}>\r\n      {itemsArr.map(({styleName,callback,name}) => (\r\n        <li key={name}>\r\n          <span className={styleName} onClick={callback}>\r\n            {name}\r\n          </span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n});\r\n","import style from \"./Users.module.scss\";\r\nimport {\r\n  ChangeEvent,\r\n  FC,\r\n  KeyboardEvent,\r\n  memo,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport Paginator from \"../../common/paginator/Paginator\";\r\nimport { ItemsUsersResponseType } from \"../../api/types\";\r\nimport { stateType } from \"../../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changePage,\r\n  itemsT,\r\n  setTerm,\r\n  toggleItemsType,\r\n} from \"../../redux/reducer/users/user-reducer\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport { User } from \"./User/User\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\nimport { UsersNav } from \"./UserNav/UserNav\";\r\n\r\nconst Users: FC<UsersPropsType> = memo(\r\n  ({\r\n    items,\r\n    pageSize,\r\n    totalUserCount,\r\n    isFetching,\r\n    isAuth,\r\n    currentPage,\r\n    itemsType,\r\n    changePage,\r\n    toggleItemsType,\r\n    setTerm,\r\n    term,\r\n    isLoggedIn,\r\n  }) => {\r\n    const [searchValue, setSearchValue] = useState<string>(term);\r\n\r\n    const portionSize = 10;\r\n\r\n    const titleText =\r\n      itemsType === \"friends\" ? \"Your friends\" : \"People you can follow\";\r\n\r\n    useEffect(() => {\r\n      let idOfTimeout = setTimeout(() => {\r\n        setTerm(searchValue);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearTimeout(idOfTimeout);\r\n      };\r\n    }, [searchValue, setTerm]);\r\n\r\n    const handleChangePageClick = useCallback(\r\n      (currentPage: number) => {\r\n        changePage(currentPage);\r\n      },\r\n      [pageSize, itemsType, changePage]\r\n    );\r\n\r\n    const onSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setSearchValue(e.currentTarget.value);\r\n    };\r\n\r\n    const onSearchInputEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (searchValue) {\r\n        if (e.key === \"Enter\" && searchValue.trim() !== EMPTY_STRING) {\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isFetching) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className={style.userContainer}>\r\n        <UsersNav\r\n          isLoggedIn={isLoggedIn}\r\n          itemsType={itemsType}\r\n          toggleItemsType={toggleItemsType}\r\n        />\r\n\r\n        <div className={style.usersBlock}>\r\n          <div className={style.titleWithSearchInput}>\r\n            <h6 className={style.usersBlockTitle}>{titleText}</h6>\r\n            <SuperInputText\r\n              value={searchValue}\r\n              onChange={onSearchInputChange}\r\n              onKeyPress={onSearchInputEnterPress}\r\n              className={style.inputSearch}\r\n            />\r\n          </div>\r\n\r\n          <div className={style.users}>\r\n            {items.map((item) => (\r\n              <User item={item} isAuth={isAuth} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <Paginator\r\n          totalUserCount={totalUserCount}\r\n          pageSize={pageSize}\r\n          onChangePageClick={handleChangePageClick}\r\n          portionSize={portionSize}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n  items: Array<ItemsUsersResponseType>;\r\n  pageSize: number;\r\n  totalUserCount: number;\r\n  currentPage: number;\r\n  isFetching: boolean;\r\n  itemsType: itemsT;\r\n  term: string;\r\n  isLoggedIn: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  changePage: (currentPage: number) => void;\r\n  toggleItemsType: (itemsType: itemsT) => void;\r\n  setTerm: (term: string) => void;\r\n};\r\n\r\ntype UsersPropsType = MapDispatchPropsType & MapStatePropsType;\r\n\r\nlet mapStateToProps = (state: stateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  items: state.UsersPage.items,\r\n  pageSize: state.UsersPage.pageSize,\r\n  totalUserCount: state.UsersPage.totalUserCount,\r\n  currentPage: state.UsersPage.currentPage,\r\n  isFetching: state.UsersPage.isFetching,\r\n  itemsType: state.UsersPage.itemsType,\r\n  term: state.UsersPage.term,\r\n  isLoggedIn: state.auth.isLoggedIn,\r\n});\r\n\r\nexport default compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, {}, stateType>(\r\n    mapStateToProps,\r\n    { changePage, toggleItemsType, setTerm }\r\n  )\r\n)(Users);\r\n","import { Component, ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { changePage, itemsT } from \"../../redux/reducer/users/user-reducer\";\r\nimport { stateType } from \"../../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport Users from \"./Users\";\r\nimport { getUsersThunk } from \"../../redux/reducer/users/thunk\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { FIRST_PAGE } from \"../../const\";\r\n/*import * as queryString from \"querystring\";*/\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n  componentDidMount() {\r\n     \r\n    /* const parsed = queryString.parse(this.props.history.location.search.substr(1))\r\n        let actualPage = this.props.currentPage\r\n        let actualTerm = this.props.term\r\n        let actualFilter = this.props.itemsType\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term as string\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = null\r\n                break;\r\n            case 'true':\r\n                actualFilter = 'friends'\r\n                break;\r\n            case 'false':\r\n                actualFilter = 'users'\r\n                break;\r\n        }*/\r\n\r\n    \r\n    this.props.getUsersThunk();\r\n  }\r\n\r\n  componentDidUpdate({ currentPage, term, itemsType }: Readonly<PropsType>) {\r\n    \r\n    if (\r\n      currentPage !== this.props.currentPage \r\n    ) {\r\n      this.props.getUsersThunk();\r\n    }\r\n    if( term !== this.props.term ||\r\n        itemsType !== this.props.itemsType){\r\n        this.props.getUsersThunk(FIRST_PAGE);}\r\n  }\r\n  render() {\r\n    return <Users />;\r\n  }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n  getUsersThunk: (actualPage?:number) => void;\r\n  changePage: () => void;\r\n};\r\ntype mapStateType = {\r\n  currentPage: number;\r\n  itemsType: itemsT;\r\n  term: string;\r\n};\r\n\r\nexport type PropsType = mapDispatchToPropsType &\r\n  mapStateType &\r\n  RouteComponentProps;\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n  currentPage: state.UsersPage.currentPage,\r\n  itemsType: state.UsersPage.itemsType,\r\n  term: state.UsersPage.term,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect<mapStateType, mapDispatchToPropsType, {}, stateType>(\r\n    mapStateToProps,\r\n    { getUsersThunk, changePage }\r\n  ),\r\n  withRouter\r\n)(UsersContainer);\r\n","import style from \"./DialogItem.module.scss\";\r\nimport { FC, memo } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PATH } from \"enums/PATH\";\r\n\r\ntype DialogItemType = {\r\n  number: string;\r\n  user: string;\r\n};\r\n\r\nexport const DialogItem: FC<DialogItemType> = memo(({ number, user }) => {\r\n  return (\r\n    <div className={style.dialogsWrapper}>\r\n      <NavLink\r\n        to={PATH.DIALOGS + \"/\" + number}\r\n        className={style.dialog}\r\n        activeClassName={style.active}\r\n      >\r\n        {user}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n});\r\n","import style from \"./Message.module.scss\";\r\nimport { FC, memo } from \"react\";\r\n\r\ntype MessageItemType = {\r\n  textMessage: string;\r\n};\r\n\r\nexport const MessageItem: FC<MessageItemType> = memo(({ textMessage }) => {\r\n  return <div className={style.message}>{textMessage}</div>;\r\n});\r\n","import {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  FC,\r\n  KeyboardEvent,\r\n  memo,\r\n  TextareaHTMLAttributes,\r\n} from \"react\";\r\nimport style from \"./SuperTextarea.module.scss\";\r\n\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<\r\n  TextareaHTMLAttributes<HTMLTextAreaElement>,\r\n  HTMLTextAreaElement\r\n>;\r\n\r\ntype SuperTextareaPropsType = DefaultTextareaPropsType & {\r\n  // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperTextarea: FC<SuperTextareaPropsType> = memo(\r\n  ({\r\n    // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n    onChange,\r\n    onChangeText,\r\n    onKeyPress,\r\n    onEnter,\r\n\r\n    className,\r\n    ...restProps // все остальные пропсы попадут в объект restProps\r\n  }) => {\r\n    const finalTextareaClassName = `${style.textarea} ${className} `;\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n      onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n      onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n      onKeyPress && onKeyPress(e);\r\n      onEnter && // если есть пропс onEnter\r\n        e.key === \"Enter\" && // и если нажата кнопка Enter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <textarea\r\n          onChange={onChangeCallback}\r\n          onKeyPress={onKeyPressCallback}\r\n          className={finalTextareaClassName}\r\n          {...restProps}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default SuperTextarea;\r\n","import style from \"./Dialogs.module.scss\";\r\nimport { FC, memo } from \"react\";\r\nimport { DialogItem } from \"./Dialog/DialogItem\";\r\nimport { MessageItem } from \"./Message/Message\";\r\nimport {\r\n  dialogsDataType,\r\n  messageDataType,\r\n} from \"redux/reducer/dialogs/dialog-reducer\";\r\nimport { EMPTY_STRING } from \"const\";\r\nimport { useFormik } from \"formik\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\n\r\ntype DialogsPropsType = {\r\n  dialogs: Array<dialogsDataType>;\r\n  messages: Array<messageDataType>;\r\n  addMessage: (newMessage: string) => void;\r\n};\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = memo(\r\n  ({ dialogs, messages, addMessage }) => {\r\n    let dialogsElements = dialogs.map(({ id, user }) => (\r\n      <DialogItem key={id} number={id} user={user} />\r\n    ));\r\n    let messagesElements = messages.map(({ id, textMessage }) => (\r\n      <MessageItem key={id} textMessage={textMessage} />\r\n    ));\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        message: EMPTY_STRING,\r\n      },\r\n\r\n      onSubmit: (values) => {\r\n        addMessage(values.message);\r\n        formik.resetForm();\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div className={style.dialogs}>\r\n        <div className={style.dialogsItems}>{dialogsElements}</div>\r\n\r\n        <div className={style.messagesBlock}>\r\n          <div className={style.messages}>{messagesElements}</div>\r\n\r\n          <div className={style.addMessageWrapper}>\r\n            <form onSubmit={formik.handleSubmit} className={style.form}>\r\n              <SuperTextarea\r\n                placeholder={\"add message\"}\r\n                {...formik.getFieldProps(\"message\")}\r\n                className={style.textarea}\r\n              />\r\n              <SuperButton>Send message</SuperButton>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { stateType } from \"redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { ComponentType } from \"react\";\r\nimport { PATH } from \"enums/PATH\";\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n  let RedirectComponent = (props: mapStateToPropsType) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Redirect to={PATH.LOGIN} />;\r\n    return <Component {...(restProps as T)} />;\r\n  };\r\n  return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n","import {\r\n  addMessage,\r\n  dialogsDataType,\r\n  messageDataType,\r\n} from \"redux/reducer/dialogs/dialog-reducer\";\r\nimport { Dialogs } from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { withRedirect } from \"hoc/withRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { ComponentType } from \"react\";\r\n\r\ntype mapStateToPropsType = {\r\n  dialogs: Array<dialogsDataType>;\r\n  messages: Array<messageDataType>;\r\n};\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  dialogs: state.DialogsPage.dialogsData,\r\n  messages: state.DialogsPage.messageData,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, { addMessage }),\r\n  withRedirect\r\n)(Dialogs);\r\n","export enum ERROR_MESSAGE {\r\n  INVALID_EMAIL = \"Invalid email address\",\r\n  REQUIRED = \"Required\",\r\n  SHORT_PASSWORD = \"Password must be 8 characters long\",\r\n  NEED_NUMBER = \"Invalid password. Must contain one number\",\r\n  NOT_MATCHED = \"Password not matched\",\r\n}\r\n","export default __webpack_public_path__ + \"static/media/like.27f1871b.svg\";","export default __webpack_public_path__ + \"static/media/redLike.db5f2c5f.svg\";","import { FC, memo } from \"react\";\r\nimport style from \"./Post.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PATH } from \"enums/PATH\";\r\nimport { initialUserAvatar } from \"const\";\r\nimport like from \"assets/like.svg\";\r\nimport redLike from \"assets/redLike.svg\";\r\n\r\ntype PostPropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n  date: string | number;\r\n  fullName: string;\r\n  id: string;\r\n  email: string;\r\n  photo: string;\r\n  deletePost: (id: string) => void;\r\n  likePost: (id: string) => void;\r\n  isLiked: boolean;\r\n  dislikePost: (id: string) => void;\r\n};\r\n\r\nexport const Post: FC<PostPropsType> = memo(\r\n  ({\r\n    message,\r\n    likesCount,\r\n    date,\r\n    fullName,\r\n    email,\r\n    photo,\r\n    id,\r\n    deletePost,\r\n    likePost,\r\n    isLiked,\r\n    dislikePost,\r\n  }) => {\r\n    const srcForAvatar = photo || initialUserAvatar;\r\n\r\n    const onDeleteLiClick = () => {\r\n      deletePost(id);\r\n    };\r\n\r\n    const onLikeIconClick = () => {\r\n      if (isLiked) dislikePost(id);\r\n      else likePost(id);\r\n    };\r\n\r\n    return (\r\n      <div className={style.postWrapper}>\r\n        <div className={style.myPosts}>\r\n          <div className={style.leftBlock}>\r\n            <NavLink to={PATH.PROFILE}>\r\n              <img src={srcForAvatar} alt=\"avatar\" className={style.avatar} />\r\n            </NavLink>\r\n\r\n            <NavLink to={PATH.PROFILE} className={style.nameLink}>\r\n              <h6 className={style.name}>{fullName}</h6>\r\n              <small className={style.email}>{email}</small>\r\n            </NavLink>\r\n          </div>\r\n\r\n          <div className={style.dateSettingsBlock}>\r\n            <p className={style.date}>{date}</p>\r\n            <div className={style.settingsBtn} onClick={onDeleteLiClick}></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={style.postBlock}>\r\n          <div className={style.postText}>{message}</div>\r\n          <div className={style.likeBlock}>\r\n            {likesCount}\r\n            <img\r\n              src={isLiked ? redLike : like}\r\n              className={style.likeIcon}\r\n              alt=\"like\"\r\n              onClick={onLikeIconClick}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { FC, memo } from \"react\";\r\nimport { Post } from \"./Post/Post\";\r\nimport { useFormik } from \"formik\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\nimport { MyPostsPropsT } from \"./MyPostsContainer\";\r\nimport style from \"./MyPosts.module.scss\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\n\r\nexport const MyPosts: FC<MyPostsPropsT> = memo(\r\n  ({\r\n    postsData,\r\n    addPost,\r\n    profile,\r\n    email,\r\n    deletePost,\r\n    likePost,\r\n    dislikePost,\r\n  }) => {\r\n    let postsElements = postsData.map(\r\n      ({ message, likes, date, id, isLiked }) => (\r\n        <Post\r\n          key={id}\r\n          message={message}\r\n          likesCount={likes}\r\n          date={date}\r\n          fullName={profile.fullName}\r\n          email={email}\r\n          photo={profile.photos.small}\r\n          id={id}\r\n          deletePost={deletePost}\r\n          likePost={likePost}\r\n          isLiked={isLiked}\r\n          dislikePost={dislikePost}\r\n        />\r\n      )\r\n    );\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        newPost: EMPTY_STRING,\r\n      },\r\n\r\n      onSubmit: (values) => {\r\n        addPost(values.newPost);\r\n        formik.resetForm();\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div className={style.myPostsContainer}>\r\n        {postsElements}\r\n        <form className={style.addPostForm} onSubmit={formik.handleSubmit}>\r\n          <SuperTextarea\r\n            placeholder={\"add post\"}\r\n            {...formik.getFieldProps(\"newPost\")}\r\n            className={style.fieldAddPost}\r\n          />\r\n          <SuperButton>Add post</SuperButton>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { profileDataUserType } from \"redux/reducer/profile/profile-reducer\";\r\nimport { MyPosts } from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { ComponentType } from \"react\";\r\nimport {\r\n  addPost,\r\n  deletePost,\r\n  dislikePost,\r\n  likePost,\r\n  postsDataType,\r\n} from \"redux/reducer/posts/posts-reducer\";\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n  postsData: state.posts.postsData,\r\n  profile: state.ProfilePage.profile,\r\n  email: state.auth.data.email,\r\n});\r\ntype mapStateToPropsT = {\r\n  postsData: Array<postsDataType>;\r\n  profile: profileDataUserType;\r\n  email: string;\r\n};\r\n\r\ntype mapDispatchToPropsT = {\r\n  addPost: (newPostText: string) => void;\r\n  deletePost: (id: string) => void;\r\n  likePost: (id: string) => void;\r\n  dislikePost: (id: string) => void;\r\n};\r\n\r\nexport type MyPostsPropsT = mapStateToPropsT & mapDispatchToPropsT;\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, { addPost, deletePost, likePost, dislikePost })\r\n)(MyPosts);\r\n","import { ChangeEvent, FC, KeyboardEvent, memo, useState } from \"react\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport style from \"./EditableSpan.module.scss\";\r\n\r\ntype EditableSpanT = {\r\n  title: string;\r\n  updateTitle: (newTitle: string) => void;\r\n  myStyle: string;\r\n  isOwner: boolean;\r\n};\r\n\r\nexport const EditableSpan: FC<EditableSpanT> = memo(\r\n  ({ title, updateTitle, myStyle, isOwner }) => {\r\n    const [text, setText] = useState(title);\r\n    let [edit, setEdit] = useState(true);\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setText(e.currentTarget.value);\r\n    };\r\n\r\n    const activateInputMode = () => {\r\n      if (isOwner) {\r\n        setEdit(false);\r\n      }\r\n    };\r\n\r\n    const activateSpanMode = () => {\r\n      setEdit(true);\r\n      updateTitle(text || \"----\");\r\n    };\r\n\r\n    const onActivateSpanKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.code === \"Enter\") {\r\n        activateSpanMode();\r\n      }\r\n    };\r\n\r\n    return edit ? (\r\n      <span onDoubleClick={activateInputMode} className={myStyle}>\r\n        {title}\r\n      </span>\r\n    ) : (\r\n      <SuperInputText\r\n        value={text}\r\n        onBlur={activateSpanMode}\r\n        autoFocus\r\n        onChange={onInputChange}\r\n        onKeyPress={onActivateSpanKeyPress}\r\n        className={style.input}\r\n      />\r\n    );\r\n  }\r\n);\r\n","import React, { ChangeEvent, FC, memo, MouseEvent, useState } from \"react\";\r\nimport style from \"./ProfileContact.module.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\r\nimport SuperInputText from \"components/SuperInput/SuperInputText\";\r\nimport { updateProfileThunkT } from \"redux/reducer/profile/thunk\";\r\n\r\ntype ProfileContactT = {\r\n  link: string;\r\n  icon: IconProp;\r\n  updateProfile: (updateContact: updateProfileThunkT) => void;\r\n  isOwner: boolean;\r\n  name: string;\r\n};\r\n\r\nexport const ProfileContact: FC<ProfileContactT> = memo(\r\n  ({ link, icon, updateProfile, isOwner, name }) => {\r\n    const [edit, setEdit] = useState(false);\r\n    const [linkURL, setLinkURL] = useState(link);\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setLinkURL(e.currentTarget.value);\r\n    };\r\n\r\n    const onInputBlur = () => {\r\n      if (linkURL) {\r\n        updateProfile({ [name]: linkURL });\r\n      }\r\n      setEdit(false);\r\n    };\r\n\r\n    const onLinkDblClick = (e: MouseEvent<HTMLAnchorElement>) => {\r\n      if (isOwner && !link) {\r\n        e.preventDefault();\r\n        setEdit(true);\r\n      }\r\n    };\r\n\r\n    const classNameForEmptyLink = !link && style.emptyLink;\r\n\r\n    if (!link && !isOwner) {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <>\r\n        <a\r\n          href={link}\r\n          className={`${style.icon} ${classNameForEmptyLink}`}\r\n          onClick={onLinkDblClick}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={icon} />\r\n        </a>\r\n        {edit && (\r\n          <SuperInputText\r\n            value={linkURL}\r\n            onChange={onInputChange}\r\n            className={style.input}\r\n            autoFocus\r\n            onBlur={onInputBlur}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n","import { FC, memo } from \"react\";\r\nimport { initialUserAvatar } from \"const\";\r\nimport style from \"../ProfileForm.module.scss\";\r\nimport { ItemsUsersResponseType } from \"api/types\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { PATH } from \"enums/PATH\";\r\n\r\ntype FriendsIconsT = {\r\n  followingUsers: Array<ItemsUsersResponseType>;\r\n  totalUserCount: number;\r\n};\r\n\r\nexport const FriendsIcons: FC<FriendsIconsT> = memo(\r\n  ({ followingUsers, totalUserCount }) => {\r\n    let history = useHistory();\r\n\r\n    const maxCountFollowingIcons = 5;\r\n    const followingCount = totalUserCount;\r\n\r\n    const onFriendBlockClick = () => {\r\n      history.push(PATH.USERS);\r\n    };\r\n\r\n    return (\r\n      <div className={style.following}>\r\n        <div>\r\n          <p className={style.followingTitle}>{followingCount} Following</p>\r\n          <div\r\n            onClick={onFriendBlockClick}\r\n            className={style.followingIconsBlock}\r\n          >\r\n            {followingUsers.map((user, i) => {\r\n              if (i < maxCountFollowingIcons)\r\n                return (\r\n                  <img\r\n                    key={i}\r\n                    src={user.photos.small || initialUserAvatar}\r\n                    alt=\"following\"\r\n                    className={style.followingPhoto}\r\n                  />\r\n                );\r\n              if (!user)\r\n                return <NavLink to={PATH.USERS}>add following</NavLink>;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  FC,\r\n  InputHTMLAttributes,\r\n  memo,\r\n} from \"react\";\r\nimport style from \"./SuperCheckBox.module.scss\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n  onChangeChecked?: (checked: boolean) => void;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperCheckBox: FC<SuperCheckboxPropsType> = memo(\r\n  ({\r\n    type,\r\n    onChange,\r\n    onChangeChecked,\r\n    className,\r\n    spanClassName,\r\n    children,\r\n\r\n    ...restProps\r\n  }) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n      onChange && onChange(e);\r\n      onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    };\r\n\r\n    const finalInputClassName = `${style.checkbox} ${\r\n      className ? className : EMPTY_STRING\r\n    }`;\r\n\r\n    return (\r\n      <label className={style.labelForCheckBox}>\r\n        <input\r\n          type={\"checkbox\"}\r\n          onChange={onChangeCallback}\r\n          className={finalInputClassName}\r\n          {...restProps}\r\n        />\r\n        {children && <span className={style.spanClassName}>{children}</span>}\r\n      </label>\r\n    );\r\n  }\r\n);\r\n\r\nexport default SuperCheckBox;\r\n","import style from \"./Modal.module.scss\";\r\nimport { useFormik } from \"formik\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport { FC, memo } from \"react\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\nimport { updateProfileThunkT } from \"redux/reducer/profile/thunk\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport { shallowEqual } from \"react-redux\";\r\nimport { Nullable } from \"types/Nullable\";\r\nimport { IconProp } from \"@fortawesome/fontawesome-svg-core\";\r\n\r\ntype ItemForFormT = {\r\n  title?: string;\r\n  type?: string;\r\n  initialValue: Nullable<string | boolean>;\r\n  initialValueTitle: string;\r\n  icon?: IconProp;\r\n};\r\n\r\ntype ModalPropsT = {\r\n  onSubmitBtnClick: (updateItem: updateProfileThunkT) => void;\r\n  setIsModalShown: (value: boolean) => void;\r\n  itemsForForm: ItemForFormT[];\r\n};\r\n\r\nexport const Modal: FC<ModalPropsT> = memo(\r\n  ({ itemsForForm, onSubmitBtnClick, setIsModalShown }) => {\r\n    let objInitialValues = {};\r\n\r\n    for (let i = 0; i < itemsForForm.length; i++) {\r\n      let newVal = {\r\n        [itemsForForm[i].initialValueTitle]: itemsForForm[i].initialValue,\r\n      };\r\n      objInitialValues = { ...objInitialValues, ...newVal };\r\n    }\r\n\r\n    const formik = useFormik({\r\n      initialValues: objInitialValues,\r\n\r\n      onSubmit: (values) => {\r\n        const hasChanged = !shallowEqual(formik.initialValues, values);\r\n        if (hasChanged) {\r\n          onSubmitBtnClick(values);\r\n        }\r\n        setIsModalShown(false);\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div className={style.modalContainer}>\r\n        <div className={style.modalBlock}>\r\n          <h2>Add information about yourself</h2>\r\n          <form onSubmit={formik.handleSubmit} className={style.form}>\r\n            {itemsForForm.map((value, i) => {\r\n              return (\r\n                <div key={i}>\r\n                  <p>{value.title || value.initialValueTitle}</p>\r\n                  {(value.type === \"input\" || !value.type) && (\r\n                    <SuperInputText\r\n                      {...formik.getFieldProps(value.initialValueTitle)}\r\n                      placeholder={value.initialValueTitle}\r\n                    />\r\n                  )}\r\n                  {value.type === \"checkbox\" && (\r\n                    <SuperCheckBox\r\n                      {...formik.getFieldProps(value.initialValueTitle)}\r\n                    />\r\n                  )}\r\n                  {value.type === \"textarea\" && (\r\n                    <SuperTextarea\r\n                      {...formik.getFieldProps(value.initialValueTitle)}\r\n                    />\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n            <SuperButton className={style.btnSave}>Save</SuperButton>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { FC, memo, useCallback, useState } from \"react\";\r\nimport { ContactsType } from \"redux/reducer/profile/profile-reducer\";\r\nimport style from \"./ProfileForm.module.scss\";\r\nimport { faVk } from \"@fortawesome/free-brands-svg-icons/faVk\";\r\nimport { ProfileContact } from \"./ProfileContact/ProfileContact\";\r\nimport { faLinkedinIn } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons/faGithub\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons/faYoutube\";\r\nimport { faInstagram } from \"@fortawesome/free-brands-svg-icons/faInstagram\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons/faTwitter\";\r\nimport { faFacebook } from \"@fortawesome/free-brands-svg-icons/faFacebook\";\r\nimport { ItemsUsersResponseType } from \"api/types\";\r\nimport { FriendsIcons } from \"./FriendsIcons/FriendsIcons\";\r\n\r\nimport { updateProfileThunkT } from \"redux/reducer/profile/thunk\";\r\nimport { faTelegramPlane } from \"@fortawesome/free-brands-svg-icons/faTelegramPlane\";\r\nimport { Modal } from \"components/Modal/Modal\";\r\n\r\nexport type UpdateContactsType = {\r\n  facebook?: string;\r\n  website?: string;\r\n  vk?: string;\r\n  twitter?: string;\r\n  instagram?: string;\r\n  youtube?: string;\r\n  github?: string;\r\n  mainLink?: string;\r\n};\r\n\r\ntype ProfileFormT = {\r\n  contacts: ContactsType;\r\n  isOwner: boolean;\r\n  aboutMe: string;\r\n  updateProfile: (updateProfile: updateProfileThunkT) => void;\r\n  followingUsers: Array<ItemsUsersResponseType>;\r\n  totalUserCount: number;\r\n};\r\n\r\nexport const ProfileForm: FC<ProfileFormT> = memo(\r\n  ({\r\n    contacts,\r\n    isOwner,\r\n    aboutMe,\r\n    updateProfile,\r\n    followingUsers,\r\n    totalUserCount,\r\n  }) => {\r\n    const [isContactEditFormShown, setIsContactEditFormShown] = useState(false);\r\n\r\n    const contactsArr = [\r\n      { initialValueTitle: \"vk\", initialValue: contacts.vk, icon: faVk },\r\n      {\r\n        initialValueTitle: \"facebook\",\r\n        initialValue: contacts.facebook,\r\n        icon: faFacebook,\r\n      },\r\n      {\r\n        initialValueTitle: \"twitter\",\r\n        initialValue: contacts.twitter,\r\n        icon: faTwitter,\r\n      },\r\n      {\r\n        initialValueTitle: \"instagram\",\r\n        initialValue: contacts.instagram,\r\n        icon: faInstagram,\r\n      },\r\n      {\r\n        initialValueTitle: \"youtube\",\r\n        initialValue: contacts.youtube,\r\n        icon: faYoutube,\r\n      },\r\n      {\r\n        initialValueTitle: \"github\",\r\n        initialValue: contacts.github,\r\n        icon: faGithub,\r\n      },\r\n      {\r\n        initialValueTitle: \"website\",\r\n        initialValue: contacts.website,\r\n        icon: faLinkedinIn,\r\n      },\r\n      {\r\n        initialValueTitle: \"mainLink\",\r\n        initialValue: contacts.mainLink,\r\n        icon: faTelegramPlane,\r\n      },\r\n    ];\r\n\r\n    const handleIconUpdateLinkClick = useCallback(\r\n      (updateContact: updateProfileThunkT) => {\r\n        updateProfile({ contacts: { ...contacts, ...updateContact } });\r\n      },\r\n      [contacts, updateProfile]\r\n    );\r\n\r\n    const onActivateModalIconClick = () => {\r\n      setIsContactEditFormShown(true);\r\n    };\r\n\r\n    return (\r\n      <div className={style.userForm}>\r\n        <p className={style.aboutMe}>{aboutMe}</p>\r\n        <p className={style.contacts}>\r\n          {isContactEditFormShown ? (\r\n            <Modal\r\n              itemsForForm={contactsArr}\r\n              onSubmitBtnClick={handleIconUpdateLinkClick}\r\n              setIsModalShown={setIsContactEditFormShown}\r\n            />\r\n          ) : (\r\n            contactsArr.map((contact, i) => (\r\n              <ProfileContact\r\n                key={i}\r\n                link={contact.initialValue}\r\n                icon={contact.icon}\r\n                updateProfile={handleIconUpdateLinkClick}\r\n                isOwner={isOwner}\r\n                name={contact.initialValueTitle}\r\n              />\r\n            ))\r\n          )}\r\n\r\n          {isOwner && (\r\n            <span\r\n              className={style.btnEditLinks}\r\n              onClick={onActivateModalIconClick}\r\n            />\r\n          )}\r\n        </p>\r\n\r\n        {isOwner && (\r\n          <FriendsIcons\r\n            followingUsers={followingUsers}\r\n            totalUserCount={totalUserCount}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import style from \"./ProfileAvatar.module.scss\";\r\nimport { initialUserAvatar } from \"const\";\r\nimport { ChangeEvent, FC, memo, useRef } from \"react\";\r\n\r\ntype ProfileAvatarType = {\r\n  isOwner: boolean;\r\n  photo: string;\r\n  saveProfileAvatar: (newAvatar: File) => void;\r\n};\r\n\r\nexport const ProfileAvatar: FC<ProfileAvatarType> = memo(\r\n  ({ isOwner, photo, saveProfileAvatar }) => {\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onImgClick = () => {\r\n      inRef && inRef.current && inRef.current.click();\r\n    };\r\n\r\n    const onInputChooseAvatarChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      if (e.target.files) {\r\n        saveProfileAvatar(e.target.files[0]);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <p\r\n        className={isOwner ? style.imgWrappOwner : style.imgWrapp}\r\n        onClick={onImgClick}\r\n      >\r\n        <img\r\n          className={style.profilePhoto}\r\n          src={photo || initialUserAvatar}\r\n          alt={\"profile avatar\"}\r\n        />\r\n        {isOwner && (\r\n          <input\r\n            type=\"file\"\r\n            onChange={onInputChooseAvatarChange}\r\n            ref={inRef}\r\n            style={{ display: \"none\" }}\r\n          />\r\n        )}\r\n      </p>\r\n    );\r\n  }\r\n);\r\n","import  { FC, memo, useCallback, useState } from \"react\";\r\nimport style from \"./ProfileInfo.module.scss\";\r\nimport { EditableSpan } from \"../../EditableSpan/EditableSpan\";\r\nimport { ProfileForm } from \"./EditProfileForm/ProfileForm\";\r\nimport { ProfileInfoPropsType } from \"./ProfileInfoContainer\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport { ProfileAvatar } from \"./ProfileAvatar/ProfileAvatar\";\r\nimport { Modal } from \"../../Modal/Modal\";\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = memo(\r\n  ({\r\n    profile,\r\n    updateUserStatus,\r\n    status,\r\n    saveProfileAvatar,\r\n    userIdAuth,\r\n    updateProfile,\r\n    totalUserCount,\r\n    users,\r\n  }) => {\r\n    const [isModalShown, setIsModalShown] = useState(false);\r\n\r\n    const isOwner = userIdAuth === profile.userId;\r\n\r\n    const currentUser = users.find((user) => user.id === profile.userId);\r\n\r\n    const valuesForUpdateProfile = [\r\n      {\r\n        title: \"About me\",\r\n        type: \"textarea\",\r\n        initialValueTitle: \"aboutMe\",\r\n        initialValue: profile.aboutMe,\r\n      },\r\n      {\r\n        title: \"Full name\",\r\n        type: \"input\",\r\n        initialValueTitle: \"fullName\",\r\n        initialValue: profile.fullName,\r\n      },\r\n      {\r\n        title: \"Looking for a job?\",\r\n        type: \"checkbox\",\r\n        initialValueTitle: \"lookingForAJob\",\r\n        initialValue: profile.lookingForAJob,\r\n      },\r\n      {\r\n        title: \"Describe your job\",\r\n        type: \"input\",\r\n        initialValueTitle: \"lookingForAJobDescription\",\r\n        initialValue: profile.lookingForAJobDescription,\r\n      },\r\n    ];\r\n\r\n    const handleEditableSpanClick = useCallback(\r\n      (newTitle: string) => {\r\n        if (newTitle !== profile.fullName) {\r\n          updateProfile({ fullName: newTitle });\r\n        }\r\n      },\r\n      [profile.fullName, updateProfile]\r\n    );\r\n\r\n    const onEditProfileClick = () => {\r\n      setIsModalShown(true);\r\n    };\r\n\r\n    return (\r\n      <div className={style.profileInfoWrapper}>\r\n        {isModalShown && (\r\n          <Modal\r\n            itemsForForm={valuesForUpdateProfile}\r\n            onSubmitBtnClick={updateProfile}\r\n            setIsModalShown={setIsModalShown}\r\n          />\r\n        )}\r\n        <div className={style.headerBlock}>\r\n          <div className={style.flexCont}>\r\n            <ProfileAvatar\r\n              isOwner={isOwner}\r\n              photo={profile.photos.small}\r\n              saveProfileAvatar={saveProfileAvatar}\r\n            />\r\n\r\n            <div className={style.nameBlock}>\r\n              <EditableSpan\r\n                title={profile.fullName}\r\n                updateTitle={handleEditableSpanClick}\r\n                myStyle={style.name}\r\n                isOwner={isOwner}\r\n              />\r\n              <EditableSpan\r\n                title={status}\r\n                updateTitle={updateUserStatus}\r\n                myStyle={style.status}\r\n                isOwner={isOwner}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {!isOwner && currentUser && <FollowUnfollowBtn item={currentUser} />}\r\n\r\n          {isOwner && (\r\n            <div className={style.settingsBtn} onClick={onEditProfileClick} />\r\n          )}\r\n        </div>\r\n        <ProfileForm\r\n          contacts={profile.contacts}\r\n          aboutMe={profile.aboutMe}\r\n          isOwner={isOwner}\r\n          updateProfile={updateProfile}\r\n          followingUsers={users}\r\n          totalUserCount={totalUserCount}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ProfileAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {ContactsType, setAvatar, setStatus, setUserProfile} from \"./profile-reducer\";\r\n\r\nexport const getUserProfile = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getUserProfileAPI(userId)\r\n        dispatch(setUserProfile(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const getUserStatus = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateStatus(status)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setStatus(status))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const saveProfileAvatar = (newAvatar: File) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateAvatar(newAvatar)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAvatar(data.data.photos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const updateProfile = (updateProfile: updateProfileThunkT): ThunkType =>\r\n    async (dispatch\r\n        , getState: () => stateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts\r\n        } = getState().ProfilePage.profile\r\n\r\n        let profileForUpdate = {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts, ...updateProfile\r\n        }\r\n        let data = await ProfileAPI.updateProfile(profileForUpdate)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getUserProfile(userId))\r\n        }\r\n    }\r\n\r\n\r\nexport type updateProfileThunkT = {\r\n    userId?: number\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n    contacts?: ContactsType\r\n    aboutMe?: string\r\n}","import {stateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    profileDataUserType,\r\n\r\n} from \"../../../redux/reducer/profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileInfo} from \"./ProfileInfo\";\r\nimport {\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    updateProfileThunkT,\r\n    updateUserStatus\r\n} from \"../../../redux/reducer/profile/thunk\";\r\n\r\nexport type ProfileInfoPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    profile: state.ProfilePage.profile,\r\n    userIdAuth: state.auth.data.id,\r\n    status: state.ProfilePage.status,\r\n    users: state.UsersPage.items,\r\n    totalUserCount: state.UsersPage.totalUserCount,\r\n})\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n    userIdAuth: Nullable<number>\r\n    users: Array<ItemsUsersResponseType>\r\n    totalUserCount: number\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateUserStatus: (status: string) => void\r\n    saveProfileAvatar: (newAvatar: File) => void\r\n    updateProfile: (updateProfile: updateProfileThunkT) => void\r\n    \r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {updateUserStatus,  saveProfileAvatar, updateProfile})(ProfileInfo);","import { FC, memo } from \"react\";\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\nimport style from \"./Profile.module.scss\";\r\nimport ProfileInfoContainer from \"../MyPosts/ProfileInfo/ProfileInfoContainer\";\r\nimport Preloader from \"common/preloader/Preloader\";\r\nimport { profileDataUserType } from \"redux/reducer/profile/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n  profile: profileDataUserType;\r\n  userId: string;\r\n};\r\n\r\nexport const Profile: FC<ProfilePropsType> = memo(({ profile, userId }) => {\r\n  if (Object.keys(profile).length === 0) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.profileWrapper}>\r\n      <ProfileInfoContainer />\r\n      {!userId && <MyPostsContainer />}\r\n    </div>\r\n  );\r\n});\r\n","import { ComponentType, PureComponent } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Profile } from \"./Profile\";\r\nimport { profileDataUserType } from \"redux/reducer/profile/profile-reducer\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { Nullable } from \"types/Nullable\";\r\nimport { PATH } from \"enums/PATH\";\r\nimport {\r\n  itemsT,\r\n  toggleItemsType,\r\n} from \"redux/reducer/users/user-reducer\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  saveProfileAvatar,\r\n  updateProfile,\r\n  updateUserStatus,\r\n} from \"redux/reducer/profile/thunk\";\r\nimport { getUsersThunk } from \"redux/reducer/users/thunk\";\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\nclass ProfileContainer extends PureComponent<ProfilePropsType> {\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfilePropsType>) {\r\n    if (\r\n      prevProps.match.params.userId !== this.props.match.params.userId ||\r\n      prevProps.isAuth !== this.props.isAuth\r\n    ) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  refresh = () => {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId && this.props.isAuth && this.props.userIdAuth) {\r\n      userId = this.props.userIdAuth.toString();\r\n      this.props.toggleItemsType(\"friends\");\r\n      this.props.getUsersThunk();\r\n    }\r\n    if (!userId && !this.props.isAuth) {\r\n      this.props.history.push(PATH.LOGIN);\r\n      return;\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        profile={this.props.profile}\r\n        userId={this.props.match.params.userId}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\ntype ProfilePropsType = OwnProfilePropsType &\r\n  RouteComponentProps<PathParamsType>;\r\ntype OwnProfilePropsType = mapStateToPropsType & mapDispatchToPropsType;\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean;\r\n  userIdAuth: Nullable<number>;\r\n  profile: profileDataUserType;\r\n  isLoggedIn: boolean;\r\n};\r\ntype mapDispatchToPropsType = {\r\n  getUserProfile: (userId: string) => void;\r\n  getUserStatus: (userId: string) => void;\r\n  getUsersThunk: () => void;\r\n  toggleItemsType: (itemsType: itemsT) => void;\r\n};\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  userIdAuth: state.auth.data.id,\r\n  isAuth: state.auth.isAuth,\r\n  profile: state.ProfilePage.profile,\r\n  isLoggedIn: state.auth.isLoggedIn,\r\n});\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    getUsersThunk,\r\n    toggleItemsType,\r\n  }),\r\n  withRouter\r\n)(ProfileContainer);\r\n","import {FormDataType} from \"../components/Login/Login\";\r\nimport {ERROR_MESSAGE} from \"../enums/ErrorMessages\";\r\n\r\nexport type FormikErrorType = {\r\n    message?: string\r\n    email?:string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?:string\r\n}\r\n\r\nconst minPasswordLength=8\r\nconst passwordRegex = /(?=.*[0-9])/\r\n\r\nexport const validateLoginForm = (values: FormDataType, errors: FormikErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = ERROR_MESSAGE.REQUIRED;\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n    }\r\n    if (!values.password) {\r\n        errors.password = ERROR_MESSAGE.REQUIRED;\r\n    } else if (values.password.length < minPasswordLength) {\r\n        errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n    } else if (!passwordRegex.test(values.password)) {\r\n        errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n    }\r\n}","import React, { FC, memo } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginAPIDataType } from \"api/types\";\r\nimport { useFormik } from \"formik\";\r\nimport { EMPTY_STRING } from \"const\";\r\nimport { PATH } from \"enums/PATH\";\r\nimport { FormikErrorType, validateLoginForm } from \"utils/validators\";\r\nimport style from \"./Login.module.scss\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\n\r\ntype LoginPropsType = {\r\n  loginThunk: (loginData: loginAPIDataType) => void;\r\n  isAuth: boolean;\r\n  captchaUrl: string;\r\n};\r\n\r\nexport type FormDataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\n\r\nexport const Login: FC<LoginPropsType> = memo(\r\n  ({ loginThunk, isAuth, captchaUrl }) => {\r\n    const formik = useFormik<FormDataType>({\r\n      initialValues: {\r\n        email: process.env.REACT_APP_EMAIL as string,\r\n        password: process.env.REACT_APP_PASSWORD as string,\r\n        rememberMe: false,\r\n        captcha: EMPTY_STRING,\r\n      },\r\n\r\n      validate: (values) => {\r\n        const errors: FormikErrorType = {};\r\n        validateLoginForm(values, errors);\r\n        return errors;\r\n      },\r\n\r\n      onSubmit: (values) => {\r\n        loginThunk(values);\r\n        formik.resetForm();\r\n      },\r\n    });\r\n\r\n    const fieldsWithValidation = [\r\n      {\r\n        name: \"email\",\r\n        touched: formik.touched.email,\r\n        error: formik.errors.email,\r\n        type: \"text\",\r\n      },\r\n      {\r\n        name: \"password\",\r\n        touched: formik.touched.password,\r\n        error: formik.errors.password,\r\n        type: \"password\",\r\n      },\r\n    ];\r\n\r\n    if (isAuth) {\r\n      return <Redirect to={PATH.PROFILE} />;\r\n    }\r\n\r\n    return (\r\n      <div className={style.loginWrapper}>\r\n        <h2 className={style.title}>Login</h2>\r\n        <form onSubmit={formik.handleSubmit} className={style.form}>\r\n          {fieldsWithValidation.map((field, i) => {\r\n            return (\r\n              <div key={i} className={style.relativeInputBlock}>\r\n                <SuperInputText\r\n                  placeholder={field.name}\r\n                  {...formik.getFieldProps(field.name)}\r\n                  className={style.input}\r\n                  type={field.type}\r\n                />\r\n                {field.touched && field.error && (\r\n                  <div className={style.error}>{field.error}</div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n\r\n          <SuperCheckBox\r\n            type={\"checkbox\"}\r\n            {...formik.getFieldProps(\"rememberMe\")}\r\n            className={style.padding}\r\n          >\r\n            remember me\r\n          </SuperCheckBox>\r\n\r\n          {captchaUrl && (\r\n            <div>\r\n              <img src={captchaUrl} alt=\"captcha\" />\r\n              <input\r\n                placeholder=\"add captcha\"\r\n                {...formik.getFieldProps(\"captcha\")}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <SuperButton className={style.btnMargin}>Login</SuperButton>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType} from \"../redux/redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ResponseType} from \"../api/types\";\r\nimport {setAppStatusAC} from \"../redux/reducer/app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = <T>(data:ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    let textErr = data.messages.length > 0 ? data.messages[0] : 'some err'\r\n    dispatch(stopSubmit('login', {_error: textErr}))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<actionsType>","import {Dispatch} from \"redux\";\r\nimport {actionsType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {LoginAPI, securityAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {loginAPIDataType} from \"../../../api/types\";\r\nimport {handleServerNetworkError} from \"../../../utils/errorHandler\";\r\nimport {setAuthUserData, setCaptchaSuccess, toggleIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport const getAuthDataThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.getAuthUserData()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData(data.data, true))\r\n            dispatch(toggleIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const loginThunk = (loginData: loginAPIDataType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let data = await LoginAPI.login(loginData)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getAuthDataThunk())\r\n            dispatch(toggleIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n        if (data.resultCode === RESULT_CODES.CAPTCHA) {\r\n            await dispatch(getCaptcha())\r\n        } else {\r\n            handleServerNetworkError(data, dispatch)\r\n        }\r\n    }\r\n\r\n\r\nexport const logoutThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.logout()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData({id: null, login: null, email: null}, false))\r\n            dispatch(toggleIsLoggedIn(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\nexport const getCaptcha = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await securityAPI()\r\n        dispatch(setCaptchaSuccess(data.url))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    }","import { connect } from \"react-redux\";\r\nimport { Login } from \"./Login\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { loginAPIDataType } from \"api/types\";\r\nimport { loginThunk } from \"redux/reducer/auth/thunk\";\r\n\r\ntype mapDispatchToPropsType = {\r\n  loginThunk: (loginData: loginAPIDataType) => void;\r\n};\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean;\r\n  userId: number | undefined;\r\n  captchaUrl: string;\r\n};\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    userId: state.ProfilePage.profile.userId,\r\n    captchaUrl: state.auth.captchaUrl,\r\n  };\r\n};\r\n\r\nexport default connect<\r\n  mapStateToPropsType,\r\n  mapDispatchToPropsType,\r\n  {},\r\n  stateType\r\n>(mapStateToProps, { loginThunk })(Login);\r\n","import {NavLink} from \"react-router-dom\";\r\nimport style from './ItemList.module.scss';\r\nimport {FC, memo} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\n\r\ntype ItemListT = {\r\n    path: string\r\n    title: string\r\n    icon: IconProp\r\n}\r\n\r\nexport const ItemList: FC<ItemListT> = memo(({path, title,icon}) => {\r\n\r\n   /* const onUsersItemClick=()=>{\r\n\r\n    }*/\r\n\r\n    return (\r\n        <li className={style.item}>\r\n            <NavLink activeClassName={style.active} to={path}>\r\n                <span className={style.icon}>\r\n                    <FontAwesomeIcon icon={icon}/></span>\r\n                <span>{title}</span>\r\n            </NavLink></li>\r\n    )\r\n})","import React, { FC, memo } from \"react\";\r\nimport style from \"./NavBar.module.scss\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"redux/redux-store\";\r\nimport { PATH } from \"enums/PATH\";\r\nimport { Nullable } from \"types/Nullable\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ItemList } from \"./ItemList/ItemList\";\r\nimport { faUser } from \"@fortawesome/free-regular-svg-icons/faUser\";\r\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons/faEnvelope\";\r\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons/faUsers\";\r\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons/faSignOutAlt\";\r\nimport { logoutThunk } from \"redux/reducer/auth/thunk\";\r\n\r\ntype NavBarPropsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nconst NavBar: FC<NavBarPropsType> = memo(({ isAuth, logoutThunk }) => {\r\n  const listArray = [\r\n    { path: PATH.PROFILE, title: \"PROFILE\", icon: faUser },\r\n    { path: PATH.DIALOGS, title: \"DIALOGS\", icon: faEnvelope },\r\n    { path: PATH.USERS, title: \"USERS\", icon: faUsers },\r\n    /*  {path: PATH.NEWS, title: 'NEWS', icon: faRss},\r\n        {path: PATH.MUSIC, title: 'MUSIC', icon: faItunesNote},\r\n        {path: PATH.SETTINGS, title: 'SETTINGS', icon: faCogs}, */\r\n  ];\r\n\r\n  const onLogoutSpanClick = () => {\r\n    logoutThunk();\r\n    return <Redirect to={PATH.LOGIN} />;\r\n  };\r\n\r\n  return (\r\n    <nav className={style.navBar}>\r\n      <ul className={style.list}>\r\n        {listArray.map((item, i) => (\r\n          <ItemList\r\n            key={i}\r\n            path={item.path}\r\n            title={item.title}\r\n            icon={item.icon}\r\n          />\r\n        ))}\r\n        {isAuth && (\r\n          <li className={style.item}>\r\n            <span className={style.span} onClick={onLogoutSpanClick}>\r\n              <span className={style.icon}>\r\n                <FontAwesomeIcon icon={faSignOutAlt} />\r\n              </span>\r\n              <span>LOGOUT</span>\r\n            </span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n});\r\n\r\ntype mapStateToPropsType = {\r\n  authId: Nullable<number>;\r\n  isAuth: boolean;\r\n};\r\ntype mapDispatchToPropsType = {\r\n  logoutThunk: () => void;\r\n};\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n  authId: state.auth.data.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logoutThunk })(NavBar);\r\n","export const NotFound = () => {\r\n  return <h1>404: PAGE NOT FOUND</h1>;\r\n};\r\n","import { PureComponent } from \"react\";\r\nimport \"./App.module.scss\";\r\n\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport { connect } from \"react-redux\";\r\nimport { stateType } from \"./redux/redux-store\";\r\nimport { RequestStatusType } from \"./redux/reducer/app/app-reducer\";\r\nimport Preloader from \"./common/preloader/Preloader\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport { PATH } from \"./enums/PATH\";\r\nimport { NotFound } from \"./components/NotFound/NotFound\";\r\nimport style from \"./App.module.scss\";\r\nimport { Initialize } from \"./redux/reducer/app/thunk\";\r\n\r\ntype AppPropsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\nclass App extends PureComponent<AppPropsType> {\r\n  componentDidMount() {\r\n    this.props.Initialize();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.isInitialization) {\r\n      return <Preloader />;\r\n    }\r\n\r\n    return (\r\n      <div className={style.appContainer}>\r\n        <div className={style.appWrapperAuth}>\r\n          <NavBar />\r\n          <div className={style.appWrapperContent}>\r\n            {this.props.RequestStatus === \"loading\" && <Preloader />}\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path={PATH.START}\r\n                render={() => <ProfileContainer />}\r\n              />\r\n              <Route\r\n                path={PATH.PROFILE + \"/:userId?\"}\r\n                render={() => <ProfileContainer />}\r\n              />\r\n              <Route path={PATH.DIALOGS} render={() => <DialogsContainer />} />\r\n              <Route path={PATH.USERS} render={() => <UsersContainer />} />\r\n              <Route path={PATH.LOGIN} render={() => <LoginContainer />} />\r\n              <Route path={PATH.NOT_FOUND} render={() => <NotFound />} />\r\n              <Redirect from={\"*\"} to={PATH.NOT_FOUND} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n  return {\r\n    isInitialization: state.app.isInitialization,\r\n    RequestStatus: state.app.RequestStatus,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\ntype mapStateToPropsType = {\r\n  isInitialization: boolean;\r\n  RequestStatus: RequestStatusType;\r\n  isAuth: boolean;\r\n};\r\ntype mapDispatchToPropsType = {\r\n  Initialize: () => void;\r\n};\r\n\r\nexport default connect<\r\n  mapStateToPropsType,\r\n  mapDispatchToPropsType,\r\n  {},\r\n  stateType\r\n>(mapStateToProps, { Initialize })(App);\r\n","import {ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC, setInitialization} from \"./app-reducer\";\r\nimport {getAuthDataThunk} from \"../auth/thunk\";\r\n\r\nexport const Initialize = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await dispatch(getAuthDataThunk())\r\n        dispatch(setInitialization())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }","import \"./index.css\";\r\nimport { store } from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"Users_userContainer__3CrBE\",\"navBar\":\"Users_navBar__3UtHG\",\"activeLink\":\"Users_activeLink__2AvIv\",\"usersBlock\":\"Users_usersBlock__1nw2h\",\"titleWithSearchInput\":\"Users_titleWithSearchInput__VaD0r\",\"usersBlockTitle\":\"Users_usersBlockTitle__2xF_T\",\"inputSearch\":\"Users_inputSearch__3g81Y\",\"users\":\"Users_users__2DLyv\",\"disabled\":\"Users_disabled__29K6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userForm\":\"ProfileForm_userForm__3OdLY\",\"aboutMe\":\"ProfileForm_aboutMe__U51CV\",\"contacts\":\"ProfileForm_contacts__3TUlk\",\"btnEditLinks\":\"ProfileForm_btnEditLinks__EuTvN\",\"following\":\"ProfileForm_following__7DYjN\",\"followingTitle\":\"ProfileForm_followingTitle__18mPV\",\"followingIconsBlock\":\"ProfileForm_followingIconsBlock__2ETdx\",\"followingPhoto\":\"ProfileForm_followingPhoto__2fe0x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1M48k\",\"title\":\"Login_title__3J7Db\",\"form\":\"Login_form__1WAsa\",\"relativeInputBlock\":\"Login_relativeInputBlock__2X5dr\",\"input\":\"Login_input__3z3cU\",\"error\":\"Login_error__1Mw_B\",\"btnMargin\":\"Login_btnMargin__3qqzu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__-5K-k\",\"dialogsItems\":\"Dialogs_dialogsItems__17jSL\",\"messagesBlock\":\"Dialogs_messagesBlock__2E34r\",\"messages\":\"Dialogs_messages__JI8gl\",\"dialog\":\"Dialogs_dialog__F4EtC\",\"active\":\"Dialogs_active__1jBpC\",\"addMessageWrapper\":\"Dialogs_addMessageWrapper__1bQNn\",\"form\":\"Dialogs_form__3-yrH\",\"textarea\":\"Dialogs_textarea__1WkXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__2iDqh\",\"headerBlock\":\"ProfileInfo_headerBlock__1VkdM\",\"flexCont\":\"ProfileInfo_flexCont__2Imui\",\"nameBlock\":\"ProfileInfo_nameBlock__PofH3\",\"name\":\"ProfileInfo_name__3OOrD\",\"status\":\"ProfileInfo_status__31__g\",\"settingsBtn\":\"ProfileInfo_settingsBtn__1ytaw\",\"userForm\":\"ProfileInfo_userForm__2u49m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBlock\":\"User_userBlock__2_xgm\",\"userPhoto\":\"User_userPhoto__2ooya\",\"userName\":\"User_userName__qGbo6\",\"userStatus\":\"User_userStatus__1Dx9Y\",\"followBtn\":\"User_followBtn__2p95S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__gOenE\",\"list\":\"NavBar_list__1HvT1\",\"span\":\"NavBar_span__3BoY7\",\"icon\":\"NavBar_icon__GUNUG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__2T7U5\",\"appWrapperAuth\":\"App_appWrapperAuth__1IBsH\",\"appWrapperContent\":\"App_appWrapperContent__rWFK5\",\"appWrapper\":\"App_appWrapper__3tD8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"Modal_modalContainer__16FhL\",\"modalBlock\":\"Modal_modalBlock__1xeZn\",\"form\":\"Modal_form__3JpON\",\"btnSave\":\"Modal_btnSave__2eAlu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Paginator_currentPage__2waJu\",\"pageNum\":\"Paginator_pageNum__3eyGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1dL1i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__4kHSS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogItem_dialogsWrapper__3TjG_\",\"dialog\":\"DialogItem_dialog__2-Wcc\",\"active\":\"DialogItem_active__35n61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsContainer\":\"MyPosts_myPostsContainer__3oWWm\",\"addPostForm\":\"MyPosts_addPostForm__3CIa4\",\"fieldAddPost\":\"MyPosts_fieldAddPost__2mgWW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"ProfileContact_icon__2k-Lj\",\"emptyLink\":\"ProfileContact_emptyLink__3Hf1q\",\"input\":\"ProfileContact_input__lEsdR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckBox_checkbox__2ZFbn\",\"labelForCheckBox\":\"SuperCheckBox_labelForCheckBox__2ky1X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgWrappOwner\":\"ProfileAvatar_imgWrappOwner__1OL1-\",\"profilePhoto\":\"ProfileAvatar_profilePhoto__2Xmh0\",\"imgWrapp\":\"ProfileAvatar_imgWrapp__3IGEa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ItemList_item__8PUF2\",\"active\":\"ItemList_active__192nP\",\"icon\":\"ItemList_icon__1y8cK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgPreload\":\"Preloader_imgPreload__20lpS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"SuperTextarea_textarea__2m1KZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__3DG9o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__2SSfj\"};"],"sourceRoot":""}