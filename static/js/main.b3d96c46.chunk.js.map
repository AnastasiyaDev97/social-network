{"version":3,"sources":["components/MyPosts/Post/Post.module.scss","utils/handles.ts","const/index.ts","redux/reducer/dialogs/dialog-reducer.tsx","redux/reducer/profile/profile-reducer.tsx","redux/reducer/users/user-reducer.ts","redux/reducer/auth/auth-reducer.ts","redux/reducer/app/app-reducer.ts","redux/reducer/posts/posts-reducer.ts","redux/redux-store.tsx","enums/PATH.ts","components/SuperButton/SuperButton.tsx","common/paginator/Paginator.tsx","assets/oval.svg","common/preloader/Preloader.tsx","enums/ResultCode.ts","api/apiConfig/index.ts","api/api.ts","redux/reducer/users/thunk.ts","components/FollowUnfollowBtn/FollowUnfollowBtn.tsx","components/Users/User/User.tsx","components/SuperInput/SuperInputText.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/SuperTextarea/SuperTextarea.tsx","components/Dialogs/Dialogs.tsx","hoc/withRedirect.tsx","components/Dialogs/DialogsContainer.tsx","enums/ErrorMessages.ts","assets/like.svg","components/MyPosts/Post/Post.tsx","components/MyPosts/MyPosts.tsx","components/MyPosts/MyPostsContainer.tsx","components/EditableSpan/EditableSpan.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.tsx","components/MyPosts/ProfileInfo/EditProfileForm/FriendsIcons/FriendsIcons.tsx","components/SuperCheckBox/SuperCheckBox.tsx","components/Modal/Modal.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.tsx","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/reducer/profile/thunk.ts","components/MyPosts/ProfileInfo/ProfileInfoContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","utils/validators.ts","components/Login/Login.tsx","utils/errorHandler.ts","redux/reducer/auth/thunk.ts","components/Login/LoginContainer.tsx","components/NavBar/ItemList/ItemList.tsx","components/NavBar/NavBar.tsx","components/NotFound/NotFound.tsx","App.tsx","redux/reducer/app/thunk.ts","index.tsx","components/Users/Users.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.module.scss","components/Login/Login.module.scss","components/Dialogs/Dialogs.module.scss","components/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Users/User/User.module.scss","components/NavBar/NavBar.module.scss","App.module.scss","components/Modal/Modal.module.scss","common/paginator/Paginator.module.css","components/SuperButton/SuperButton.module.scss","components/SuperInput/SuperInputText.module.scss","components/Dialogs/Dialog/DialogItem.module.scss","components/MyPosts/MyPosts.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.module.scss","components/SuperCheckBox/SuperCheckBox.module.scss","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.module.scss","components/NavBar/ItemList/ItemList.module.scss","common/preloader/Preloader.module.scss","components/SuperTextarea/SuperTextarea.module.scss","components/Profile/Profile.module.scss","components/EditableSpan/EditableSpan.module.scss"],"names":["module","exports","conversionDate","date","length","EMPTY_STRING","initialUserAvatar","currentMonth","Date","getMonth","toString","currentDay","getDate","currentDate","getFullYear","initialState","dialogsData","id","v1","user","messageData","textMessage","dialogReducer","state","action","type","newMessage","messageText","newMessageText","profile","status","setStatus","payload","profileReducer","photos","items","pageSize","totalUserCount","currentPage","isFetching","followingInProgress","itemsType","term","followUser","unFollowUser","toggleIsFetching","toggleFollowProgress","isFollowInProgress","userId","toggleItemsType","userReducer","map","m","followed","filter","f","data","email","login","isAuth","captchaUrl","isLoggedIn","setAuthUserData","toggleIsLoggedIn","authReducer","isInitialization","RequestStatus","setAppStatusAC","appReducer","postsData","message","likes","isLiked","postsReducer","deletedPost","post","newPost","postText","rootReducer","combineReducers","DialogsPage","ProfilePage","UsersPage","auth","app","posts","store","createStore","composeWithDevTools","applyMiddleware","ThunkMiddleware","window","PATH","SuperButton","memo","red","className","restProps","finalClassName","style","btn","default","Paginator","onChangePageClick","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","conditionForShowPrevButton","conditionForShowNextButton","styles","paginator","onClick","page","pageNum","scrollTo","Preloader","src","preload","alt","imgPreload","RESULT_CODES","instance","axios","create","baseURL","withCredentials","headers","UsersAPI","getUsersQueryParams","get","params","then","response","delete","ProfileAPI","put","photoFile","formData","FormData","append","updateProfile","LoginAPI","loginData","password","rememberMe","captcha","getUsersThunk","dispatch","getState","a","paramsForQuery","count","friend","totalCount","FollowUnfollowBtn","item","unfollowThunk","followThunk","conditionForDisabledButton","some","disabled","connect","ownProps","resultCode","SUCCESS","User","to","PROFILE","userBlock","small","userPhoto","userName","name","userStatus","followBtn","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","Users","changePage","setTerm","searchValue","setSearchValue","disabledSpanStyle","titleText","itemsArr","callback","styleName","activeLink","useEffect","idOfTimeout","setTimeout","clearTimeout","handleChangePageClick","useCallback","userContainer","navBar","usersBlock","titleWithSearchInput","usersBlockTitle","trim","inputSearch","users","compose","UsersContainer","this","props","Component","withRouter","DialogItem","number","dialogsWrapper","DIALOGS","dialog","activeClassName","active","MessageItem","SuperTextarea","finalTextareaClassName","textarea","Dialogs","dialogs","messages","addMessage","dialogsElements","messagesElements","formik","useFormik","initialValues","onSubmit","values","resetForm","dialogsItems","messagesBlock","addMessageWrapper","handleSubmit","form","placeholder","getFieldProps","mapStateToProps","ERROR_MESSAGE","LOGIN","Post","likesCount","fullName","photo","deletePost","likePost","dislikePost","srcForAvatar","postWrapper","myPosts","leftBlock","avatar","nameLink","dateSettingsBlock","settingsBtn","postBlock","likeBlock","like","likeIcon","MyPosts","addPost","postsElements","myPostsContainer","addPostForm","fieldAddPost","EditableSpan","title","updateTitle","myStyle","isOwner","text","setText","edit","setEdit","activateSpanMode","onDoubleClick","onBlur","autoFocus","code","ProfileContact","link","icon","linkURL","setLinkURL","classNameForEmptyLink","emptyLink","href","preventDefault","target","FriendsIcons","followingUsers","history","useHistory","followingCount","following","followingTitle","USERS","followingIconsBlock","followingPhoto","SuperCheckBox","onChangeChecked","children","spanClassName","checkbox","labelForCheckBox","checked","Modal","itemsForForm","onSubmitBtnClick","setIsModalShown","objInitialValues","newVal","initialValueTitle","initialValue","shallowEqual","modalContainer","modalBlock","btnSave","ProfileForm","contacts","aboutMe","isContactEditFormShown","setIsContactEditFormShown","contactsArr","vk","faVk","facebook","faFacebook","twitter","faTwitter","instagram","faInstagram","youtube","faYoutube","github","faGithub","website","faLinkedinIn","mainLink","faTelegramPlane","handleIconUpdateLinkClick","updateContact","userForm","contact","btnEditLinks","ProfileAvatar","saveProfileAvatar","inRef","useRef","imgWrappOwner","imgWrapp","current","click","profilePhoto","files","ref","display","ProfileInfo","updateUserStatus","userIdAuth","isModalShown","currentUser","find","valuesForUpdateProfile","lookingForAJob","lookingForAJobDescription","handleEditableSpanClick","newTitle","profileInfoWrapper","headerBlock","flexCont","nameBlock","getUserProfile","newAvatar","profileForUpdate","Profile","Object","keys","profileWrapper","ProfileInfoContainer","MyPostsContainer","ProfileContainer","refresh","match","getUserStatus","prevProps","PureComponent","passwordRegex","Login","loginThunk","process","validate","errors","test","INVALID_EMAIL","REQUIRED","SHORT_PASSWORD","NEED_NUMBER","validateLoginForm","fieldsWithValidation","touched","loginWrapper","field","relativeInputBlock","padding","btnMargin","handleServerNetworkError","textErr","stopSubmit","_error","getAuthDataThunk","getCaptcha","url","CAPTCHA","ItemList","path","NavBar","logoutThunk","listArray","faUser","faEnvelope","faUsers","list","span","faSignOutAlt","authId","NotFound","App","Initialize","appContainer","appWrapperAuth","appWrapperContent","exact","START","render","DialogsContainer","LoginContainer","NOT_FOUND","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b3d96c46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__1qeko\",\"myPosts\":\"Post_myPosts__pdi8b\",\"leftBlock\":\"Post_leftBlock__3-9I4\",\"avatar\":\"Post_avatar__1kmR8\",\"nameLink\":\"Post_nameLink__29vRT\",\"name\":\"Post_name__3cikN\",\"email\":\"Post_email__uN3GX\",\"dateSettingsBlock\":\"Post_dateSettingsBlock__DK4N0\",\"date\":\"Post_date__NFiKN\",\"settingsBtn\":\"Post_settingsBtn__fBdCg\",\"settingsBlock\":\"Post_settingsBlock__38sIN\",\"postBlock\":\"Post_postBlock__2prnk\",\"postText\":\"Post_postText__1uukU\",\"likeBlock\":\"Post_likeBlock__GD00y\",\"likeIcon\":\"Post_likeIcon__kdW-Z\"};","export const conversionDate = (date: string) => {\r\n    if (date.length === 1) {\r\n       return `0${date}`\r\n    }\r\n    return date\r\n}","import {conversionDate} from \"../utils/handles\";\r\n\r\nexport const EMPTY_STRING = '';\r\n\r\nexport const PAGE_SIZE = 10;\r\n\r\nexport const initialUserAvatar = 'http://pm1.narvii.com/7812/ed9961348bc94cd31227151dd9aa1f918c40cff5r1-869-968v2_uhq.jpg';\r\n\r\nexport const currentMonth = conversionDate((new Date().getMonth() + 1).toString())\r\nexport const currentDay = conversionDate((new Date().getDate()).toString())\r\n\r\nexport const currentDate = `${currentDay}.${currentMonth}.${new Date().getFullYear()}`","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    dialogsData: [{id: v1(), user: 'Nastya'},\r\n        {id: v1(), user: 'Dima'},\r\n        {id: v1(), user: 'Victor'}],\r\n    messageData: [{id: v1(), textMessage: 'yo'},\r\n        {id: v1(), textMessage: 'konichiwa'}],\r\n}\r\n\r\nexport type dialogsDataType = {\r\n    id: string\r\n    user: string\r\n}\r\nexport type messageDataType = {\r\n    id: string\r\n    textMessage: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<dialogsDataType>\r\n    messageData: Array<messageDataType>\r\n\r\n\r\n}\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-MESSAGE':\r\n            let newMessage: messageDataType = {id: v1(), textMessage: action.messageText}\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n                newMessageText: EMPTY_STRING\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (messageText: string) => ({\r\n    type: 'DIALOGS/ADD-MESSAGE',\r\n    messageText: messageText\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogReducer","import {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    profile: {} as profileDataUserType,\r\n    status: EMPTY_STRING,\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n}\r\n\r\nexport type profileDataUserType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\":\r\n        case \"PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case 'PROFILE/SET_PHOTOS':\r\n            return {\r\n                ...state, profile: {...state.profile, photos: {...action.payload}}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserProfile = (profile: profileDataUserType) => ({\r\n    type: 'PROFILE/SET-USER-PROFILE',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setStatus = (status: string) => ({\r\n    type: 'PROFILE/SET-STATUS',\r\n    payload: {status},\r\n}) as const\r\n\r\nexport const setAvatar = (photos: PhotosType) => ({\r\n        type: 'PROFILE/SET_PHOTOS',\r\n        payload: photos\r\n    }\r\n) as const\r\n\r\n\r\nexport default profileReducer","import { EMPTY_STRING } from './../../../const/index';\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {PAGE_SIZE} from \"../../../const\";\r\n\r\nexport type itemsT = 'users' | 'friends' | null\r\n\r\nlet initialState = {\r\n    items: [ ],\r\n    pageSize: PAGE_SIZE,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    itemsType: 'users' as itemsT,\r\n    term: EMPTY_STRING\r\n};\r\nexport type UsersPageType = {\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    itemsType: itemsT\r\n    term: string\r\n}\r\n\r\n\r\nexport const userReducer = (state: UsersPageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"USER/FOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: true} : m)\r\n            }\r\n        case \"USER/UNFOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: false} : m)\r\n            }     \r\n        case \"USER/SET-USERS\":\r\n        case \"USER/CHANGE-PAGE\":\r\n        case \"USER/SET-TOTAL-USER-COUNT\":\r\n        case \"USER/TOGGLE-IS-FETCHING\":\r\n        case 'USER/TOGGLE-ITEMS-TYPE':\r\n        case 'USER/SET-TERM':\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case \"USER/TOGGLE-FOLLOW-PROGRESS\":\r\n            return action.isFollowInProgress ? {\r\n                ...state, followingInProgress: [...state.followingInProgress, action.userId]\r\n            } : {...state, followingInProgress: state.followingInProgress.filter(f => f !== action.userId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followUser = (id: number) => ({\r\n    type: 'USER/FOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const unFollowUser = (id: number) => ({\r\n    type: 'USER/UNFOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const setUsers = (items: Array<ItemsUsersResponseType>) => ({\r\n    type: 'USER/SET-USERS',\r\n    payload: {items},\r\n} as const)\r\n\r\nexport const changePage = (currentPage: number) => ({\r\n        type: 'USER/CHANGE-PAGE',\r\n        payload: {currentPage},\r\n    } as const\r\n)\r\n\r\nexport const setTotalUsersCount = (totalUserCount: number) => ({\r\n        type: 'USER/SET-TOTAL-USER-COUNT',\r\n        payload: {totalUserCount},\r\n    } as const\r\n)\r\n\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n        type: 'USER/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching},\r\n    }\r\n) as const\r\n\r\nexport const toggleFollowProgress = (isFollowInProgress: boolean, userId: number) => ({\r\n        type: 'USER/TOGGLE-FOLLOW-PROGRESS',\r\n        isFollowInProgress,\r\n        userId,\r\n    }\r\n) as const\r\n\r\nexport const toggleItemsType = (itemsType: itemsT) => ({\r\n        type: 'USER/TOGGLE-ITEMS-TYPE',\r\n        payload: {itemsType}\r\n    }\r\n) as const\r\n\r\nexport const setTerm = (term: string) => ({\r\n        type: 'USER/SET-TERM',\r\n        payload: {term}\r\n    }\r\n) as const\r\n\r\n\r\nexport default userReducer","import {actionsType} from \"../../redux-store\";\r\nimport {profileDataUserType} from \"../profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: EMPTY_STRING,\r\n        id: null,\r\n        login: EMPTY_STRING,\r\n    },\r\n    isAuth: false,\r\n    profile: null,\r\n    captchaUrl: EMPTY_STRING,\r\n    isLoggedIn:false\r\n};\r\n\r\nexport type authType = {\r\n    data: authDataType\r\n    isAuth: boolean\r\n    profile: Nullable<profileDataUserType>\r\n    captchaUrl: string\r\n    isLoggedIn:boolean\r\n}\r\n\r\nexport type authDataType = {\r\n    id: Nullable<number>\r\n    login: Nullable<string>\r\n    email: Nullable<string>\r\n}\r\n\r\nexport const authReducer = (state: authType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: {...action.data}, isAuth: action.isAuth\r\n            }\r\n        case 'AUTH/TOGGLE-IS-LOGGED-IN':\r\n\r\n            return {...state, ...action.payload}\r\n        case 'AUTH/SET-MY-PROFILE-DATA':\r\n        case 'AUTH/SET-CAPTCHA':\r\n\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: authDataType, isAuth: boolean) => {\r\n    return({\r\n        type: 'AUTH/SET-AUTH-USER-DATA',\r\n        data,\r\n        isAuth,\r\n    }) as const\r\n}\r\n\r\nexport const setMyProfileData = (profile: profileDataUserType) => ({\r\n    type: 'AUTH/SET-MY-PROFILE-DATA',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setCaptchaSuccess = (captchaUrl: string) => ({\r\n    type: 'AUTH/SET-CAPTCHA',\r\n    payload: {captchaUrl},\r\n}) as const\r\n\r\nexport const toggleIsLoggedIn = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/TOGGLE-IS-LOGGED-IN',\r\n    payload: {isLoggedIn},\r\n}) as const\r\n\r\n\r\nexport default authReducer","import {actionsType} from \"../../redux-store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nlet initialState = {\r\n    isInitialization: false,\r\n    RequestStatus: 'idle' as RequestStatusType\r\n};\r\n\r\ntype initialStateAppType = {\r\n    isInitialization: boolean\r\n    RequestStatus: RequestStatusType\r\n}\r\n\r\nexport const appReducer = (state: initialStateAppType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZATION':\r\n            return {\r\n                ...state,\r\n                isInitialization: true\r\n            }\r\n        case 'APP/SET-STATUS':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitialization = () => ({\r\n    type: 'APP/SET-INITIALIZATION',\r\n}) as const\r\n\r\nexport const setAppStatusAC = (RequestStatus: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    payload: {\r\n        RequestStatus,\r\n    }\r\n} as const)\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {currentDate} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'it is my first post', likes: 30, date: '18.12.2020',isLiked:false},\r\n        {id: v1(), message: 'it-kamasutra', likes: 10, date: '20.02.2021',isLiked:false}],\r\n\r\n} as PostsType\r\nexport type postsDataType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n    date: string | number\r\n    isLiked:boolean\r\n}\r\n\r\nexport type PostsType = {\r\n    postsData: Array<postsDataType>\r\n\r\n}\r\n\r\n\r\nexport const postsReducer = (state: PostsType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case 'POSTS/DELETE-POST':\r\n            let deletedPost = state.postsData.filter(post => post.id !== action.id)\r\n            return {...state, postsData: deletedPost}\r\n\r\n        case 'POSTS/LIKE-POST':\r\n            return {...state,postsData:state.postsData.map(post=>\r\n                    post.id===action.id?{...post,likes:post.likes+1,isLiked:true}:post)}\r\n\r\n        case 'POSTS/DISLIKE-POST':\r\n            return {...state,postsData:state.postsData.map(post=>\r\n                    post.id===action.id?{...post,likes:post.likes-1,isLiked:false}:post)}\r\n\r\n        case 'POSTS/ADD-POST':\r\n            let newPost: postsDataType = {id: v1(), message: action.postText, likes: 0,\r\n                date: currentDate,isLiked:false}\r\n\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (postText: string) => ({\r\n    type: 'POSTS/ADD-POST',\r\n    postText: postText\r\n}) as const\r\n\r\nexport const deletePost = (id: string) => ({\r\n    type: 'POSTS/DELETE-POST',\r\n    id\r\n}) as const\r\n\r\nexport const likePost = (id: string) => ({\r\n    type: 'POSTS/LIKE-POST',\r\n    id\r\n}) as const\r\n\r\nexport const dislikePost = (id: string) => ({\r\n    type: 'POSTS/DISLIKE-POST',\r\n    id\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default postsReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogReducer, {addMessage} from \"./reducer/dialogs/dialog-reducer\";\r\nimport profileReducer, {\r\n\r\n    setAvatar,\r\n    setStatus,\r\n    setUserProfile\r\n} from \"./reducer/profile/profile-reducer\";\r\nimport userReducer, {\r\n    changePage,\r\n    followUser, setTerm,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowProgress,\r\n    toggleIsFetching, toggleItemsType,\r\n    unFollowUser\r\n} from \"./reducer/users/user-reducer\";\r\nimport authReducer, {\r\n    setCaptchaSuccess,\r\n    setAuthUserData,\r\n    setMyProfileData,\r\n    toggleIsLoggedIn\r\n} from \"./reducer/auth/auth-reducer\";\r\nimport ThunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport appReducer, {setAppStatusAC, setInitialization} from \"./reducer/app/app-reducer\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport postsReducer, {addPost, deletePost, dislikePost, likePost} from \"./reducer/posts/posts-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    DialogsPage: dialogReducer,\r\n    ProfilePage: profileReducer,\r\n    UsersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    posts:postsReducer,\r\n})\r\n\r\nexport type stateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ThunkMiddleware)))\r\n\r\nexport type actionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof addMessage>\r\n    | ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof changePage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowProgress>\r\n    | ReturnType<typeof setMyProfileData>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof setInitialization>\r\n    | ReturnType<typeof setAvatar>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setCaptchaSuccess>\r\n    | ReturnType<typeof toggleIsLoggedIn>\r\n    | ReturnType<typeof toggleItemsType>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof likePost>\r\n    | ReturnType<typeof dislikePost>\r\n    | ReturnType<typeof setTerm>\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, stateType, unknown, actionsType>\r\n\r\n/*\r\nexport type storeType = {\r\n    _state: stateType\r\n    subscribe: (observer: () => void) => void\r\n    _callSubscriber: () => void\r\n    getState: () => stateType\r\n    dispatch: (action: actionsType) => void\r\n}*/\r\n\r\n// @ts-ignore\r\nwindow.store = store","export enum PATH {\r\n    START = '/',\r\n    LOGIN = '/login',\r\n    DIALOGS = '/dialogs',\r\n    PROFILE = '/profile',\r\n    USERS = '/users',\r\n    NEWS = '/news',\r\n    MUSIC = '/music',\r\n    SETTINGS = '/settings',\r\n    NOT_FOUND='/404',\r\n    FRIENDS='/friends'\r\n}","import {ButtonHTMLAttributes, DetailedHTMLProps, FC, memo} from 'react'\r\nimport style from './SuperButton.module.scss'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: FC<SuperButtonPropsType> = memo((\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${style.btn} ${red ? style.red : style.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n})\r\n\r\nexport default SuperButton","import React, {FC, memo, useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\nimport SuperButton from \"../../components/SuperButton/SuperButton\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    onChangePageClick: (currentPage: number) => void\r\n    portionSize: number\r\n    currentPage:number\r\n}\r\n\r\nconst Paginator: FC<PaginatorPropsType> = memo(({\r\n                                                    totalUserCount, pageSize,\r\n                                                    onChangePageClick, portionSize,currentPage\r\n                                                }) => {\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const conditionForShowPrevButton = portionNumber > 1;\r\n    const conditionForShowNextButton = portionCount > portionNumber\r\n\r\n    const onPrevButtonClick = () => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }\r\n\r\n    const onNextButtonClick = () => {\r\n        setPortionNumber(portionNumber + 1)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {conditionForShowPrevButton &&\r\n            <SuperButton onClick={onPrevButtonClick}>PREV</SuperButton>}\r\n\r\n            {pages\r\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n                .map((page) => {\r\n\r\n                    const onPageClick = () => {\r\n                        onChangePageClick(page)\r\n                        window.scrollTo(0,0);\r\n                    }\r\n\r\n                    return <span key={page}\r\n                                 className={page===currentPage?styles.currentPage:styles.pageNum}\r\n                                 onClick={onPageClick}>{page}</span>\r\n                })}\r\n\r\n            {conditionForShowNextButton &&\r\n            <SuperButton onClick={onNextButtonClick}>NEXT</SuperButton>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/oval.20fb271d.svg\";","import preload from \"../../assets/oval.svg\";\r\nimport React from \"react\";\r\nimport style from './Preloader.module.scss'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload} alt='preloader' className={style.imgPreload}/>)\r\n}\r\n\r\nexport default Preloader","export enum RESULT_CODES {\r\n    SUCCESS = 0,\r\n    CAPTCHA = 10,\r\n    ERROR = 1,\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": '78ba9efb-88a6-4c7f-b505-5ad3ba5a9466'}\r\n})","import {profileDataUserType} from \"../redux/reducer/profile/profile-reducer\";\r\nimport {authDataType} from \"../redux/reducer/auth/auth-reducer\";\r\nimport {instance} from \"./apiConfig\";\r\nimport {\r\n    getUsersQueryParamsType,\r\n    getUsersResponse,\r\n    loginAPIDataType,\r\n    photosType,\r\n    ResponseType,\r\n    securityAPIResponseT,\r\n    updateProfilePayloadT\r\n} from \"./types\";\r\n\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (getUsersQueryParams?:getUsersQueryParamsType) => {\r\n\r\n        return instance.get<getUsersResponse>(`users`,{params:getUsersQueryParams})\r\n            .then(response => response.data)\r\n    },\r\n\r\n    followUserAPI: (id: number) => {\r\n        return instance.post<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    unfollowUserAPI: (id: number) => {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUserProfileAPI: (id: number) => {\r\n        return instance.get<profileDataUserType>(`profile/${id}`)\r\n            .then(response => response.data\r\n            )\r\n    },\r\n\r\n    getStatus: (id: number) => {\r\n        return instance.get<string>(`/profile/status/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateStatus: (status: string) => {\r\n        return instance.put<ResponseType>(`/profile/status`, {status})\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateAvatar: (photoFile: File) => {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<ResponseType<photosType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateProfile:(updateProfile:updateProfilePayloadT)=>{\r\n        return instance.put<ResponseType>(`/profile`, updateProfile)\r\n            .then(response => {\r\n                return response.data})\r\n    }\r\n}\r\n\r\nexport const LoginAPI = {\r\n    login: (loginData: loginAPIDataType) => {\r\n        let {email, password, rememberMe, captcha} = loginData\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n\r\n    logout: () => {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n            .then(response => response.data)\r\n    },\r\n\r\n    getAuthUserData: () => {\r\n        return instance.get<ResponseType<authDataType>>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\n\r\nexport const securityAPI = () => {\r\n    return instance.get<securityAPIResponseT>(`security/get-captcha-url`)\r\n        .then(response => response.data)\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {UsersAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {\r\n    followUser,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleFollowProgress,\r\n    toggleIsFetching,\r\n    unFollowUser\r\n} from \"./user-reducer\";\r\n\r\nexport const getUsersThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>, getState: () => stateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleIsFetching(true))\r\n        const {currentPage, pageSize, itemsType, term} = getState().UsersPage\r\n        const paramsForQuery = {\r\n            count:pageSize,\r\n            page: currentPage,\r\n            term,\r\n            friend: itemsType === 'friends'\r\n        }\r\n        let data = await UsersAPI.getUsers(paramsForQuery)\r\n        if (data) {\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n\r\n\r\nexport const followThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.followUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(followUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const unfollowThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.unfollowUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(unFollowUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n","import SuperButton from \"../SuperButton/SuperButton\";\r\nimport React, {FC, memo} from \"react\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {followThunk, unfollowThunk} from \"../../redux/reducer/users/thunk\";\r\n\r\n\r\nconst FollowUnfollowBtn: FC<FollowUnfollowBtnPropsType> = memo(({\r\n                                                                    item, followingInProgress, unfollowThunk,\r\n                                                                    followThunk\r\n                                                                }) => {\r\n\r\n    const conditionForDisabledButton = followingInProgress.some(id => id === item.id)\r\n\r\n\r\n    const onUnfollowButtonClick = () => {\r\n        unfollowThunk(item.id)\r\n    }\r\n\r\n    const onFollowButtonClick = () => {\r\n        followThunk(item.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <SuperButton disabled={conditionForDisabledButton}\r\n                     onClick={item.followed ? onUnfollowButtonClick : onFollowButtonClick}>\r\n            {item.followed ? 'Unfollow' : 'Follow'}</SuperButton>\r\n    )\r\n})\r\n\r\n\r\ntype FollowUnfollowBtnPropsType = MapDispatchPropsType & MapStateToPropsType & OwnPropsT\r\n\r\ntype MapStateToPropsType = {\r\n    followingInProgress: number[]\r\n}\r\ntype OwnPropsT = {\r\n    item: ItemsUsersResponseType\r\n}\r\n\r\nlet mapStateToProps = (state: stateType, ownProps: OwnPropsT) => ({\r\n    followingInProgress: state.UsersPage.followingInProgress,\r\n    item: ownProps.item\r\n})\r\n\r\ntype MapDispatchPropsType = {\r\n    followThunk: (id: number) => void\r\n    unfollowThunk: (id: number) => void\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchPropsType, OwnPropsT, stateType>\r\n(mapStateToProps, {followThunk, unfollowThunk})(FollowUnfollowBtn)","import React, {FC, memo} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\nimport {initialUserAvatar} from \"../../../const\";\r\nimport style from \"./User.module.scss\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\n\r\ntype UserPropsType = {\r\n    item: ItemsUsersResponseType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const User: FC<UserPropsType> = memo(({item, isAuth}) => {\r\n    return (\r\n        <NavLink to={PATH.PROFILE + '/' + item.id} key={item.id} className={style.userBlock}>\r\n\r\n            <img\r\n                src={item.photos.small || initialUserAvatar}\r\n                className={style.userPhoto} alt={'profile avatar'}/>\r\n\r\n\r\n            <div>\r\n                <p className={style.userName}>{item.name}</p>\r\n                <div className={style.userStatus}>{item.status}</div>\r\n\r\n            </div>\r\n            <div className={style.followBtn}>\r\n                {isAuth && <FollowUnfollowBtn item={item}/>\r\n                }\r\n            </div>\r\n\r\n\r\n        </NavLink>\r\n    )\r\n})","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport style from './SuperInputText.module.scss'\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: Nullable<string>\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperInputText: FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className,\r\n        /*value*/\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const finalInputClassName = `${style.input} ${error ? style.errorInput : style.superInput} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperInputText","import style from \"./Users.module.scss\";\r\nimport React, {\r\n  ChangeEvent,\r\n  FC,\r\n  KeyboardEvent,\r\n  memo,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport Paginator from \"../../common/paginator/Paginator\";\r\nimport { ItemsUsersResponseType } from \"../../api/types\";\r\nimport { stateType } from \"../../redux/redux-store\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  changePage,\r\n  itemsT,\r\n  setTerm,\r\n  toggleItemsType,\r\n} from \"../../redux/reducer/users/user-reducer\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport { User } from \"./User/User\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\n\r\nconst Users: FC<UsersPropsType> = memo(\r\n  ({\r\n    items,\r\n    pageSize,\r\n    totalUserCount,\r\n    isFetching,\r\n    isAuth,\r\n    currentPage,\r\n    itemsType,\r\n    changePage,\r\n    toggleItemsType,\r\n    setTerm,\r\n    term,\r\n    isLoggedIn,\r\n  }) => {\r\n    const [searchValue, setSearchValue] = useState<string>(term);\r\n\r\n    const portionSize = 10;\r\n    const disabledSpanStyle = !isLoggedIn && style.disabled;\r\n    const titleText =\r\n      itemsType === \"friends\" ? \"Your friends\" : \"People you can follow\";\r\n    const itemsArr = [\r\n      {\r\n        name: \"PEOPLE\",\r\n        callback: onPeopleLinkClick,\r\n        styleName: itemsType === \"users\" ? style.activeLink : EMPTY_STRING,\r\n      },\r\n      {\r\n        name: \"FRIENDS\",\r\n        callback: onFriendsLinkClick,\r\n        styleName: `${disabledSpanStyle} ${\r\n          itemsType === \"friends\" ? style.activeLink : EMPTY_STRING\r\n        }`,\r\n      },\r\n    ];\r\n\r\n    useEffect(() => {\r\n      let idOfTimeout = setTimeout(() => {\r\n        setTerm(searchValue);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearTimeout(idOfTimeout);\r\n      };\r\n    }, [searchValue, setTerm]);\r\n\r\n    const handleChangePageClick = useCallback(\r\n      (currentPage: number) => {\r\n        changePage(currentPage);\r\n      },\r\n      [pageSize, itemsType, changePage]\r\n    );\r\n\r\n    const onSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setSearchValue(e.currentTarget.value);\r\n    };\r\n\r\n    const onSearchInputEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (searchValue) {\r\n        if (e.key === \"Enter\" && searchValue.trim() !== EMPTY_STRING) {\r\n        }\r\n      }\r\n    };\r\n\r\n    function onPeopleLinkClick() {\r\n      toggleItemsType(\"users\");\r\n    }\r\n\r\n    function onFriendsLinkClick() {\r\n        if(isLoggedIn)\r\n      toggleItemsType(\"friends\");\r\n      \r\n    }\r\n\r\n    if (isFetching) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className={style.userContainer}>\r\n        <ul className={style.navBar}>\r\n          {itemsArr.map((item, i) => (\r\n            <li key={i}>\r\n              <span className={item.styleName} onClick={item.callback}>\r\n                {item.name}\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className={style.usersBlock}>\r\n          <div className={style.titleWithSearchInput}>\r\n            <h6 className={style.usersBlockTitle}>{titleText}</h6>\r\n            <SuperInputText\r\n              value={searchValue}\r\n              onChange={onSearchInputChange}\r\n              onKeyPress={onSearchInputEnterPress}\r\n              className={style.inputSearch}\r\n            />\r\n          </div>\r\n\r\n          <div className={style.users}>\r\n            {items.map((item) => (\r\n              <User item={item} isAuth={isAuth} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <Paginator\r\n          totalUserCount={totalUserCount}\r\n          pageSize={pageSize}\r\n          onChangePageClick={handleChangePageClick}\r\n          portionSize={portionSize}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n  items: Array<ItemsUsersResponseType>;\r\n  pageSize: number;\r\n  totalUserCount: number;\r\n  currentPage: number;\r\n  isFetching: boolean;\r\n  itemsType: itemsT;\r\n  term: string;\r\n  isLoggedIn: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  changePage: (currentPage: number) => void;\r\n  toggleItemsType: (itemsType: itemsT) => void;\r\n  setTerm: (term: string) => void;\r\n};\r\n\r\ntype UsersPropsType = MapDispatchPropsType & MapStatePropsType;\r\n\r\nlet mapStateToProps = (state: stateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  items: state.UsersPage.items,\r\n  pageSize: state.UsersPage.pageSize,\r\n  totalUserCount: state.UsersPage.totalUserCount,\r\n  currentPage: state.UsersPage.currentPage,\r\n  isFetching: state.UsersPage.isFetching,\r\n  itemsType: state.UsersPage.itemsType,\r\n  term: state.UsersPage.term,\r\n  isLoggedIn: state.auth.isLoggedIn,\r\n});\r\n\r\nexport default compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, {}, stateType>(\r\n    mapStateToProps,\r\n    { changePage, toggleItemsType, setTerm }\r\n  )\r\n)(Users);\r\n","import React, {Component, ComponentType} from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {itemsT, toggleItemsType} from \"../../redux/reducer/users/user-reducer\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport Users from \"./Users\";\r\nimport {getUsersThunk} from \"../../redux/reducer/users/thunk\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n/*import * as queryString from \"querystring\";*/\r\n\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n       /* const parsed = queryString.parse(this.props.history.location.search.substr(1))\r\n        let actualPage = this.props.currentPage\r\n        let actualTerm = this.props.term\r\n        let actualFilter = this.props.itemsType\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term as string\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = null\r\n                break;\r\n            case 'true':\r\n                actualFilter = 'friends'\r\n                break;\r\n            case 'false':\r\n                actualFilter = 'users'\r\n                break;\r\n        }*/\r\n\r\nthis.props.toggleItemsType('users')\r\n        this.props.getUsersThunk()\r\n    }\r\n\r\n    componentDidUpdate({currentPage, term, itemsType}: Readonly<PropsType>) {\r\n        if ((currentPage !== this.props.currentPage) || (term !== this.props.term) || (itemsType !== this.props.itemsType)) {\r\n            this.props.getUsersThunk()\r\n        }\r\n    }\r\n    render() {\r\n        return <Users/>\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUsersThunk: () => void\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n}\r\ntype mapStateType = {\r\n    currentPage: number\r\n    itemsType: itemsT\r\n    term: string\r\n}\r\n\r\nexport type PropsType = mapDispatchToPropsType & mapStateType & RouteComponentProps\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    currentPage: state.UsersPage.currentPage,\r\n    itemsType: state.UsersPage.itemsType,\r\n    term: state.UsersPage.term,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect<mapStateType, mapDispatchToPropsType, {}, stateType>\r\n    (mapStateToProps, {getUsersThunk,toggleItemsType}), withRouter)(UsersContainer)\r\n","import style from \"./DialogItem.module.scss\"\r\nimport {FC, memo} from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\n\r\n\r\ntype DialogItemType = {\r\n    number: string\r\n    user: string\r\n}\r\n\r\n\r\nexport const DialogItem: FC<DialogItemType> = memo(({number, user}) => {\r\n    return (\r\n        <div className={style.dialogsWrapper}>\r\n            <NavLink to={PATH.DIALOGS+'/' + number} className={style.dialog}\r\n                     activeClassName={style.active}>{user}</NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import style from \"./Message.module.css\"\r\nimport React, {FC, memo} from \"react\"\r\n\r\n\r\ntype MessageItemType = {\r\n    textMessage: string\r\n}\r\n\r\n\r\nexport const MessageItem: FC<MessageItemType> = memo(({textMessage}) => {\r\n        return (\r\n            <div className={style.message}>{textMessage}</div>\r\n        )\r\n    }\r\n)\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, KeyboardEvent, memo, TextareaHTMLAttributes} from 'react'\r\nimport style from './SuperTextarea.module.scss'\r\n\r\n\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>,HTMLTextAreaElement>\r\n\r\n\r\ntype SuperTextareaPropsType = DefaultTextareaPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperTextarea: FC<SuperTextareaPropsType> = memo((\r\n    {\r\n       // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n\r\n        className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const finalTextareaClassName = `${style.textarea} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <textarea\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalTextareaClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperTextarea","import style from \"./Dialogs.module.scss\";\r\nimport { FC, memo } from \"react\";\r\nimport { DialogItem } from \"./Dialog/DialogItem\";\r\nimport { MessageItem } from \"./Message/Message\";\r\nimport {\r\n  dialogsDataType,\r\n  messageDataType,\r\n} from \"../../redux/reducer/dialogs/dialog-reducer\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\nimport { useFormik } from \"formik\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\n\r\ntype DialogsPropsType = {\r\n  dialogs: Array<dialogsDataType>;\r\n  messages: Array<messageDataType>;\r\n  addMessage: (newMessage: string) => void;\r\n};\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = memo(\r\n  ({ dialogs, messages, addMessage }) => {\r\n    let dialogsElements = dialogs.map(({ id, user }) => (\r\n      <DialogItem key={id} number={id} user={user} />\r\n    ));\r\n    let messagesElements = messages.map(({ id, textMessage }) => (\r\n      <MessageItem key={id} textMessage={textMessage} />\r\n    ));\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        message: EMPTY_STRING,\r\n      },\r\n\r\n      onSubmit: (values) => {\r\n        addMessage(values.message);\r\n        formik.resetForm();\r\n      },\r\n    });\r\n\r\n    return (\r\n      <div className={style.dialogs}>\r\n\r\n        <div className={style.dialogsItems}>{dialogsElements}</div>\r\n\r\n        <div className={style.messagesBlock}>\r\n          <div className={style.messages}>{messagesElements}</div>\r\n\r\n          <div className={style.addMessageWrapper}>\r\n            <form onSubmit={formik.handleSubmit} className={style.form}>\r\n              <SuperTextarea\r\n                placeholder={\"add message\"}\r\n                {...formik.getFieldProps(\"message\")}\r\n                className={style.textarea}\r\n              />\r\n              <SuperButton>Send message</SuperButton>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {PATH} from \"../enums/PATH\";\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    let RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {addMessage,  dialogsDataType, messageDataType} from \"../../redux/reducer/dialogs/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<dialogsDataType>\r\n    messages: Array<messageDataType>\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    dialogs: state.DialogsPage.dialogsData,\r\n    messages: state.DialogsPage.messageData,\r\n\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withRedirect)(Dialogs)\r\n\r\n","export enum ERROR_MESSAGE {\r\n    INVALID_EMAIL = 'Invalid email address',\r\n    REQUIRED = 'Required',\r\n    SHORT_PASSWORD = 'Password must be 8 characters long',\r\n    NEED_NUMBER = 'Invalid password. Must contain one number',\r\n    NOT_MATCHED = 'Password not matched',\r\n}","export default __webpack_public_path__ + \"static/media/like.db5f2c5f.svg\";","import React, {FC, memo} from 'react';\r\nimport style from './Post.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\nimport {initialUserAvatar} from \"../../../const\";\r\nimport like from './../../../assets/like.svg'\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: string | number\r\n    fullName: string\r\n    id: string\r\n    email: string\r\n    photo: string\r\n    deletePost: (id: string) => void\r\n    likePost: (id: string) => void\r\n    isLiked:boolean\r\n    dislikePost: (id: string) => void\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = memo(({\r\n                                                 message, likesCount, date, fullName,\r\n                                                 email, photo, id, deletePost,likePost,isLiked,dislikePost\r\n                                             }) => {\r\n\r\n\r\n\r\n        const srcForAvatar = photo || initialUserAvatar\r\n\r\n\r\n\r\n        const onDeleteLiClick = () => {\r\n            deletePost(id)\r\n        }\r\n\r\n        const onLikeIconClick=()=>{\r\n            if(isLiked)\r\n            dislikePost(id)\r\n            else likePost(id)\r\n        }\r\n\r\n        return (\r\n            <div className={style.postWrapper}>\r\n                <div className={style.myPosts}>\r\n                    <div className={style.leftBlock}>\r\n                        <NavLink to={PATH.PROFILE}>\r\n                            <img src={srcForAvatar} alt='avatar' className={style.avatar}/>\r\n                        </NavLink>\r\n\r\n                        <NavLink to={PATH.PROFILE} className={style.nameLink}>\r\n                            <h6 className={style.name}>{fullName}</h6>\r\n                            <small className={style.email}>{email}</small>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={style.dateSettingsBlock}>\r\n                        <p className={style.date}>{date}</p>\r\n                        <div className={style.settingsBtn} onClick={onDeleteLiClick}>\r\n                           {/* {isSettingsShow && <ul className={style.settingsBlock}\r\n                                                   onMouseLeave={onSettingsMouseLeave}>\r\n                                  <li onClick={onEditLiClick}>Edit Post</li>\r\n                                <li onClick={onDeleteLiClick}>Delete Post</li>\r\n                            </ul>\r\n                            }*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={style.postBlock}>\r\n                    <div className={style.postText}>\r\n                        {message}\r\n                    </div>\r\n                    <div className={style.likeBlock}>\r\n                        {likesCount}<img src={like} className={style.likeIcon} alt='like' onClick={onLikeIconClick}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {FC, memo} from 'react';\r\nimport {Post} from \"./Post/Post\";\r\nimport {useFormik} from \"formik\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {MyPostsPropsT} from \"./MyPostsContainer\";\r\nimport style from './MyPosts.module.scss'\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\n\r\n\r\nexport const MyPosts: FC<MyPostsPropsT> = memo(({\r\n                                                    postsData, addPost, profile, email, deletePost, likePost,\r\n                                                    dislikePost\r\n                                                }) => {\r\n\r\n    let postsElements = postsData.map(({message, likes, date, id, isLiked}) => <Post key={id} message={message}\r\n                                                                                     likesCount={likes}\r\n                                                                                     date={date}\r\n                                                                                     fullName={profile.fullName}\r\n                                                                                     email={email}\r\n                                                                                     photo={profile.photos.small}\r\n                                                                                     id={id} deletePost={deletePost}\r\n                                                                                     likePost={likePost}\r\n                                                                                     isLiked={isLiked}\r\n                                                                                     dislikePost={dislikePost}/>)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: EMPTY_STRING\r\n        },\r\n\r\n        onSubmit: values => {\r\n            addPost(values.newPost)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={style.myPostsContainer}>\r\n            {postsElements}\r\n            <form className={style.addPostForm} onSubmit={formik.handleSubmit}>\r\n                <SuperTextarea placeholder={'add post'} {...formik.getFieldProps('newPost')}\r\n                               className={style.fieldAddPost}/>\r\n                <SuperButton>Add post</SuperButton>\r\n            </form>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n\r\n","import { profileDataUserType} from \"../../redux/reducer/profile/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\nimport {addPost, deletePost, dislikePost, likePost, postsDataType} from \"../../redux/reducer/posts/posts-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    postsData: state.posts.postsData,\r\n    profile: state.ProfilePage.profile,\r\n    email: state.auth.data.email,\r\n\r\n})\r\ntype mapStateToPropsT = {\r\n    postsData: Array<postsDataType>\r\n    profile: profileDataUserType\r\n    email: string\r\n}\r\n\r\ntype mapDispatchToPropsT = {\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (id: string) => void\r\n    likePost: (id: string) => void\r\n    dislikePost : (id: string) =>void\r\n}\r\n\r\nexport type MyPostsPropsT = mapStateToPropsT & mapDispatchToPropsT\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {addPost, deletePost,likePost,dislikePost}))(MyPosts)","import {ChangeEvent, FC, KeyboardEvent, memo, useState} from \"react\";\r\nimport { EMPTY_STRING } from \"../../const\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport style from './EditableSpan.module.scss'\r\n\r\ntype EditableSpanT = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n    myStyle: string\r\n    isOwner:boolean\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanT> = memo(({title, updateTitle, myStyle, isOwner}) => {\r\n    \r\n    const [text, setText] = useState(title)\r\n    let [edit, setEdit] = useState(true)\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n\r\n    const activateInputMode = () => {\r\n        if (isOwner){\r\n        setEdit(false)}\r\n       \r\n    }\r\n\r\n    const activateSpanMode = () => {\r\n        setEdit(true)\r\n        updateTitle(text||'----')\r\n    }\r\n\r\n    const onActivateSpanKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            activateSpanMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        edit ?\r\n            <span onDoubleClick={activateInputMode} className={myStyle}>{title}</span>\r\n            : <SuperInputText value={text} onBlur={activateSpanMode} autoFocus onChange={onInputChange}\r\n                     onKeyPress={onActivateSpanKeyPress} className={style.input}/>\r\n    )\r\n})","import React, {ChangeEvent, FC, memo, MouseEvent, useState} from \"react\";\r\nimport style from \"./ProfileContact.module.scss\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\nimport SuperInputText from \"../../../../SuperInput/SuperInputText\";\r\nimport {updateProfileThunkT} from \"../../../../../redux/reducer/profile/thunk\";\r\n\r\n\r\ntype ProfileContactT = {\r\n    link: string\r\n    icon: IconProp\r\n    updateProfile: (updateContact: updateProfileThunkT) => void\r\n    isOwner: boolean\r\n    name: string\r\n}\r\n\r\nexport const ProfileContact: FC<ProfileContactT> = memo(({\r\n                                                             link, icon, updateProfile, isOwner,\r\n                                                             name\r\n                                                         }) => {\r\n\r\n        const [edit, setEdit] = useState(false)\r\n        const [linkURL, setLinkURL] = useState(link)\r\n\r\n\r\n        const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setLinkURL(e.currentTarget.value)\r\n        }\r\n\r\n        const onInputBlur = () => {\r\n            if (linkURL) {\r\n                updateProfile({[name]: linkURL})\r\n            }\r\n            setEdit(false)\r\n        }\r\n\r\n        const onLinkDblClick = (e: MouseEvent<HTMLAnchorElement>) => {\r\n            if (isOwner && !link) {\r\n                e.preventDefault()\r\n                setEdit(true)\r\n            }\r\n        }\r\n\r\n        const classNameForEmptyLink = !link && style.emptyLink\r\n\r\n        if (!link && !isOwner) {\r\n            return <></>\r\n        }\r\n        return (\r\n            <>\r\n                <a href={link}\r\n                   className={`${style.icon} ${classNameForEmptyLink}`} onClick={onLinkDblClick}\r\n                   target='_blank' >\r\n                    <FontAwesomeIcon icon={icon}/></a>\r\n                {edit && <SuperInputText value={linkURL} onChange={onInputChange} className={style.input}\r\n                                         autoFocus onBlur={onInputBlur}/>}\r\n            </>\r\n        )\r\n    }\r\n)","import React, {FC, memo} from \"react\";\r\nimport {initialUserAvatar} from \"../../../../../const\";\r\nimport style from \"../ProfileForm.module.scss\";\r\nimport {ItemsUsersResponseType} from \"../../../../../api/types\";\r\nimport {NavLink,  useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../../enums/PATH\";\r\nimport {itemsT} from \"../../../../../redux/reducer/users/user-reducer\";\r\n\r\n\r\ntype FriendsIconsT = {\r\n    followingUsers: Array<ItemsUsersResponseType>\r\n    totalUserCount:number\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n}\r\n\r\nexport const FriendsIcons: FC<FriendsIconsT> = memo(({followingUsers,totalUserCount,toggleItemsType}) => {\r\n\r\n    let history = useHistory();\r\n\r\n    const maxCountFollowingIcons = 5\r\n    const followingCount=totalUserCount\r\n\r\n    const onFriendBlockClick=()=>{\r\n        toggleItemsType('friends')\r\n        history.push(PATH.USERS)\r\n    }\r\n\r\n    return (\r\n        <div className={style.following}>\r\n            <div>\r\n                <p className={style.followingTitle}>{followingCount} Following</p>\r\n                <div onClick={onFriendBlockClick} className={style.followingIconsBlock}>\r\n                    {followingUsers.map((user, i) => {\r\n                            if (i < maxCountFollowingIcons)\r\n                                return <img key={i} src={user.photos.small || initialUserAvatar}\r\n                                            alt='following' className={style.followingPhoto}/>\r\n                            if (!user)\r\n                                return <NavLink to={PATH.USERS}>add following</NavLink>\r\n                        }\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, memo} from 'react'\r\nimport style from './SuperCheckBox.module.scss'\r\nimport {EMPTY_STRING} from \"../../const\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckBox: FC<SuperCheckboxPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange&&onChange(e)\r\n        onChangeChecked&&onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${style.checkbox} ${className ? className : EMPTY_STRING}`\r\n\r\n    return (\r\n        <label className={style.labelForCheckBox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={style.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n})\r\n\r\nexport default SuperCheckBox","import style from './Modal.module.scss'\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport React, {FC, memo} from \"react\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\nimport {updateProfileThunkT} from \"../../redux/reducer/profile/thunk\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport {shallowEqual} from \"react-redux\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\ntype ItemForFormT={\r\n    title?:string\r\n    type?:string\r\n    initialValue:Nullable<string|boolean>\r\n    initialValueTitle:string\r\n    icon?:IconProp\r\n}\r\n\r\ntype ModalPropsT = {\r\n\r\n    onSubmitBtnClick: (updateItem: updateProfileThunkT) => void\r\n    setIsModalShown: (value: boolean) => void\r\n    itemsForForm:ItemForFormT[]\r\n}\r\n\r\n\r\nexport const Modal: FC<ModalPropsT> = memo(({itemsForForm, onSubmitBtnClick, setIsModalShown}) => {\r\n\r\n\r\n    let objInitialValues = {}\r\n    for (let i = 0; i < itemsForForm.length; i++) {\r\n        let newVal = {[itemsForForm[i].initialValueTitle]: itemsForForm[i].initialValue}\r\n        objInitialValues = {...objInitialValues, ...newVal}\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: objInitialValues,\r\n\r\n        onSubmit: (values) => {\r\n            const hasChanged = !shallowEqual(formik.initialValues, values)\r\n            if(hasChanged){\r\n                onSubmitBtnClick(values)\r\n            }\r\n            setIsModalShown(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={style.modalContainer}>\r\n\r\n            <div className={style.modalBlock}>\r\n                <h2>Add information about yourself</h2>\r\n                <form onSubmit={formik.handleSubmit} className={style.form}>\r\n\r\n                    {itemsForForm.map((value, i) => {\r\n                        return <div key={i}>\r\n                            <p>{value.title||value.initialValueTitle}</p>\r\n                            {((value.type === 'input')||(!value.type)) &&\r\n                            <SuperInputText {...formik.getFieldProps(value.initialValueTitle)}\r\n                            placeholder={value.initialValueTitle}/>}\r\n                            {value.type === 'checkbox' &&\r\n                            <SuperCheckBox {...formik.getFieldProps(value.initialValueTitle)}/>}\r\n                            {value.type === 'textarea' &&\r\n                            <SuperTextarea {...formik.getFieldProps(value.initialValueTitle)}/>}\r\n                        </div>\r\n                    })}\r\n                    <SuperButton className={style.btnSave}>Save</SuperButton>\r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback, useState} from \"react\";\r\nimport {ContactsType} from \"../../../../redux/reducer/profile/profile-reducer\";\r\nimport style from './ProfileForm.module.scss'\r\nimport {faVk} from \"@fortawesome/free-brands-svg-icons/faVk\";\r\nimport {ProfileContact} from \"./ProfileContact/ProfileContact\";\r\nimport {faLinkedinIn} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons/faGithub\";\r\nimport {faYoutube} from \"@fortawesome/free-brands-svg-icons/faYoutube\";\r\nimport {faInstagram} from \"@fortawesome/free-brands-svg-icons/faInstagram\";\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons/faTwitter\";\r\nimport {faFacebook} from \"@fortawesome/free-brands-svg-icons/faFacebook\";\r\nimport {ItemsUsersResponseType} from \"../../../../api/types\";\r\nimport {FriendsIcons} from \"./FriendsIcons/FriendsIcons\";\r\nimport {itemsT} from \"../../../../redux/reducer/users/user-reducer\";\r\nimport {updateProfileThunkT} from \"../../../../redux/reducer/profile/thunk\";\r\nimport {faTelegramPlane} from \"@fortawesome/free-brands-svg-icons/faTelegramPlane\";\r\nimport {Modal} from \"../../../Modal/Modal\";\r\n\r\nexport type UpdateContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\ntype ProfileFormT = {\r\n    contacts: ContactsType\r\n    isOwner: boolean\r\n    aboutMe: string\r\n    updateProfile: (updateProfile: updateProfileThunkT) => void\r\n    followingUsers: Array<ItemsUsersResponseType>\r\n    totalUserCount: number\r\n    toggleItemsType: (itemsType: itemsT) => void\r\n}\r\n\r\nexport const ProfileForm: FC<ProfileFormT> = memo(({\r\n                                                       contacts, isOwner, aboutMe, updateProfile,\r\n                                                       followingUsers, totalUserCount, toggleItemsType\r\n                                                   }) => {\r\n\r\n    const [isContactEditFormShown, setIsContactEditFormShown] = useState(false)\r\n\r\n    const contactsArr = [\r\n        {initialValueTitle: 'vk', initialValue: contacts.vk, icon: faVk},\r\n        {initialValueTitle: 'facebook', initialValue: contacts.facebook, icon: faFacebook},\r\n        {initialValueTitle: 'twitter', initialValue: contacts.twitter, icon: faTwitter},\r\n        {initialValueTitle: 'instagram', initialValue: contacts.instagram, icon: faInstagram},\r\n        {initialValueTitle: 'youtube', initialValue: contacts.youtube, icon: faYoutube},\r\n        {initialValueTitle: 'github', initialValue: contacts.github, icon: faGithub},\r\n        {initialValueTitle: 'website', initialValue: contacts.website, icon: faLinkedinIn},\r\n        {initialValueTitle: 'mainLink', initialValue: contacts.mainLink, icon: faTelegramPlane},\r\n    ]\r\n\r\n\r\n    const handleIconUpdateLinkClick = useCallback((updateContact: updateProfileThunkT) => {\r\n        updateProfile({contacts: {...contacts, ...updateContact}})\r\n    }, [contacts, updateProfile])\r\n\r\n    const onActivateModalIconClick = () => {\r\n        setIsContactEditFormShown(true)\r\n    }\r\n\r\n    return (\r\n        <div className={style.userForm}>\r\n            <p className={style.aboutMe}>{aboutMe}</p>\r\n            <p className={style.contacts}>\r\n                {isContactEditFormShown ?\r\n                    <Modal itemsForForm={contactsArr}\r\n                           onSubmitBtnClick={handleIconUpdateLinkClick}\r\n                           setIsModalShown={setIsContactEditFormShown}/>\r\n                    : contactsArr.map((contact, i) =>\r\n                        <ProfileContact key={i} link={contact.initialValue} icon={contact.icon}\r\n                                        updateProfile={handleIconUpdateLinkClick} isOwner={isOwner}\r\n                                        name={contact.initialValueTitle}/>)}\r\n\r\n                {isOwner && <span className={style.btnEditLinks} onClick={onActivateModalIconClick}/>}\r\n            </p>\r\n\r\n            {isOwner && <FriendsIcons followingUsers={followingUsers}\r\n                                      totalUserCount={totalUserCount} toggleItemsType={toggleItemsType}/>}\r\n        </div>\r\n    )\r\n})","import style from \"./ProfileAvatar.module.scss\";\r\nimport {initialUserAvatar} from \"../../../../const\";\r\nimport React, {ChangeEvent, FC, memo, useRef} from \"react\";\r\n\r\ntype ProfileAvatarType = {\r\n    isOwner: boolean\r\n    photo:string\r\n    saveProfileAvatar: (newAvatar: File) => void\r\n}\r\n\r\nexport const ProfileAvatar: FC<ProfileAvatarType> = memo(({isOwner,photo,saveProfileAvatar}) => {\r\n\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onImgClick=()=>{\r\n        inRef && inRef.current && inRef.current.click()\r\n    }\r\n\r\n    const onInputChooseAvatarChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            saveProfileAvatar(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={isOwner ? style.imgWrappOwner : style.imgWrapp}\r\n           onClick={onImgClick}>\r\n            <img className={style.profilePhoto}\r\n                 src={photo || initialUserAvatar}\r\n                 alt={'profile avatar'}\r\n            />\r\n            {isOwner && <input type='file' onChange={onInputChooseAvatarChange}\r\n                               ref={inRef} style={{display: 'none'}}/>}\r\n        </p>\r\n    )\r\n})","import React, {FC, memo, useCallback, useState} from 'react';\r\nimport style from './ProfileInfo.module.scss'\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {ProfileForm} from \"./EditProfileForm/ProfileForm\";\r\nimport {ProfileInfoPropsType} from \"./ProfileInfoContainer\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport {ProfileAvatar} from \"./ProfileAvatar/ProfileAvatar\";\r\nimport {Modal} from \"../../Modal/Modal\";\r\n\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = memo(({\r\n                                                               profile, updateUserStatus, status, saveProfileAvatar,\r\n                                                               userIdAuth, updateProfile,\r\n                                                               totalUserCount, users, toggleItemsType\r\n                                                           }) => {\r\n\r\n    const [isModalShown, setIsModalShown] = useState(false)\r\n\r\n    const isOwner = userIdAuth === profile.userId;\r\n\r\n    const currentUser = users.find(user => user.id === profile.userId)\r\n\r\n    const valuesForUpdateProfile = [\r\n        {title: 'About me', type: 'textarea', initialValueTitle: 'aboutMe', initialValue: profile.aboutMe},\r\n        {title: 'Full name', type: 'input', initialValueTitle: 'fullName', initialValue: profile.fullName},\r\n        {\r\n            title: 'Looking for a job?',\r\n            type: 'checkbox',\r\n            initialValueTitle: 'lookingForAJob',\r\n            initialValue: profile.lookingForAJob\r\n        },\r\n        {\r\n            title: 'Describe your job',\r\n            type: 'input',\r\n            initialValueTitle: 'lookingForAJobDescription',\r\n            initialValue: profile.lookingForAJobDescription\r\n        },\r\n    ]\r\n\r\n    const handleEditableSpanClick = useCallback((newTitle: string) => {\r\n        if (newTitle !== profile.fullName) {\r\n            updateProfile({fullName: newTitle})\r\n        }\r\n    }, [profile.fullName, updateProfile])\r\n\r\n    const onEditProfileClick = () => {\r\n        setIsModalShown(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.profileInfoWrapper}>\r\n            {isModalShown && <Modal itemsForForm={valuesForUpdateProfile} onSubmitBtnClick={updateProfile}\r\n                                    setIsModalShown={setIsModalShown}/>}\r\n            <div className={style.headerBlock}>\r\n                <div className={style.flexCont}>\r\n                    <ProfileAvatar isOwner={isOwner} photo={profile.photos.small}\r\n                                   saveProfileAvatar={saveProfileAvatar}/>\r\n\r\n                    <div className={style.nameBlock}>\r\n                        <EditableSpan title={profile.fullName} updateTitle={handleEditableSpanClick}\r\n                                      myStyle={style.name} isOwner={isOwner}/>\r\n                        <EditableSpan title={status} updateTitle={updateUserStatus}\r\n                                      myStyle={style.status} isOwner={isOwner}/>\r\n                    </div>\r\n                </div>\r\n\r\n                {(!isOwner && currentUser) && <FollowUnfollowBtn item={currentUser}/>}\r\n\r\n                {isOwner && <div className={style.settingsBtn} onClick={onEditProfileClick}/>}\r\n\r\n            </div>\r\n            <ProfileForm contacts={profile.contacts} aboutMe={profile.aboutMe} isOwner={isOwner}\r\n                         updateProfile={updateProfile} followingUsers={users}\r\n                         totalUserCount={totalUserCount} toggleItemsType={toggleItemsType}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ProfileAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {ContactsType, setAvatar, setStatus, setUserProfile} from \"./profile-reducer\";\r\n\r\nexport const getUserProfile = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getUserProfileAPI(userId)\r\n        dispatch(setUserProfile(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const getUserStatus = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateStatus(status)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setStatus(status))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const saveProfileAvatar = (newAvatar: File) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateAvatar(newAvatar)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAvatar(data.data.photos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const updateProfile = (updateProfile: updateProfileThunkT): ThunkType =>\r\n    async (dispatch\r\n        , getState: () => stateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts\r\n        } = getState().ProfilePage.profile\r\n\r\n        let profileForUpdate = {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts, ...updateProfile\r\n        }\r\n        let data = await ProfileAPI.updateProfile(profileForUpdate)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getUserProfile(userId))\r\n        }\r\n    }\r\n\r\n\r\nexport type updateProfileThunkT = {\r\n    userId?: number\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n    contacts?: ContactsType\r\n    aboutMe?: string\r\n}","import {stateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    profileDataUserType,\r\n\r\n} from \"../../../redux/reducer/profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileInfo} from \"./ProfileInfo\";\r\nimport {itemsT, toggleItemsType} from \"../../../redux/reducer/users/user-reducer\";\r\nimport {\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    updateProfileThunkT,\r\n    updateUserStatus\r\n} from \"../../../redux/reducer/profile/thunk\";\r\n\r\nexport type ProfileInfoPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    profile: state.ProfilePage.profile,\r\n    userIdAuth: state.auth.data.id,\r\n    status: state.ProfilePage.status,\r\n    users: state.UsersPage.items,\r\n    totalUserCount: state.UsersPage.totalUserCount,\r\n})\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n    userIdAuth: Nullable<number>\r\n    users: Array<ItemsUsersResponseType>\r\n    totalUserCount: number\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateUserStatus: (status: string) => void\r\n    saveProfileAvatar: (newAvatar: File) => void\r\n    updateProfile: (updateProfile: updateProfileThunkT) => void\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {updateUserStatus,  saveProfileAvatar, updateProfile,toggleItemsType})(ProfileInfo);","import React, {FC, memo} from 'react';\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\nimport style from './Profile.module.scss'\r\nimport ProfileInfoContainer from '../MyPosts/ProfileInfo/ProfileInfoContainer';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {profileDataUserType} from \"../../redux/reducer/profile/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n\r\n    profile: profileDataUserType\r\n    userId:string\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsType> = memo(({ profile,userId}) => {\r\n\r\n    if (Object.keys(profile).length === 0) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <ProfileInfoContainer/>\r\n            { !userId && <MyPostsContainer/>}\r\n        </div>\r\n\r\n    )\r\n})","import React, {ComponentType, PureComponent} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    profileDataUserType,\r\n\r\n} from \"../../redux/reducer/profile/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {itemsT, toggleItemsType} from \"../../redux/reducer/users/user-reducer\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    updateUserStatus\r\n} from \"../../redux/reducer/profile/thunk\";\r\nimport {getUsersThunk} from \"../../redux/reducer/users/thunk\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends PureComponent<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>) {\r\n        if ((prevProps.match.params.userId !== this.props.match.params.userId) ||\r\n            (prevProps.isAuth !== this.props.isAuth)) {\r\n            this.refresh()\r\n        }\r\n    }\r\n\r\n    refresh = () => {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.isAuth && this.props.userIdAuth) {\r\n            userId = this.props.userIdAuth.toString()\r\n            this.props.toggleItemsType('friends')\r\n            this.props.getUsersThunk()\r\n        }\r\n        if (!userId && !this.props.isAuth) {\r\n            this.props.history.push(PATH.LOGIN)\r\n            return\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  profile={this.props.profile} userId={this.props.match.params.userId}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype ProfilePropsType = OwnProfilePropsType & RouteComponentProps<PathParamsType>\r\ntype OwnProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    userIdAuth: Nullable<number>\r\n    profile: profileDataUserType\r\n    isLoggedIn:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    getUsersThunk: () => void\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n\r\n}\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    userIdAuth: state.auth.data.id,\r\n    isAuth: state.auth.isAuth,\r\n    profile: state.ProfilePage.profile,\r\n    isLoggedIn:state.auth.isLoggedIn,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getUserStatus, updateUserStatus, saveProfileAvatar,\r\n        updateProfile, getUsersThunk,toggleItemsType\r\n    }),\r\n    withRouter)(ProfileContainer)\r\n\r\n\r\n","import {FormDataType} from \"../components/Login/Login\";\r\nimport {ERROR_MESSAGE} from \"../enums/ErrorMessages\";\r\n\r\nexport type FormikErrorType = {\r\n    message?: string\r\n    email?:string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?:string\r\n}\r\n\r\nconst minPasswordLength=8\r\nconst passwordRegex = /(?=.*[0-9])/\r\n\r\nexport const validateLoginForm = (values: FormDataType, errors: FormikErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = ERROR_MESSAGE.REQUIRED;\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n    }\r\n    if (!values.password) {\r\n        errors.password = ERROR_MESSAGE.REQUIRED;\r\n    } else if (values.password.length < minPasswordLength) {\r\n        errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n    } else if (!passwordRegex.test(values.password)) {\r\n        errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n    }\r\n}","import React, {FC, memo} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\nimport {useFormik} from \"formik\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {FormikErrorType, validateLoginForm} from \"../../utils/validators\";\r\nimport style from './Login.module.scss'\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginThunk: (loginData: loginAPIDataType) => void\r\n    isAuth: boolean\r\n    captchaUrl: string\r\n}\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nexport const Login: FC<LoginPropsType> = memo(({loginThunk, isAuth, captchaUrl}) => {\r\n\r\n        const formik = useFormik<FormDataType>({\r\n            initialValues: {\r\n                email: process.env.REACT_APP_EMAIL as string,\r\n                password: process.env.REACT_APP_PASSWORD as string,\r\n                rememberMe: false,\r\n                captcha: EMPTY_STRING,\r\n            },\r\n\r\n            validate: (values) => {\r\n                const errors: FormikErrorType = {};\r\n                validateLoginForm(values, errors)\r\n                return errors;\r\n            },\r\n\r\n            onSubmit: values => {\r\n                loginThunk(values)\r\n                formik.resetForm()\r\n            },\r\n        })\r\n\r\n    const fieldsWithValidation=[\r\n        {name:'email',touched:formik.touched.email,error:formik.errors.email,type:'text'},\r\n        {name:'password',touched:formik.touched.password,error:formik.errors.password,type:'password'},\r\n    ]\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n        return (\r\n            <div className={style.loginWrapper}>\r\n                <h2 className={style.title}>Login</h2>\r\n                <form onSubmit={formik.handleSubmit} className={style.form}>\r\n\r\n                    {fieldsWithValidation.map((field,i)=>{\r\n                        return <div key={i} className={style.relativeInputBlock}>\r\n                            <SuperInputText placeholder={field.name}\r\n                                            {...formik.getFieldProps(field.name)}\r\n                                            className={style.input}\r\n                                            type={field.type}/>\r\n                            {(field.touched && field.error) && <div\r\n                                className={style.error}>{field.error}</div>}\r\n                        </div>\r\n                    })}\r\n\r\n                    <SuperCheckBox type={'checkbox'} {...formik.getFieldProps('rememberMe')}\r\n                                   className={style.padding}>\r\n                        remember me\r\n                    </SuperCheckBox>\r\n\r\n                    {captchaUrl &&\r\n                    <div>\r\n                        <img src={captchaUrl} alt='captcha'/>\r\n                        <input placeholder='add captcha' {...formik.getFieldProps('captcha')}/>\r\n                    </div>}\r\n\r\n                    <SuperButton className={style.btnMargin}>Login</SuperButton>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType} from \"../redux/redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ResponseType} from \"../api/types\";\r\nimport {setAppStatusAC} from \"../redux/reducer/app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = <T>(data:ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    let textErr = data.messages.length > 0 ? data.messages[0] : 'some err'\r\n    dispatch(stopSubmit('login', {_error: textErr}))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<actionsType>","import {Dispatch} from \"redux\";\r\nimport {actionsType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {LoginAPI, securityAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {loginAPIDataType} from \"../../../api/types\";\r\nimport {handleServerNetworkError} from \"../../../utils/errorHandler\";\r\nimport {setAuthUserData, setCaptchaSuccess, toggleIsLoggedIn} from \"./auth-reducer\";\r\n\r\nexport const getAuthDataThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.getAuthUserData()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData(data.data, true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const loginThunk = (loginData: loginAPIDataType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let data = await LoginAPI.login(loginData)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getAuthDataThunk())\r\n            dispatch(toggleIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n        if (data.resultCode === RESULT_CODES.CAPTCHA) {\r\n            await dispatch(getCaptcha())\r\n        } else {\r\n            handleServerNetworkError(data, dispatch)\r\n        }\r\n    }\r\n\r\n\r\nexport const logoutThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.logout()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData({id: null, login: null, email: null}, false))\r\n            dispatch(toggleIsLoggedIn(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\nexport const getCaptcha = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await securityAPI()\r\n        dispatch(setCaptchaSuccess(data.url))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    }","import {connect} from \"react-redux\";\r\nimport {Login} from \"./Login\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\nimport {loginThunk} from \"../../redux/reducer/auth/thunk\";\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    loginThunk: (loginData: loginAPIDataType) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    userId: number | undefined\r\n    captchaUrl:string\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return({\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.ProfilePage.profile.userId,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    })\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>(mapStateToProps\r\n    , {loginThunk})(Login)","import {NavLink} from \"react-router-dom\";\r\nimport style from './ItemList.module.scss';\r\nimport {FC, memo} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\n\r\ntype ItemListT = {\r\n    path: string\r\n    title: string\r\n    icon: IconProp\r\n}\r\n\r\nexport const ItemList: FC<ItemListT> = memo(({path, title,icon}) => {\r\n\r\n   /* const onUsersItemClick=()=>{\r\n\r\n    }*/\r\n\r\n    return (\r\n        <li className={style.item}>\r\n            <NavLink activeClassName={style.active} to={path}>\r\n                <span className={style.icon}>\r\n                    <FontAwesomeIcon icon={icon}/></span>\r\n                <span>{title}</span>\r\n            </NavLink></li>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport style from './NavBar.module.scss'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {ItemList} from \"./ItemList/ItemList\";\r\nimport {faUser} from \"@fortawesome/free-regular-svg-icons/faUser\";\r\nimport {faEnvelope} from \"@fortawesome/free-regular-svg-icons/faEnvelope\";\r\nimport {faUsers} from \"@fortawesome/free-solid-svg-icons/faUsers\";\r\nimport {faRss} from \"@fortawesome/free-solid-svg-icons/faRss\";\r\nimport {faItunesNote} from \"@fortawesome/free-brands-svg-icons/faItunesNote\";\r\nimport {faCogs} from \"@fortawesome/free-solid-svg-icons/faCogs\";\r\nimport {faSignOutAlt} from \"@fortawesome/free-solid-svg-icons/faSignOutAlt\";\r\nimport {logoutThunk} from \"../../redux/reducer/auth/thunk\";\r\n\r\ntype NavBarPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst NavBar: FC<NavBarPropsType> = memo(({isAuth, logoutThunk}) => {\r\n\r\n\r\n    const listArray = [\r\n        {path: PATH.PROFILE, title: 'PROFILE', icon: faUser},\r\n        {path: PATH.DIALOGS, title: 'DIALOGS', icon: faEnvelope},\r\n        {path: PATH.USERS, title: 'USERS', icon: faUsers},\r\n       /*  {path: PATH.NEWS, title: 'NEWS', icon: faRss},\r\n        {path: PATH.MUSIC, title: 'MUSIC', icon: faItunesNote},\r\n        {path: PATH.SETTINGS, title: 'SETTINGS', icon: faCogs}, */\r\n    ]\r\n\r\n    const onLogoutSpanClick = () => {\r\n        logoutThunk()\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <nav className={style.navBar}>\r\n            <ul className={style.list}>\r\n                {listArray.map((item, i) => <ItemList key={i} path={item.path}\r\n                                                      title={item.title} icon={item.icon}/>)}\r\n                {isAuth && <li className={style.item}>\r\n                    <span className={style.span} onClick={onLogoutSpanClick}>\r\n                        <span className={style.icon}>\r\n                        <FontAwesomeIcon icon={faSignOutAlt}/></span>\r\n                         <span>LOGOUT</span>\r\n                    </span>\r\n                </li>}\r\n            </ul>\r\n        </nav>\r\n\r\n    )\r\n})\r\n\r\ntype mapStateToPropsType = {\r\n    authId: Nullable<number>\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logoutThunk: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    authId: state.auth.data.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {logoutThunk})(NavBar)","import React from \"react\";\r\n\r\nexport const NotFound = () => {\r\n    return (\r\n        <h1>404: PAGE NOT FOUND</h1>\r\n    )\r\n}","import React, {PureComponent} from 'react';\r\nimport './App.module.scss';\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport { RequestStatusType} from \"./redux/reducer/app/app-reducer\";\r\nimport Preloader from \"./common/preloader/Preloader\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport {PATH} from \"./enums/PATH\";\r\nimport {NotFound} from \"./components/NotFound/NotFound\";\r\nimport style from './App.module.scss'\r\nimport {Initialize} from \"./redux/reducer/app/thunk\";\r\n\r\n\r\ntype AppPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass App extends PureComponent<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.Initialize()\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.isInitialization) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={style.appContainer}>\r\n                <div className={style.appWrapperAuth}>\r\n                    <NavBar />\r\n                    <div className={style.appWrapperContent}>\r\n                        {this.props.RequestStatus === 'loading' && <Preloader/>}\r\n                        <Switch>\r\n                            <Route exact path={PATH.START}\r\n                                   render={() => <ProfileContainer/>}/>\r\n                            <Route path={PATH.PROFILE + '/:userId?'}\r\n                                   render={() => <ProfileContainer/>}/>\r\n                            <Route path={PATH.DIALOGS} render={() => <DialogsContainer/>}/>\r\n                            {/* <Route path={PATH.NEWS} render={() => <News/>}/> */}\r\n                            <Route path={PATH.USERS} render={() => <UsersContainer/>}/>\r\n                          {/*   <Route path={PATH.MUSIC} render={() => <Music/>}/>\r\n                            <Route path={PATH.SETTINGS} render={() => <Settings/>}/> */}\r\n                            <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                            <Route path={PATH.NOT_FOUND} render={() => <NotFound/>}/>\r\n                            <Redirect from={'*'} to={PATH.NOT_FOUND}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return ({\r\n        isInitialization: state.app.isInitialization,\r\n        RequestStatus: state.app.RequestStatus,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\ntype mapStateToPropsType = {\r\n    isInitialization: boolean\r\n    RequestStatus: RequestStatusType\r\n    isAuth: boolean\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    Initialize:()=>void\r\n\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {Initialize})(App);\r\n","import {ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC, setInitialization} from \"./app-reducer\";\r\nimport {getAuthDataThunk} from \"../auth/thunk\";\r\n\r\nexport const Initialize = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await dispatch(getAuthDataThunk())\r\n        dispatch(setInitialization())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"Users_userContainer__hu8kj\",\"navBar\":\"Users_navBar__1I9oa\",\"activeLink\":\"Users_activeLink__deytZ\",\"usersBlock\":\"Users_usersBlock__iZSK1\",\"titleWithSearchInput\":\"Users_titleWithSearchInput__1cJOr\",\"usersBlockTitle\":\"Users_usersBlockTitle__3RMme\",\"inputSearch\":\"Users_inputSearch__1C4KB\",\"users\":\"Users_users__yEdDF\",\"disabled\":\"Users_disabled__p5a35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userForm\":\"ProfileForm_userForm__2XxLY\",\"aboutMe\":\"ProfileForm_aboutMe__1cFWw\",\"contacts\":\"ProfileForm_contacts__M5zqq\",\"btnEditLinks\":\"ProfileForm_btnEditLinks__2N8A7\",\"following\":\"ProfileForm_following__auTiw\",\"followingTitle\":\"ProfileForm_followingTitle__2ThxC\",\"followingIconsBlock\":\"ProfileForm_followingIconsBlock__3Dgno\",\"followingPhoto\":\"ProfileForm_followingPhoto__2s353\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1Amt2\",\"title\":\"Login_title__3Mb8N\",\"form\":\"Login_form__1sfOd\",\"relativeInputBlock\":\"Login_relativeInputBlock__2ukZj\",\"input\":\"Login_input__2a9-e\",\"error\":\"Login_error__GVoOQ\",\"btnMargin\":\"Login_btnMargin__1IgXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1RFQS\",\"dialogsItems\":\"Dialogs_dialogsItems__3ipYY\",\"messagesBlock\":\"Dialogs_messagesBlock__1jX58\",\"messages\":\"Dialogs_messages__1RbFL\",\"dialog\":\"Dialogs_dialog__1iTfT\",\"active\":\"Dialogs_active__27Ksu\",\"addMessageWrapper\":\"Dialogs_addMessageWrapper__ywZPw\",\"form\":\"Dialogs_form__3mzrN\",\"textarea\":\"Dialogs_textarea__10uyc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__2jo_w\",\"headerBlock\":\"ProfileInfo_headerBlock__DCjFd\",\"flexCont\":\"ProfileInfo_flexCont__1eCI_\",\"nameBlock\":\"ProfileInfo_nameBlock__3rLED\",\"name\":\"ProfileInfo_name__1lRlx\",\"status\":\"ProfileInfo_status__KYg5E\",\"settingsBtn\":\"ProfileInfo_settingsBtn__325Su\",\"userForm\":\"ProfileInfo_userForm__1YStq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBlock\":\"User_userBlock__1Y_Af\",\"userPhoto\":\"User_userPhoto__3ZUbA\",\"userName\":\"User_userName__1WLaC\",\"userStatus\":\"User_userStatus__pKXgk\",\"followBtn\":\"User_followBtn__1UzCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__1igcF\",\"list\":\"NavBar_list__1kK4M\",\"span\":\"NavBar_span__1KRGP\",\"icon\":\"NavBar_icon__3Ramj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__27tgw\",\"appWrapperAuth\":\"App_appWrapperAuth__1FLT7\",\"appWrapperContent\":\"App_appWrapperContent__3tMTP\",\"appWrapper\":\"App_appWrapper__1kRkO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"Modal_modalContainer__B4Nq2\",\"modalBlock\":\"Modal_modalBlock__bRKdh\",\"form\":\"Modal_form__3bnoF\",\"btnSave\":\"Modal_btnSave__2mjDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Paginator_currentPage__h8BNM\",\"pageNum\":\"Paginator_pageNum__dAqj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1AbLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__2qSuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogItem_dialogsWrapper__3G7Up\",\"dialog\":\"DialogItem_dialog__1ztLz\",\"active\":\"DialogItem_active__3-JxF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsContainer\":\"MyPosts_myPostsContainer__3JieQ\",\"addPostForm\":\"MyPosts_addPostForm__1KsW_\",\"fieldAddPost\":\"MyPosts_fieldAddPost__2PkLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"ProfileContact_icon__1JBoZ\",\"emptyLink\":\"ProfileContact_emptyLink__1dg6W\",\"input\":\"ProfileContact_input__2qBSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckBox_checkbox__N_fxl\",\"labelForCheckBox\":\"SuperCheckBox_labelForCheckBox__i47Ap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgWrappOwner\":\"ProfileAvatar_imgWrappOwner__3IAA0\",\"profilePhoto\":\"ProfileAvatar_profilePhoto__3-rua\",\"imgWrapp\":\"ProfileAvatar_imgWrapp__EW05a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ItemList_item__3MKIo\",\"active\":\"ItemList_active__nausF\",\"icon\":\"ItemList_icon__1MKGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgPreload\":\"Preloader_imgPreload__tTJUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"SuperTextarea_textarea__27Poy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__1exWh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__1fSKU\"};"],"sourceRoot":""}