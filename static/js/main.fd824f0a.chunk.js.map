{"version":3,"sources":["components/MyPosts/Post/Post.module.scss","utils/handles.ts","const/index.ts","redux/reducer/dialogs/dialog-reducer.tsx","redux/reducer/profile/profile-reducer.tsx","redux/reducer/users/user-reducer.ts","redux/reducer/auth/auth-reducer.ts","redux/reducer/app/app-reducer.ts","redux/reducer/posts/posts-reducer.ts","redux/redux-store.tsx","enums/PATH.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/SuperButton/SuperButton.tsx","common/paginator/Paginator.tsx","assets/oval.svg","common/preloader/Preloader.tsx","enums/ResultCode.ts","api/apiConfig/index.ts","api/api.ts","redux/reducer/users/thunk.ts","components/FollowUnfollowBtn/FollowUnfollowBtn.tsx","components/Users/User/User.tsx","components/SuperInput/SuperInputText.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withRedirect.tsx","components/Dialogs/DialogsContainer.tsx","enums/ErrorMessages.ts","assets/like.svg","components/MyPosts/Post/Post.tsx","components/SuperTextarea/SuperTextarea.tsx","components/MyPosts/MyPosts.tsx","components/MyPosts/MyPostsContainer.tsx","components/EditableSpan/EditableSpan.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.tsx","components/MyPosts/ProfileInfo/EditProfileForm/FriendsIcons/FriendsIcons.tsx","components/SuperCheckBox/SuperCheckBox.tsx","components/Modal/Modal.tsx","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.tsx","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/reducer/profile/thunk.ts","components/MyPosts/ProfileInfo/ProfileInfoContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","utils/validators.ts","components/Login/Login.tsx","utils/errorHandler.ts","redux/reducer/auth/thunk.ts","components/Login/LoginContainer.tsx","components/NavBar/ItemList/ItemList.tsx","components/NavBar/NavBar.tsx","components/NotFound/NotFound.tsx","App.tsx","redux/reducer/app/thunk.ts","index.tsx","components/Users/Users.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileForm.module.scss","components/Login/Login.module.scss","components/MyPosts/ProfileInfo/ProfileInfo.module.scss","components/Users/User/User.module.scss","components/NavBar/NavBar.module.scss","App.module.scss","components/Dialogs/Dialogs.module.css","components/Modal/Modal.module.scss","common/paginator/Paginator.module.css","components/SuperButton/SuperButton.module.scss","components/SuperInput/SuperInputText.module.scss","components/MyPosts/MyPosts.module.scss","components/MyPosts/ProfileInfo/EditProfileForm/ProfileContact/ProfileContact.module.scss","components/SuperCheckBox/SuperCheckBox.module.scss","components/MyPosts/ProfileInfo/ProfileAvatar/ProfileAvatar.module.scss","components/NavBar/ItemList/ItemList.module.scss","components/Dialogs/Dialog/Dialog.module.css","common/preloader/Preloader.module.scss","components/SuperTextarea/SuperTextarea.module.scss","components/Profile/Profile.module.scss","components/EditableSpan/EditableSpan.module.scss"],"names":["module","exports","conversionDate","date","length","EMPTY_STRING","initialUserAvatar","currentMonth","Date","getMonth","toString","currentDay","getDate","currentDate","getFullYear","initialState","dialogsData","id","v1","user","messageData","textMessage","dialogReducer","state","action","type","newMessage","messageText","newMessageText","profile","status","setStatus","payload","profileReducer","photos","items","pageSize","totalUserCount","currentPage","isFetching","followingInProgress","itemsType","term","followUser","unFollowUser","toggleIsFetching","toggleFollowProgress","isFollowInProgress","userId","toggleItemsType","userReducer","map","m","followed","filter","f","data","email","login","isAuth","captchaUrl","setAuthUserData","authReducer","isInitialization","RequestStatus","setAppStatusAC","appReducer","postsData","message","likes","isLiked","postsReducer","deletedPost","post","newPost","postText","rootReducer","combineReducers","DialogsPage","ProfilePage","UsersPage","auth","app","posts","store","createStore","composeWithDevTools","applyMiddleware","ThunkMiddleware","window","PATH","News","props","Music","Settings","SuperButton","memo","red","className","restProps","finalClassName","style","btn","default","Paginator","onChangePageClick","portionSize","useState","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","conditionForShowPrevButton","conditionForShowNextButton","styles","paginator","onClick","page","pageNum","scrollTo","Preloader","src","preload","alt","imgPreload","RESULT_CODES","instance","axios","create","baseURL","withCredentials","headers","UsersAPI","getUsersQueryParams","get","params","then","response","delete","ProfileAPI","put","photoFile","formData","FormData","append","updateProfile","LoginAPI","loginData","password","rememberMe","captcha","getUsersThunk","dispatch","getState","a","paramsForQuery","count","friend","totalCount","FollowUnfollowBtn","item","unfollowThunk","followThunk","conditionForDisabledButton","some","disabled","connect","ownProps","resultCode","SUCCESS","User","to","PROFILE","userBlock","small","userPhoto","userName","name","userStatus","followBtn","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","error","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","Users","changePage","setTerm","searchValue","setSearchValue","titleText","itemsArr","callback","styleName","activeLink","link","useEffect","idOfTimeout","setTimeout","clearTimeout","handleChangePageClick","useCallback","userContainer","navBar","usersBlock","titleWithSearchInput","usersBlockTitle","trim","inputSearch","users","compose","UsersContainer","this","Component","withRouter","DialogItem","number","DIALOGS","s","dialog","activeClassName","active","MessageItem","Dialogs","dialogs","messages","addMessage","dialogsElements","messagesElements","formik","useFormik","initialValues","onSubmit","values","resetForm","dialogsItems","addMessageWrapper","handleSubmit","placeholder","getFieldProps","mapStateToProps","ERROR_MESSAGE","LOGIN","Post","likesCount","fullName","photo","deletePost","likePost","dislikePost","srcForAvatar","postWrapper","myPosts","leftBlock","avatar","nameLink","dateSettingsBlock","settingsBtn","postBlock","likeBlock","like","likeIcon","SuperTextarea","finalTextareaClassName","textarea","MyPosts","addPost","postsElements","myPostsContainer","addPostForm","fieldAddPost","EditableSpan","title","updateTitle","myStyle","text","setText","edit","setEdit","activateSpanMode","onDoubleClick","onBlur","autoFocus","code","ProfileContact","icon","isOwner","linkURL","setLinkURL","classNameForEmptyLink","emptyLink","href","preventDefault","target","FriendsIcons","followingUsers","history","useHistory","followingCount","following","followingTitle","USERS","followingIconsBlock","followingPhoto","SuperCheckBox","onChangeChecked","children","spanClassName","checkbox","labelForCheckBox","checked","Modal","itemsForForm","onSubmitBtnClick","setIsModalShown","objInitialValues","newVal","initialValueTitle","initialValue","shallowEqual","modalContainer","modalBlock","form","btnSave","ProfileForm","contacts","aboutMe","isContactEditFormShown","setIsContactEditFormShown","contactsArr","vk","faVk","facebook","faFacebook","twitter","faTwitter","instagram","faInstagram","youtube","faYoutube","github","faGithub","website","faLinkedinIn","mainLink","faTelegramPlane","handleIconUpdateLinkClick","updateContact","userForm","contact","btnEditLinks","ProfileAvatar","saveProfileAvatar","inRef","useRef","imgWrappOwner","imgWrapp","current","click","profilePhoto","files","ref","display","ProfileInfo","updateUserStatus","userIdAuth","isModalShown","currentUser","find","valuesForUpdateProfile","lookingForAJob","lookingForAJobDescription","handleEditableSpanClick","newTitle","profileInfoWrapper","headerBlock","flexCont","nameBlock","getUserProfile","newAvatar","profileForUpdate","Profile","Object","keys","profileWrapper","ProfileInfoContainer","MyPostsContainer","ProfileContainer","refresh","match","getUserStatus","prevProps","prevState","PureComponent","passwordRegex","Login","loginThunk","process","validate","errors","test","INVALID_EMAIL","REQUIRED","SHORT_PASSWORD","NEED_NUMBER","validateLoginForm","fieldsWithValidation","touched","loginWrapper","field","relativeInputBlock","padding","btnMargin","handleServerNetworkError","textErr","stopSubmit","_error","getAuthDataThunk","getCaptcha","url","CAPTCHA","ItemList","path","NavBar","logoutThunk","listArray","faUser","faEnvelope","faUsers","NEWS","faRss","MUSIC","faItunesNote","SETTINGS","faCogs","list","span","faSignOutAlt","authId","NotFound","App","Initialize","appContainer","appWrapperAuth","appWrapperContent","exact","START","render","DialogsContainer","LoginContainer","NOT_FOUND","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fd824f0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postWrapper\":\"Post_postWrapper__1qeko\",\"myPosts\":\"Post_myPosts__pdi8b\",\"leftBlock\":\"Post_leftBlock__3-9I4\",\"avatar\":\"Post_avatar__1kmR8\",\"nameLink\":\"Post_nameLink__29vRT\",\"name\":\"Post_name__3cikN\",\"email\":\"Post_email__uN3GX\",\"dateSettingsBlock\":\"Post_dateSettingsBlock__DK4N0\",\"date\":\"Post_date__NFiKN\",\"settingsBtn\":\"Post_settingsBtn__fBdCg\",\"settingsBlock\":\"Post_settingsBlock__38sIN\",\"postBlock\":\"Post_postBlock__2prnk\",\"postText\":\"Post_postText__1uukU\",\"likeBlock\":\"Post_likeBlock__GD00y\",\"likeIcon\":\"Post_likeIcon__kdW-Z\"};","export const conversionDate = (date: string) => {\r\n    if (date.length === 1) {\r\n       return `0${date}`\r\n    }\r\n    return date\r\n}","import {conversionDate} from \"../utils/handles\";\r\n\r\nexport const EMPTY_STRING = '';\r\n\r\nexport const PAGE_SIZE = 10;\r\n\r\nexport const initialUserAvatar = 'http://pm1.narvii.com/7812/ed9961348bc94cd31227151dd9aa1f918c40cff5r1-869-968v2_uhq.jpg';\r\n\r\nexport const currentMonth = conversionDate((new Date().getMonth() + 1).toString())\r\nexport const currentDay = conversionDate((new Date().getDate()).toString())\r\n\r\nexport const currentDate = `${currentDay}.${currentMonth}.${new Date().getFullYear()}`","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    dialogsData: [{id: v1(), user: 'Nastya'},\r\n        {id: v1(), user: 'Dima'},\r\n        {id: v1(), user: 'Victor'}],\r\n    messageData: [{id: v1(), textMessage: 'yo'},\r\n        {id: v1(), textMessage: 'konichiwa'}],\r\n}\r\n\r\nexport type dialogsDataType = {\r\n    id: string\r\n    user: string\r\n}\r\nexport type messageDataType = {\r\n    id: string\r\n    textMessage: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogsData: Array<dialogsDataType>\r\n    messageData: Array<messageDataType>\r\n\r\n\r\n}\r\n\r\nconst dialogReducer = (state: DialogsPageType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-MESSAGE':\r\n            let newMessage: messageDataType = {id: v1(), textMessage: action.messageText}\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newMessage],\r\n                newMessageText: EMPTY_STRING\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (messageText: string) => ({\r\n    type: 'DIALOGS/ADD-MESSAGE',\r\n    messageText: messageText\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogReducer","import {actionsType} from \"../../redux-store\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    profile: {} as profileDataUserType,\r\n    status: EMPTY_STRING,\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n}\r\n\r\nexport type profileDataUserType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-STATUS\":\r\n        case \"PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case 'PROFILE/SET_PHOTOS':\r\n            return {\r\n                ...state, profile: {...state.profile, photos: {...action.payload}}\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserProfile = (profile: profileDataUserType) => ({\r\n    type: 'PROFILE/SET-USER-PROFILE',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setStatus = (status: string) => ({\r\n    type: 'PROFILE/SET-STATUS',\r\n    payload: {status},\r\n}) as const\r\n\r\nexport const setAvatar = (photos: PhotosType) => ({\r\n        type: 'PROFILE/SET_PHOTOS',\r\n        payload: photos\r\n    }\r\n) as const\r\n\r\n\r\nexport default profileReducer","import {actionsType} from \"../../redux-store\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {PAGE_SIZE} from \"../../../const\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\n\r\nexport type itemsT = 'users' | 'friends' | null\r\n\r\nlet initialState = {\r\n    items: [ ],\r\n    pageSize: PAGE_SIZE,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    itemsType: 'friends' as itemsT,\r\n    term: null\r\n};\r\nexport type UsersPageType = {\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n    itemsType: itemsT\r\n    term: Nullable<string>\r\n}\r\n\r\n\r\nexport const userReducer = (state: UsersPageType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"USER/FOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: true} : m)\r\n            }\r\n        case \"USER/UNFOLLOW-USER\":\r\n            return {\r\n                ...state,\r\n                items: state.items.map(m => m.id === action.id ? {...m, followed: false} : m)\r\n            }     //и тут\r\n        case \"USER/SET-USERS\":\r\n        case \"USER/CHANGE-PAGE\":\r\n        case \"USER/SET-TOTAL-USER-COUNT\":\r\n        case \"USER/TOGGLE-IS-FETCHING\":\r\n        case 'USER/TOGGLE-ITEMS-TYPE':\r\n        case 'USER/SET-TERM':\r\n            return {\r\n                ...state, ...action.payload\r\n            }\r\n        case \"USER/TOGGLE-FOLLOW-PROGRESS\":\r\n            return action.isFollowInProgress ? {\r\n                ...state, followingInProgress: [...state.followingInProgress, action.userId]\r\n            } : {...state, followingInProgress: state.followingInProgress.filter(f => f !== action.userId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followUser = (id: number) => ({\r\n    type: 'USER/FOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const unFollowUser = (id: number) => ({\r\n    type: 'USER/UNFOLLOW-USER',\r\n    id,\r\n}) as const\r\n\r\nexport const setUsers = (items: Array<ItemsUsersResponseType>) => ({\r\n    type: 'USER/SET-USERS',\r\n    payload: {items},\r\n} as const)\r\n\r\nexport const changePage = (currentPage: number) => ({\r\n        type: 'USER/CHANGE-PAGE',\r\n        payload: {currentPage},\r\n    } as const\r\n)\r\n\r\nexport const setTotalUsersCount = (totalUserCount: number) => ({\r\n        type: 'USER/SET-TOTAL-USER-COUNT',\r\n        payload: {totalUserCount},\r\n    } as const\r\n)\r\n\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n        type: 'USER/TOGGLE-IS-FETCHING',\r\n        payload: {isFetching},\r\n    }\r\n) as const\r\n\r\nexport const toggleFollowProgress = (isFollowInProgress: boolean, userId: number) => ({\r\n        type: 'USER/TOGGLE-FOLLOW-PROGRESS',\r\n        isFollowInProgress,\r\n        userId,\r\n    }\r\n) as const\r\n\r\nexport const toggleItemsType = (itemsType: itemsT) => ({\r\n        type: 'USER/TOGGLE-ITEMS-TYPE',\r\n        payload: {itemsType}\r\n    }\r\n) as const\r\n\r\nexport const setTerm = (term: Nullable<string>) => ({\r\n        type: 'USER/SET-TERM',\r\n        payload: {term}\r\n    }\r\n) as const\r\n\r\n\r\nexport default userReducer","import {actionsType} from \"../../redux-store\";\r\nimport {profileDataUserType} from \"../profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {EMPTY_STRING} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    data: {\r\n        email: EMPTY_STRING,\r\n        id: null,\r\n        login: EMPTY_STRING,\r\n    },\r\n    isAuth: false,\r\n    profile: null,\r\n    captchaUrl: EMPTY_STRING,\r\n};\r\n\r\nexport type authType = {\r\n    data: authDataType\r\n    isAuth: boolean\r\n    profile: Nullable<profileDataUserType>\r\n    captchaUrl: string\r\n}\r\n\r\nexport type authDataType = {\r\n    id: Nullable<number>\r\n    login: Nullable<string>\r\n    email: Nullable<string>\r\n}\r\n\r\nexport const authReducer = (state: authType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA':\r\n            return {\r\n                ...state,\r\n                data: {...action.data}, isAuth: action.isAuth\r\n            }\r\n        case 'AUTH/TOGGLE-IS-LOGGED-IN':\r\n\r\n            return {...state, ...action.payload}\r\n        case 'AUTH/SET-MY-PROFILE-DATA':\r\n        case 'AUTH/SET-CAPTCHA':\r\n\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (data: authDataType, isAuth: boolean) => {\r\n    return({\r\n        type: 'AUTH/SET-AUTH-USER-DATA',\r\n        data,\r\n        isAuth,\r\n    }) as const\r\n}\r\n\r\nexport const setMyProfileData = (profile: profileDataUserType) => ({\r\n    type: 'AUTH/SET-MY-PROFILE-DATA',\r\n    payload: {profile},\r\n}) as const\r\n\r\nexport const setCaptchaSuccess = (captchaUrl: string) => ({\r\n    type: 'AUTH/SET-CAPTCHA',\r\n    payload: {captchaUrl},\r\n}) as const\r\n\r\nexport const toggleIsLoggedIn = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/TOGGLE-IS-LOGGED-IN',\r\n    payload: {isLoggedIn},\r\n}) as const\r\n\r\n\r\nexport default authReducer","import {actionsType} from \"../../redux-store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nlet initialState = {\r\n    isInitialization: false,\r\n    RequestStatus: 'idle' as RequestStatusType\r\n};\r\n\r\ntype initialStateAppType = {\r\n    isInitialization: boolean\r\n    RequestStatus: RequestStatusType\r\n}\r\n\r\nexport const appReducer = (state: initialStateAppType = initialState, action: actionsType) => {\r\n\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZATION':\r\n            return {\r\n                ...state,\r\n                isInitialization: true\r\n            }\r\n        case 'APP/SET-STATUS':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitialization = () => ({\r\n    type: 'APP/SET-INITIALIZATION',\r\n}) as const\r\n\r\nexport const setAppStatusAC = (RequestStatus: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    payload: {\r\n        RequestStatus,\r\n    }\r\n} as const)\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer","import {v1} from \"uuid\";\r\nimport {actionsType} from \"../../redux-store\";\r\nimport {currentDate} from \"../../../const\";\r\n\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'it is my first post', likes: 30, date: '18.12.2020',isLiked:false},\r\n        {id: v1(), message: 'it-kamasutra', likes: 10, date: '20.02.2021',isLiked:false}],\r\n\r\n} as PostsType\r\nexport type postsDataType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n    date: string | number\r\n    isLiked:boolean\r\n}\r\n\r\nexport type PostsType = {\r\n    postsData: Array<postsDataType>\r\n\r\n}\r\n\r\n\r\nexport const postsReducer = (state: PostsType = initialState, action: actionsType) => {\r\n    switch (action.type) {\r\n        case 'POSTS/DELETE-POST':\r\n            let deletedPost = state.postsData.filter(post => post.id !== action.id)\r\n            return {...state, postsData: deletedPost}\r\n\r\n        case 'POSTS/LIKE-POST':\r\n            return {...state,postsData:state.postsData.map(post=>\r\n                    post.id===action.id?{...post,likes:post.likes+1,isLiked:true}:post)}\r\n\r\n        case 'POSTS/DISLIKE-POST':\r\n            return {...state,postsData:state.postsData.map(post=>\r\n                    post.id===action.id?{...post,likes:post.likes-1,isLiked:false}:post)}\r\n\r\n        case 'POSTS/ADD-POST':\r\n            let newPost: postsDataType = {id: v1(), message: action.postText, likes: 0,\r\n                date: currentDate,isLiked:false}\r\n\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (postText: string) => ({\r\n    type: 'POSTS/ADD-POST',\r\n    postText: postText\r\n}) as const\r\n\r\nexport const deletePost = (id: string) => ({\r\n    type: 'POSTS/DELETE-POST',\r\n    id\r\n}) as const\r\n\r\nexport const likePost = (id: string) => ({\r\n    type: 'POSTS/LIKE-POST',\r\n    id\r\n}) as const\r\n\r\nexport const dislikePost = (id: string) => ({\r\n    type: 'POSTS/DISLIKE-POST',\r\n    id\r\n}) as const\r\n\r\n\r\n\r\n\r\n\r\nexport default postsReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogReducer, {addMessage} from \"./reducer/dialogs/dialog-reducer\";\r\nimport profileReducer, {\r\n\r\n    setAvatar,\r\n    setStatus,\r\n    setUserProfile\r\n} from \"./reducer/profile/profile-reducer\";\r\nimport userReducer, {\r\n    changePage,\r\n    followUser, setTerm,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowProgress,\r\n    toggleIsFetching, toggleItemsType,\r\n    unFollowUser\r\n} from \"./reducer/users/user-reducer\";\r\nimport authReducer, {\r\n    setCaptchaSuccess,\r\n    setAuthUserData,\r\n    setMyProfileData,\r\n    toggleIsLoggedIn\r\n} from \"./reducer/auth/auth-reducer\";\r\nimport ThunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport appReducer, {setAppStatusAC, setInitialization} from \"./reducer/app/app-reducer\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport postsReducer, {addPost, deletePost, dislikePost, likePost} from \"./reducer/posts/posts-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    DialogsPage: dialogReducer,\r\n    ProfilePage: profileReducer,\r\n    UsersPage: userReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    posts:postsReducer,\r\n})\r\n\r\nexport type stateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(ThunkMiddleware)))\r\n\r\nexport type actionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof addMessage>\r\n    | ReturnType<typeof followUser>\r\n    | ReturnType<typeof unFollowUser>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof changePage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowProgress>\r\n    | ReturnType<typeof setMyProfileData>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof setInitialization>\r\n    | ReturnType<typeof setAvatar>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setCaptchaSuccess>\r\n    | ReturnType<typeof toggleIsLoggedIn>\r\n    | ReturnType<typeof toggleItemsType>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof likePost>\r\n    | ReturnType<typeof dislikePost>\r\n    | ReturnType<typeof setTerm>\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, stateType, unknown, actionsType>\r\n\r\n/*\r\nexport type storeType = {\r\n    _state: stateType\r\n    subscribe: (observer: () => void) => void\r\n    _callSubscriber: () => void\r\n    getState: () => stateType\r\n    dispatch: (action: actionsType) => void\r\n}*/\r\n\r\n// @ts-ignore\r\nwindow.store = store","export enum PATH {\r\n    START = '/',\r\n    LOGIN = '/login',\r\n    DIALOGS = '/dialogs',\r\n    PROFILE = '/profile',\r\n    USERS = '/users',\r\n    NEWS = '/news',\r\n    MUSIC = '/music',\r\n    SETTINGS = '/settings',\r\n    NOT_FOUND='/404',\r\n    FRIENDS='/friends'\r\n}","import s from \"./News.module.css\"\r\nimport React from \"react\";\r\ntype NewsPropsType={\r\n\r\n}\r\n\r\n\r\nexport const News = (props:NewsPropsType)=>{\r\n    return(\r\n        <div>news</div>\r\n    )\r\n}","import React from \"react\";\r\ntype MusicPropsType={\r\n\r\n}\r\n\r\n\r\nexport const Music = (props:MusicPropsType)=>{\r\n\r\n    return(\r\n        <div>music</div>\r\n    )\r\n}","import s from \"./Settings.module.css\"\r\nimport React from \"react\";\r\ntype SettingsPropsType={\r\n\r\n}\r\n\r\n\r\nexport const Settings = (props:SettingsPropsType)=>{\r\n    return(\r\n        <div>settings</div>\r\n    )\r\n}","import {ButtonHTMLAttributes, DetailedHTMLProps, FC, memo} from 'react'\r\nimport style from './SuperButton.module.scss'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: FC<SuperButtonPropsType> = memo((\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${style.btn} ${red ? style.red : style.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n})\r\n\r\nexport default SuperButton","import React, {FC, memo, useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\nimport SuperButton from \"../../components/SuperButton/SuperButton\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    onChangePageClick: (currentPage: number) => void\r\n    portionSize: number\r\n    currentPage:number\r\n}\r\n\r\nconst Paginator: FC<PaginatorPropsType> = memo(({\r\n                                                    totalUserCount, pageSize,\r\n                                                    onChangePageClick, portionSize,currentPage\r\n                                                }) => {\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const conditionForShowPrevButton = portionNumber > 1;\r\n    const conditionForShowNextButton = portionCount > portionNumber\r\n\r\n    const onPrevButtonClick = () => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }\r\n\r\n    const onNextButtonClick = () => {\r\n        setPortionNumber(portionNumber + 1)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {conditionForShowPrevButton &&\r\n            <SuperButton onClick={onPrevButtonClick}>PREV</SuperButton>}\r\n\r\n            {pages\r\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n                .map((page) => {\r\n\r\n                    const onPageClick = () => {\r\n                        onChangePageClick(page)\r\n                        window.scrollTo(0,0);\r\n                    }\r\n\r\n                    return <span key={page}\r\n                                 className={page===currentPage?styles.currentPage:styles.pageNum}\r\n                                 onClick={onPageClick}>{page}</span>\r\n                })}\r\n\r\n            {conditionForShowNextButton &&\r\n            <SuperButton onClick={onNextButtonClick}>NEXT</SuperButton>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/oval.20fb271d.svg\";","import preload from \"../../assets/oval.svg\";\r\nimport React from \"react\";\r\nimport style from './Preloader.module.scss'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload} alt='preloader' className={style.imgPreload}/>)\r\n}\r\n\r\nexport default Preloader","export enum RESULT_CODES {\r\n    SUCCESS = 0,\r\n    CAPTCHA = 10,\r\n    ERROR = 1,\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": '78ba9efb-88a6-4c7f-b505-5ad3ba5a9466'}\r\n})","import {profileDataUserType} from \"../redux/reducer/profile/profile-reducer\";\r\nimport {authDataType} from \"../redux/reducer/auth/auth-reducer\";\r\nimport {instance} from \"./apiConfig\";\r\nimport {\r\n    getUsersQueryParamsType,\r\n    getUsersResponse,\r\n    loginAPIDataType,\r\n    photosType,\r\n    ResponseType,\r\n    securityAPIResponseT,\r\n    updateProfilePayloadT\r\n} from \"./types\";\r\n\r\n\r\nexport const UsersAPI = {\r\n    getUsers: (getUsersQueryParams?:getUsersQueryParamsType) => {\r\n\r\n        return instance.get<getUsersResponse>(`users`,{params:getUsersQueryParams})\r\n            .then(response => response.data)\r\n    },\r\n\r\n    followUserAPI: (id: number) => {\r\n        return instance.post<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    unfollowUserAPI: (id: number) => {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getUserProfileAPI: (id: number) => {\r\n        return instance.get<profileDataUserType>(`profile/${id}`)\r\n            .then(response => response.data\r\n            )\r\n    },\r\n\r\n    getStatus: (id: number) => {\r\n        return instance.get<string>(`/profile/status/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateStatus: (status: string) => {\r\n        return instance.put<ResponseType>(`/profile/status`, {status})\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateAvatar: (photoFile: File) => {\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put<ResponseType<photosType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n\r\n    updateProfile:(updateProfile:updateProfilePayloadT)=>{\r\n        return instance.put<ResponseType>(`/profile`, updateProfile)\r\n            .then(response => {\r\n                return response.data})\r\n    }\r\n}\r\n\r\nexport const LoginAPI = {\r\n    login: (loginData: loginAPIDataType) => {\r\n        let {email, password, rememberMe, captcha} = loginData\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n\r\n    logout: () => {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n            .then(response => response.data)\r\n    },\r\n\r\n    getAuthUserData: () => {\r\n        return instance.get<ResponseType<authDataType>>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n}\r\n\r\n\r\nexport const securityAPI = () => {\r\n    return instance.get<securityAPIResponseT>(`security/get-captcha-url`)\r\n        .then(response => response.data)\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {UsersAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {\r\n    followUser,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleFollowProgress,\r\n    toggleIsFetching,\r\n    unFollowUser\r\n} from \"./user-reducer\";\r\n\r\nexport const getUsersThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>, getState: () => stateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleIsFetching(true))\r\n        const {currentPage, pageSize, itemsType, term} = getState().UsersPage\r\n        const paramsForQuery = {\r\n            count:pageSize,\r\n            page: currentPage,\r\n            term,\r\n            friend: itemsType === 'friends'\r\n        }\r\n        let data = await UsersAPI.getUsers(paramsForQuery)\r\n        if (data) {\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        }\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\n\r\n\r\nexport const followThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.followUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(followUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const unfollowThunk = (id: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(toggleFollowProgress(true, id))\r\n        let data = await UsersAPI.unfollowUserAPI(id)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(toggleFollowProgress(false, id))\r\n            dispatch(unFollowUser(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n","import SuperButton from \"../SuperButton/SuperButton\";\r\nimport React, {FC, memo} from \"react\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {followThunk, unfollowThunk} from \"../../redux/reducer/users/thunk\";\r\n\r\n\r\nconst FollowUnfollowBtn: FC<FollowUnfollowBtnPropsType> = memo(({\r\n                                                                    item, followingInProgress, unfollowThunk,\r\n                                                                    followThunk\r\n                                                                }) => {\r\n\r\n    const conditionForDisabledButton = followingInProgress.some(id => id === item.id)\r\n\r\n\r\n    const onUnfollowButtonClick = () => {\r\n        unfollowThunk(item.id)\r\n    }\r\n\r\n    const onFollowButtonClick = () => {\r\n        followThunk(item.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <SuperButton disabled={conditionForDisabledButton}\r\n                     onClick={item.followed ? onUnfollowButtonClick : onFollowButtonClick}>\r\n            {item.followed ? 'Unfollow' : 'Follow'}</SuperButton>\r\n    )\r\n})\r\n\r\n\r\ntype FollowUnfollowBtnPropsType = MapDispatchPropsType & MapStateToPropsType & OwnPropsT\r\n\r\ntype MapStateToPropsType = {\r\n    followingInProgress: number[]\r\n}\r\ntype OwnPropsT = {\r\n    item: ItemsUsersResponseType\r\n}\r\n\r\nlet mapStateToProps = (state: stateType, ownProps: OwnPropsT) => ({\r\n    followingInProgress: state.UsersPage.followingInProgress,\r\n    item: ownProps.item\r\n})\r\n\r\ntype MapDispatchPropsType = {\r\n    followThunk: (id: number) => void\r\n    unfollowThunk: (id: number) => void\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchPropsType, OwnPropsT, stateType>\r\n(mapStateToProps, {followThunk, unfollowThunk})(FollowUnfollowBtn)","import React, {FC, memo} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\nimport {initialUserAvatar} from \"../../../const\";\r\nimport style from \"./User.module.scss\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\n\r\ntype UserPropsType = {\r\n    item: ItemsUsersResponseType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const User: FC<UserPropsType> = memo(({item, isAuth}) => {\r\n    return (\r\n        <NavLink to={PATH.PROFILE + '/' + item.id} key={item.id} className={style.userBlock}>\r\n\r\n            <img\r\n                src={item.photos.small || initialUserAvatar}\r\n                className={style.userPhoto} alt={'profile avatar'}/>\r\n\r\n\r\n            <div>\r\n                <p className={style.userName}>{item.name}</p>\r\n                <div className={style.userStatus}>{item.status}</div>\r\n\r\n            </div>\r\n            <div className={style.followBtn}>\r\n                {isAuth && <FollowUnfollowBtn item={item}/>\r\n                }\r\n            </div>\r\n\r\n\r\n        </NavLink>\r\n    )\r\n})","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport style from './SuperInputText.module.scss'\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: Nullable<string>\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperInputText: FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className,\r\n        /*value*/\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const finalInputClassName = `${style.input} ${error ? style.errorInput : style.superInput} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperInputText","import style from \"./Users.module.scss\";\r\nimport React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useEffect, useState} from \"react\";\r\nimport Paginator from \"../../common/paginator/Paginator\";\r\nimport {ItemsUsersResponseType} from \"../../api/types\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {changePage, itemsT, setTerm, toggleItemsType} from \"../../redux/reducer/users/user-reducer\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {User} from \"./User/User\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\n\r\nconst Users: FC<UsersPropsType> = memo(({\r\n                                            items, pageSize, totalUserCount, isFetching,\r\n                                            isAuth, currentPage, itemsType, changePage, toggleItemsType,\r\n                                            setTerm\r\n                                        }) => {\r\n\r\n        const [searchValue, setSearchValue] = useState<string>(EMPTY_STRING)\r\n\r\n        const portionSize = 10\r\n        const titleText = itemsType === 'friends' ? 'Your friends' : 'People you can follow'\r\n        const itemsArr = [\r\n            {\r\n                name: 'PEOPLE', callback: onPeopleLinkClick,\r\n                styleName: itemsType === 'users' ? style.activeLink : style.link\r\n            },\r\n            {\r\n                name: 'FRIENDS', callback: onFriendsLinkClick,\r\n                styleName: itemsType === 'friends' ? style.activeLink : style.link\r\n            },\r\n        ]\r\n\r\n        useEffect(() => {\r\n            let idOfTimeout =setTimeout(() => {\r\n            setTerm(searchValue)}, 1000)\r\n\r\n            return () => {\r\n                clearTimeout(idOfTimeout)\r\n        }}, [searchValue])\r\n\r\n        const handleChangePageClick = useCallback((currentPage: number) => {\r\n            changePage(currentPage)\r\n        }, [pageSize, itemsType, changePage])\r\n\r\n        const onSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setSearchValue(e.currentTarget.value)\r\n        }\r\n\r\n        const onSearchInputEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if ((e.key === 'Enter') && (searchValue.trim() !== EMPTY_STRING)) {\r\n            }\r\n        }\r\n\r\n        function onPeopleLinkClick() {\r\n            toggleItemsType('users')\r\n        }\r\n\r\n        function onFriendsLinkClick() {\r\n            toggleItemsType('friends')\r\n        }\r\n\r\n        if (isFetching) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className={style.userContainer}>\r\n                <ul className={style.navBar}>\r\n                    {itemsArr.map((item, i) =>\r\n                        <li key={i}><span className={item.styleName}\r\n                                          onClick={item.callback}>\r\n                        {item.name}</span></li>)}\r\n                </ul>\r\n\r\n                <div className={style.usersBlock}>\r\n\r\n                    <div className={style.titleWithSearchInput}>\r\n                        <h6 className={style.usersBlockTitle}>\r\n                            {titleText}\r\n                        </h6>\r\n                        <SuperInputText value={searchValue} onChange={onSearchInputChange}\r\n                                        onKeyPress={onSearchInputEnterPress} className={style.inputSearch}/>\r\n                    </div>\r\n\r\n                    <div className={style.users}>\r\n                        {\r\n                            items.map(item => <User item={item} isAuth={isAuth}/>)\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <Paginator totalUserCount={totalUserCount} pageSize={pageSize}\r\n                           onChangePageClick={handleChangePageClick} portionSize={portionSize}\r\n                           currentPage={currentPage}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n)\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    items: Array<ItemsUsersResponseType>\r\n    pageSize: number\r\n    totalUserCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    itemsType: itemsT\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    changePage: (currentPage: number) => void\r\n    toggleItemsType: (itemsType: itemsT) => void\r\n    setTerm: (term: Nullable<string>) => void\r\n}\r\n\r\ntype UsersPropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\n\r\nlet mapStateToProps = (state: stateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    items: state.UsersPage.items,\r\n    pageSize: state.UsersPage.pageSize,\r\n    totalUserCount: state.UsersPage.totalUserCount,\r\n    currentPage: state.UsersPage.currentPage,\r\n    isFetching: state.UsersPage.isFetching,\r\n    itemsType: state.UsersPage.itemsType,\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, stateType>\r\n    (mapStateToProps, {changePage, toggleItemsType,setTerm}))(Users)","import React, {Component, ComponentType} from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {itemsT} from \"../../redux/reducer/users/user-reducer\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport Users from \"./Users\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {getUsersThunk} from \"../../redux/reducer/users/thunk\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n/*import * as queryString from \"querystring\";*/\r\n\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n       /* const parsed = queryString.parse(this.props.history.location.search.substr(1))\r\n        let actualPage = this.props.currentPage\r\n        let actualTerm = this.props.term\r\n        let actualFilter = this.props.itemsType\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualTerm = parsed.term as string\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = null\r\n                break;\r\n            case 'true':\r\n                actualFilter = 'friends'\r\n                break;\r\n            case 'false':\r\n                actualFilter = 'users'\r\n                break;\r\n        }*/\r\n\r\n\r\n        this.props.getUsersThunk()\r\n    }\r\n\r\n    componentDidUpdate({currentPage, term, itemsType}: Readonly<PropsType>) {\r\n        if ((currentPage !== this.props.currentPage) || (term !== this.props.term) || (itemsType !== this.props.itemsType)) {\r\n            this.props.getUsersThunk()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Users/>\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUsersThunk: () => void\r\n}\r\ntype mapStateType = {\r\n    currentPage: number\r\n    itemsType: itemsT\r\n    term: Nullable<string>\r\n}\r\n\r\nexport type PropsType = mapDispatchToPropsType & mapStateType & RouteComponentProps\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    currentPage: state.UsersPage.currentPage,\r\n    itemsType: state.UsersPage.itemsType,\r\n    term: state.UsersPage.term,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect<mapStateType, mapDispatchToPropsType, {}, stateType>\r\n    (mapStateToProps, {getUsersThunk}), withRouter)(UsersContainer)\r\n","import s from \"./Dialog.module.css\"\r\nimport React, {FC, memo} from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\n\r\n\r\ntype DialogItemType = {\r\n    number: string\r\n    user: string\r\n}\r\n\r\n\r\nexport const DialogItem: FC<DialogItemType> = memo(({number, user}) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={PATH.DIALOGS+'/' + number} className={s.dialog}\r\n                     activeClassName={s.active}>{user}</NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import style from \"./Message.module.css\"\r\nimport React, {FC, memo} from \"react\"\r\n\r\n\r\ntype MessageItemType = {\r\n    textMessage: string\r\n}\r\n\r\n\r\nexport const MessageItem: FC<MessageItemType> = memo(({textMessage}) => {\r\n        return (\r\n            <div className={style.message}>{textMessage}</div>\r\n        )\r\n    }\r\n)\r\n","import style from \"./Dialogs.module.css\"\r\nimport React, {FC, memo} from \"react\"\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport {MessageItem} from \"./Message/Message\";\r\nimport {dialogsDataType, messageDataType} from \"../../redux/reducer/dialogs/dialog-reducer\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<dialogsDataType>\r\n    messages: Array<messageDataType>\r\n    addMessage: (newMessage: string) => void\r\n\r\n}\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = memo(({dialogs, messages, addMessage}) => {\r\n\r\n    let dialogsElements = dialogs.map(({id, user}) => <DialogItem key={id} number={id} user={user}/>)\r\n    let messagesElements = messages.map(({id, textMessage}) => <MessageItem key={id} textMessage={textMessage}/>)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: EMPTY_STRING\r\n        },\r\n\r\n        onSubmit: values => {\r\n                addMessage(values.message)\r\n                formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.dialogs}>\r\n                <div className={style.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n\r\n                <div className={style.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <div className={style.addMessageWrapper}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <textarea placeholder={'add message'}\r\n                              {...formik.getFieldProps('message')}/>\r\n                    <button>Send message</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {PATH} from \"../enums/PATH\";\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    let RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {addMessage,  dialogsDataType, messageDataType} from \"../../redux/reducer/dialogs/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {withRedirect} from \"../../hoc/withRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<dialogsDataType>\r\n    messages: Array<messageDataType>\r\n}\r\n\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    dialogs: state.DialogsPage.dialogsData,\r\n    messages: state.DialogsPage.messageData,\r\n\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withRedirect)(Dialogs)\r\n\r\n","export enum ERROR_MESSAGE {\r\n    INVALID_EMAIL = 'Invalid email address',\r\n    REQUIRED = 'Required',\r\n    SHORT_PASSWORD = 'Password must be 8 characters long',\r\n    NEED_NUMBER = 'Invalid password. Must contain one number',\r\n    NOT_MATCHED = 'Password not matched',\r\n}","export default __webpack_public_path__ + \"static/media/like.db5f2c5f.svg\";","import React, {FC, memo} from 'react';\r\nimport style from './Post.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../enums/PATH\";\r\nimport {initialUserAvatar} from \"../../../const\";\r\nimport like from './../../../assets/like.svg'\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    date: string | number\r\n    fullName: string\r\n    id: string\r\n    email: string\r\n    photo: string\r\n    deletePost: (id: string) => void\r\n    likePost: (id: string) => void\r\n    isLiked:boolean\r\n    dislikePost: (id: string) => void\r\n}\r\n\r\nexport const Post: FC<PostPropsType> = memo(({\r\n                                                 message, likesCount, date, fullName,\r\n                                                 email, photo, id, deletePost,likePost,isLiked,dislikePost\r\n                                             }) => {\r\n\r\n\r\n\r\n        const srcForAvatar = photo || initialUserAvatar\r\n\r\n\r\n\r\n        const onDeleteLiClick = () => {\r\n            deletePost(id)\r\n        }\r\n\r\n        const onLikeIconClick=()=>{\r\n            if(isLiked)\r\n            dislikePost(id)\r\n            else likePost(id)\r\n        }\r\n\r\n        return (\r\n            <div className={style.postWrapper}>\r\n                <div className={style.myPosts}>\r\n                    <div className={style.leftBlock}>\r\n                        <NavLink to={PATH.PROFILE}>\r\n                            <img src={srcForAvatar} alt='avatar' className={style.avatar}/>\r\n                        </NavLink>\r\n\r\n                        <NavLink to={PATH.PROFILE} className={style.nameLink}>\r\n                            <h6 className={style.name}>{fullName}</h6>\r\n                            <small className={style.email}>{email}</small>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={style.dateSettingsBlock}>\r\n                        <p className={style.date}>{date}</p>\r\n                        <div className={style.settingsBtn} onClick={onDeleteLiClick}>\r\n                           {/* {isSettingsShow && <ul className={style.settingsBlock}\r\n                                                   onMouseLeave={onSettingsMouseLeave}>\r\n                                  <li onClick={onEditLiClick}>Edit Post</li>\r\n                                <li onClick={onDeleteLiClick}>Delete Post</li>\r\n                            </ul>\r\n                            }*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={style.postBlock}>\r\n                    <div className={style.postText}>\r\n                        {message}\r\n                    </div>\r\n                    <div className={style.likeBlock}>\r\n                        {likesCount}<img src={like} className={style.likeIcon} alt='like' onClick={onLikeIconClick}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, DetailedHTMLProps, FC, KeyboardEvent, memo, TextareaHTMLAttributes} from 'react'\r\nimport style from './SuperTextarea.module.scss'\r\n\r\n\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>,HTMLTextAreaElement>\r\n\r\n\r\ntype SuperTextareaPropsType = DefaultTextareaPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperTextarea: FC<SuperTextareaPropsType> = memo((\r\n    {\r\n       // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n\r\n        className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const finalTextareaClassName = `${style.textarea} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <textarea\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalTextareaClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperTextarea","import React, {FC, memo} from 'react';\r\nimport {Post} from \"./Post/Post\";\r\nimport {useFormik} from \"formik\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {MyPostsPropsT} from \"./MyPostsContainer\";\r\nimport style from './MyPosts.module.scss'\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\n\r\n\r\nexport const MyPosts: FC<MyPostsPropsT> = memo(({\r\n                                                    postsData, addPost, profile, email, deletePost, likePost,\r\n                                                    dislikePost\r\n                                                }) => {\r\n\r\n    let postsElements = postsData.map(({message, likes, date, id, isLiked}) => <Post key={id} message={message}\r\n                                                                                     likesCount={likes}\r\n                                                                                     date={date}\r\n                                                                                     fullName={profile.fullName}\r\n                                                                                     email={email}\r\n                                                                                     photo={profile.photos.small}\r\n                                                                                     id={id} deletePost={deletePost}\r\n                                                                                     likePost={likePost}\r\n                                                                                     isLiked={isLiked}\r\n                                                                                     dislikePost={dislikePost}/>)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: EMPTY_STRING\r\n        },\r\n\r\n        onSubmit: values => {\r\n            addPost(values.newPost)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={style.myPostsContainer}>\r\n            {postsElements}\r\n            <form className={style.addPostForm} onSubmit={formik.handleSubmit}>\r\n                <SuperTextarea placeholder={'add post'} {...formik.getFieldProps('newPost')}\r\n                               className={style.fieldAddPost}/>\r\n                <SuperButton>Add post</SuperButton>\r\n            </form>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n\r\n","import { profileDataUserType} from \"../../redux/reducer/profile/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {ComponentType} from \"react\";\r\nimport {addPost, deletePost, dislikePost, likePost, postsDataType} from \"../../redux/reducer/posts/posts-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    postsData: state.posts.postsData,\r\n    profile: state.ProfilePage.profile,\r\n    email: state.auth.data.email,\r\n\r\n})\r\ntype mapStateToPropsT = {\r\n    postsData: Array<postsDataType>\r\n    profile: profileDataUserType\r\n    email: string\r\n}\r\n\r\ntype mapDispatchToPropsT = {\r\n    addPost: (newPostText: string) => void\r\n    deletePost: (id: string) => void\r\n    likePost: (id: string) => void\r\n    dislikePost : (id: string) =>void\r\n}\r\n\r\nexport type MyPostsPropsT = mapStateToPropsT & mapDispatchToPropsT\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {addPost, deletePost,likePost,dislikePost}))(MyPosts)","import {ChangeEvent, FC, KeyboardEvent, memo, useState} from \"react\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport style from './EditableSpan.module.scss'\r\n\r\ntype EditableSpanT = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n    myStyle: string\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanT> = memo(({title, updateTitle, myStyle}) => {\r\n    const [text, setText] = useState(title)\r\n    let [edit, setEdit] = useState(true)\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n        if(e.currentTarget.value===''){\r\n            setText('----')\r\n        }\r\n    }\r\n\r\n    const activateInputMode = () => {\r\n        setEdit(false)\r\n    }\r\n\r\n    const activateSpanMode = () => {\r\n        setEdit(true)\r\n        updateTitle(text)\r\n    }\r\n\r\n    const onActivateSpanKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            activateSpanMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        edit ?\r\n            <span onDoubleClick={activateInputMode} className={myStyle}>{title}</span>\r\n            : <SuperInputText value={text} onBlur={activateSpanMode} autoFocus onChange={onInputChange}\r\n                     onKeyPress={onActivateSpanKeyPress} className={style.input}/>\r\n    )\r\n})","import React, {ChangeEvent, FC, memo, MouseEvent, useState} from \"react\";\r\nimport style from \"./ProfileContact.module.scss\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\nimport SuperInputText from \"../../../../SuperInput/SuperInputText\";\r\nimport {updateProfileThunkT} from \"../../../../../redux/reducer/profile/thunk\";\r\n\r\n\r\ntype ProfileContactT = {\r\n    link: string\r\n    icon: IconProp\r\n    updateProfile: (updateContact: updateProfileThunkT) => void\r\n    isOwner: boolean\r\n    name: string\r\n}\r\n\r\nexport const ProfileContact: FC<ProfileContactT> = memo(({\r\n                                                             link, icon, updateProfile, isOwner,\r\n                                                             name\r\n                                                         }) => {\r\n\r\n        const [edit, setEdit] = useState(false)\r\n        const [linkURL, setLinkURL] = useState(link)\r\n\r\n\r\n        const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setLinkURL(e.currentTarget.value)\r\n        }\r\n\r\n        const onInputBlur = () => {\r\n            if (linkURL) {\r\n                updateProfile({[name]: linkURL})\r\n            }\r\n            setEdit(false)\r\n        }\r\n\r\n        const onLinkDblClick = (e: MouseEvent<HTMLAnchorElement>) => {\r\n            if (isOwner && !link) {\r\n                e.preventDefault()\r\n                setEdit(true)\r\n            }\r\n        }\r\n\r\n        const classNameForEmptyLink = !link && style.emptyLink\r\n\r\n        if (!link && !isOwner) {\r\n            return <></>\r\n        }\r\n        return (\r\n            <>\r\n                <a href={link}\r\n                   className={`${style.icon} ${classNameForEmptyLink}`} onClick={onLinkDblClick}\r\n                   target='_blank' >\r\n                    <FontAwesomeIcon icon={icon}/></a>\r\n                {edit && <SuperInputText value={linkURL} onChange={onInputChange} className={style.input}\r\n                                         autoFocus onBlur={onInputBlur}/>}\r\n            </>\r\n        )\r\n    }\r\n)","import React, {FC, memo} from \"react\";\r\nimport {initialUserAvatar} from \"../../../../../const\";\r\nimport style from \"../ProfileForm.module.scss\";\r\nimport {ItemsUsersResponseType} from \"../../../../../api/types\";\r\nimport {NavLink,  useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../../enums/PATH\";\r\nimport {itemsT} from \"../../../../../redux/reducer/users/user-reducer\";\r\n\r\n\r\ntype FriendsIconsT = {\r\n    followingUsers: Array<ItemsUsersResponseType>\r\n    totalUserCount:number\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n}\r\n\r\nexport const FriendsIcons: FC<FriendsIconsT> = memo(({followingUsers,totalUserCount,toggleItemsType}) => {\r\n\r\n    let history = useHistory();\r\n\r\n    const maxCountFollowingIcons = 5\r\n    const followingCount=totalUserCount\r\n\r\n    const onFriendBlockClick=()=>{\r\n        toggleItemsType('friends')\r\n        history.push(PATH.USERS)\r\n    }\r\n\r\n    return (\r\n        <div className={style.following}>\r\n            <div>\r\n                <p className={style.followingTitle}>{followingCount} Following</p>\r\n                <div onClick={onFriendBlockClick} className={style.followingIconsBlock}>\r\n                    {followingUsers.map((user, i) => {\r\n                            if (i < maxCountFollowingIcons)\r\n                                return <img key={i} src={user.photos.small || initialUserAvatar}\r\n                                            alt='following' className={style.followingPhoto}/>\r\n                            if (!user)\r\n                                return <NavLink to={PATH.USERS}>add following</NavLink>\r\n                        }\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, memo} from 'react'\r\nimport style from './SuperCheckBox.module.scss'\r\nimport {EMPTY_STRING} from \"../../const\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckBox: FC<SuperCheckboxPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange&&onChange(e)\r\n        onChangeChecked&&onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${style.checkbox} ${className ? className : EMPTY_STRING}`\r\n\r\n    return (\r\n        <label className={style.labelForCheckBox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={style.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n})\r\n\r\nexport default SuperCheckBox","import style from './Modal.module.scss'\r\nimport {useFormik} from \"formik\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport React, {FC, memo} from \"react\";\r\nimport SuperTextarea from \"../SuperTextarea/SuperTextarea\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\nimport {updateProfileThunkT} from \"../../redux/reducer/profile/thunk\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport {shallowEqual} from \"react-redux\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\ntype ItemForFormT={\r\n    title?:string\r\n    type?:string\r\n    initialValue:Nullable<string|boolean>\r\n    initialValueTitle:string\r\n    icon?:IconProp\r\n}\r\n\r\ntype ModalPropsT = {\r\n\r\n    onSubmitBtnClick: (updateItem: updateProfileThunkT) => void\r\n    setIsModalShown: (value: boolean) => void\r\n    itemsForForm:ItemForFormT[]\r\n}\r\n\r\n\r\nexport const Modal: FC<ModalPropsT> = memo(({itemsForForm, onSubmitBtnClick, setIsModalShown}) => {\r\n\r\n\r\n    let objInitialValues = {}\r\n    for (let i = 0; i < itemsForForm.length; i++) {\r\n        let newVal = {[itemsForForm[i].initialValueTitle]: itemsForForm[i].initialValue}\r\n        objInitialValues = {...objInitialValues, ...newVal}\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: objInitialValues,\r\n\r\n        onSubmit: (values) => {\r\n            const hasChanged = !shallowEqual(formik.initialValues, values)\r\n            if(hasChanged){\r\n                onSubmitBtnClick(values)\r\n            }\r\n            setIsModalShown(false)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={style.modalContainer}>\r\n\r\n            <div className={style.modalBlock}>\r\n                <h2>Add information about yourself</h2>\r\n                <form onSubmit={formik.handleSubmit} className={style.form}>\r\n\r\n                    {itemsForForm.map((value, i) => {\r\n                        return <div key={i}>\r\n                            <p>{value.title||value.initialValueTitle}</p>\r\n                            {((value.type === 'input')||(!value.type)) &&\r\n                            <SuperInputText {...formik.getFieldProps(value.initialValueTitle)}\r\n                            placeholder={value.initialValueTitle}/>}\r\n                            {value.type === 'checkbox' &&\r\n                            <SuperCheckBox {...formik.getFieldProps(value.initialValueTitle)}/>}\r\n                            {value.type === 'textarea' &&\r\n                            <SuperTextarea {...formik.getFieldProps(value.initialValueTitle)}/>}\r\n                        </div>\r\n                    })}\r\n                    <SuperButton className={style.btnSave}>Save</SuperButton>\r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback, useState} from \"react\";\r\nimport {ContactsType} from \"../../../../redux/reducer/profile/profile-reducer\";\r\nimport style from './ProfileForm.module.scss'\r\nimport {faVk} from \"@fortawesome/free-brands-svg-icons/faVk\";\r\nimport {ProfileContact} from \"./ProfileContact/ProfileContact\";\r\nimport {faLinkedinIn} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons/faGithub\";\r\nimport {faYoutube} from \"@fortawesome/free-brands-svg-icons/faYoutube\";\r\nimport {faInstagram} from \"@fortawesome/free-brands-svg-icons/faInstagram\";\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons/faTwitter\";\r\nimport {faFacebook} from \"@fortawesome/free-brands-svg-icons/faFacebook\";\r\nimport {ItemsUsersResponseType} from \"../../../../api/types\";\r\nimport {FriendsIcons} from \"./FriendsIcons/FriendsIcons\";\r\nimport {itemsT} from \"../../../../redux/reducer/users/user-reducer\";\r\nimport {updateProfileThunkT} from \"../../../../redux/reducer/profile/thunk\";\r\nimport {faTelegramPlane} from \"@fortawesome/free-brands-svg-icons/faTelegramPlane\";\r\nimport {Modal} from \"../../../Modal/Modal\";\r\n\r\nexport type UpdateContactsType = {\r\n    facebook?: string\r\n    website?: string\r\n    vk?: string\r\n    twitter?: string\r\n    instagram?: string\r\n    youtube?: string\r\n    github?: string\r\n    mainLink?: string\r\n}\r\n\r\ntype ProfileFormT = {\r\n    contacts: ContactsType\r\n    isOwner: boolean\r\n    aboutMe: string\r\n    updateProfile: (updateProfile: updateProfileThunkT) => void\r\n    followingUsers: Array<ItemsUsersResponseType>\r\n    totalUserCount: number\r\n    toggleItemsType: (itemsType: itemsT) => void\r\n}\r\n\r\nexport const ProfileForm: FC<ProfileFormT> = memo(({\r\n                                                       contacts, isOwner, aboutMe, updateProfile,\r\n                                                       followingUsers, totalUserCount, toggleItemsType\r\n                                                   }) => {\r\n\r\n    const [isContactEditFormShown, setIsContactEditFormShown] = useState(false)\r\n\r\n    const contactsArr = [\r\n        {initialValueTitle: 'vk', initialValue: contacts.vk, icon: faVk},\r\n        {initialValueTitle: 'facebook', initialValue: contacts.facebook, icon: faFacebook},\r\n        {initialValueTitle: 'twitter', initialValue: contacts.twitter, icon: faTwitter},\r\n        {initialValueTitle: 'instagram', initialValue: contacts.instagram, icon: faInstagram},\r\n        {initialValueTitle: 'youtube', initialValue: contacts.youtube, icon: faYoutube},\r\n        {initialValueTitle: 'github', initialValue: contacts.github, icon: faGithub},\r\n        {initialValueTitle: 'website', initialValue: contacts.website, icon: faLinkedinIn},\r\n        {initialValueTitle: 'mainLink', initialValue: contacts.mainLink, icon: faTelegramPlane},\r\n    ]\r\n\r\n\r\n    const handleIconUpdateLinkClick = useCallback((updateContact: updateProfileThunkT) => {\r\n        updateProfile({contacts: {...contacts, ...updateContact}})\r\n    }, [contacts, updateProfile])\r\n\r\n    const onActivateModalIconClick = () => {\r\n        setIsContactEditFormShown(true)\r\n    }\r\n\r\n    return (\r\n        <div className={style.userForm}>\r\n            <p className={style.aboutMe}>{aboutMe}</p>\r\n            <p className={style.contacts}>\r\n                {isContactEditFormShown ?\r\n                    <Modal itemsForForm={contactsArr}\r\n                           onSubmitBtnClick={handleIconUpdateLinkClick}\r\n                           setIsModalShown={setIsContactEditFormShown}/>\r\n                    : contactsArr.map((contact, i) =>\r\n                        <ProfileContact key={i} link={contact.initialValue} icon={contact.icon}\r\n                                        updateProfile={handleIconUpdateLinkClick} isOwner={isOwner}\r\n                                        name={contact.initialValueTitle}/>)}\r\n\r\n                {isOwner && <span className={style.btnEditLinks} onClick={onActivateModalIconClick}/>}\r\n            </p>\r\n\r\n            {isOwner && <FriendsIcons followingUsers={followingUsers}\r\n                                      totalUserCount={totalUserCount} toggleItemsType={toggleItemsType}/>}\r\n        </div>\r\n    )\r\n})","import style from \"./ProfileAvatar.module.scss\";\r\nimport {initialUserAvatar} from \"../../../../const\";\r\nimport React, {ChangeEvent, FC, memo, useRef} from \"react\";\r\n\r\ntype ProfileAvatarType = {\r\n    isOwner: boolean\r\n    photo:string\r\n    saveProfileAvatar: (newAvatar: File) => void\r\n}\r\n\r\nexport const ProfileAvatar: FC<ProfileAvatarType> = memo(({isOwner,photo,saveProfileAvatar}) => {\r\n\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onImgClick=()=>{\r\n        inRef && inRef.current && inRef.current.click()\r\n    }\r\n\r\n    const onInputChooseAvatarChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            saveProfileAvatar(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className={isOwner ? style.imgWrappOwner : style.imgWrapp}\r\n           onClick={onImgClick}>\r\n            <img className={style.profilePhoto}\r\n                 src={photo || initialUserAvatar}\r\n                 alt={'profile avatar'}\r\n            />\r\n            {isOwner && <input type='file' onChange={onInputChooseAvatarChange}\r\n                               ref={inRef} style={{display: 'none'}}/>}\r\n        </p>\r\n    )\r\n})","import React, {FC, memo, useCallback, useState} from 'react';\r\nimport style from './ProfileInfo.module.scss'\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {ProfileForm} from \"./EditProfileForm/ProfileForm\";\r\nimport {ProfileInfoPropsType} from \"./ProfileInfoContainer\";\r\nimport FollowUnfollowBtn from \"../../FollowUnfollowBtn/FollowUnfollowBtn\";\r\nimport {ProfileAvatar} from \"./ProfileAvatar/ProfileAvatar\";\r\nimport {Modal} from \"../../Modal/Modal\";\r\n\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = memo(({\r\n                                                               profile, updateUserStatus, status, saveProfileAvatar,\r\n                                                               userIdAuth, updateProfile,\r\n                                                               totalUserCount, users, toggleItemsType\r\n                                                           }) => {\r\n\r\n    const [isModalShown, setIsModalShown] = useState(false)\r\n\r\n    const isOwner = userIdAuth === profile.userId;\r\n\r\n    const currentUser = users.find(user => user.id === profile.userId)\r\n\r\n    const valuesForUpdateProfile = [\r\n        {title: 'About me', type: 'textarea', initialValueTitle: 'aboutMe', initialValue: profile.aboutMe},\r\n        {title: 'Full name', type: 'input', initialValueTitle: 'fullName', initialValue: profile.fullName},\r\n        {\r\n            title: 'Looking for a job?',\r\n            type: 'checkbox',\r\n            initialValueTitle: 'lookingForAJob',\r\n            initialValue: profile.lookingForAJob\r\n        },\r\n        {\r\n            title: 'Describe your job',\r\n            type: 'input',\r\n            initialValueTitle: 'lookingForAJobDescription',\r\n            initialValue: profile.lookingForAJobDescription\r\n        },\r\n\r\n    ]\r\n\r\n    const handleEditableSpanClick = useCallback((newTitle: string) => {\r\n        if (newTitle !== profile.fullName) {\r\n            updateProfile({fullName: newTitle})\r\n        }\r\n    }, [profile.fullName, updateProfile])\r\n\r\n    const onEditProfileClick = () => {\r\n        setIsModalShown(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.profileInfoWrapper}>\r\n            {isModalShown && <Modal itemsForForm={valuesForUpdateProfile} onSubmitBtnClick={updateProfile}\r\n                                    setIsModalShown={setIsModalShown}/>}\r\n            <div className={style.headerBlock}>\r\n                <div className={style.flexCont}>\r\n                    <ProfileAvatar isOwner={isOwner} photo={profile.photos.small}\r\n                                   saveProfileAvatar={saveProfileAvatar}/>\r\n\r\n                    <div className={style.nameBlock}>\r\n                        <EditableSpan title={profile.fullName} updateTitle={handleEditableSpanClick}\r\n                                      myStyle={style.name}/>\r\n                        <EditableSpan title={status} updateTitle={updateUserStatus}\r\n                                      myStyle={style.status}/>\r\n                    </div>\r\n                </div>\r\n\r\n                {(!isOwner && currentUser) && <FollowUnfollowBtn item={currentUser}/>}\r\n\r\n                {isOwner && <div className={style.settingsBtn} onClick={onEditProfileClick}/>}\r\n\r\n            </div>\r\n            <ProfileForm contacts={profile.contacts} aboutMe={profile.aboutMe} isOwner={isOwner}\r\n                         updateProfile={updateProfile} followingUsers={users}\r\n                         totalUserCount={totalUserCount} toggleItemsType={toggleItemsType}/>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType, stateType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ProfileAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {ContactsType, setAvatar, setStatus, setUserProfile} from \"./profile-reducer\";\r\n\r\nexport const getUserProfile = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getUserProfileAPI(userId)\r\n        dispatch(setUserProfile(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const getUserStatus = (userId: number) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.getStatus(userId)\r\n        dispatch(setStatus(data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateStatus(status)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setStatus(status))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const saveProfileAvatar = (newAvatar: File) =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await ProfileAPI.updateAvatar(newAvatar)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAvatar(data.data.photos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\nexport const updateProfile = (updateProfile: updateProfileThunkT): ThunkType =>\r\n    async (dispatch\r\n        , getState: () => stateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts\r\n        } = getState().ProfilePage.profile\r\n\r\n        let profileForUpdate = {\r\n            userId, aboutMe, lookingForAJob, lookingForAJobDescription, fullName,\r\n            contacts, ...updateProfile\r\n        }\r\n        let data = await ProfileAPI.updateProfile(profileForUpdate)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getUserProfile(userId))\r\n        }\r\n    }\r\n\r\n\r\nexport type updateProfileThunkT = {\r\n    userId?: number\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n    contacts?: ContactsType\r\n    aboutMe?: string\r\n}","import {stateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    profileDataUserType,\r\n\r\n} from \"../../../redux/reducer/profile/profile-reducer\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {ItemsUsersResponseType} from \"../../../api/types\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileInfo} from \"./ProfileInfo\";\r\nimport {itemsT, toggleItemsType} from \"../../../redux/reducer/users/user-reducer\";\r\nimport {\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    updateProfileThunkT,\r\n    updateUserStatus\r\n} from \"../../../redux/reducer/profile/thunk\";\r\n\r\nexport type ProfileInfoPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    profile: state.ProfilePage.profile,\r\n    userIdAuth: state.auth.data.id,\r\n    status: state.ProfilePage.status,\r\n    users: state.UsersPage.items,\r\n    totalUserCount: state.UsersPage.totalUserCount,\r\n})\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileDataUserType\r\n    status: string\r\n    userIdAuth: Nullable<number>\r\n    users: Array<ItemsUsersResponseType>\r\n    totalUserCount: number\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateUserStatus: (status: string) => void\r\n    saveProfileAvatar: (newAvatar: File) => void\r\n    updateProfile: (updateProfile: updateProfileThunkT) => void\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {updateUserStatus,  saveProfileAvatar, updateProfile,toggleItemsType})(ProfileInfo);","import React, {FC, memo} from 'react';\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\nimport style from './Profile.module.scss'\r\nimport ProfileInfoContainer from '../MyPosts/ProfileInfo/ProfileInfoContainer';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {profileDataUserType} from \"../../redux/reducer/profile/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n\r\n    profile: profileDataUserType\r\n    userId:string\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsType> = memo(({ profile,userId}) => {\r\n\r\n    if (Object.keys(profile).length === 0) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <ProfileInfoContainer/>\r\n            { !userId && <MyPostsContainer/>}\r\n        </div>\r\n\r\n    )\r\n})","import React, {ComponentType, PureComponent} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    profileDataUserType,\r\n\r\n} from \"../../redux/reducer/profile/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {itemsT, toggleItemsType} from \"../../redux/reducer/users/user-reducer\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    saveProfileAvatar,\r\n    updateProfile,\r\n    updateUserStatus\r\n} from \"../../redux/reducer/profile/thunk\";\r\nimport {getUsersThunk} from \"../../redux/reducer/users/thunk\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends PureComponent<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>) {\r\n        if ((prevProps.match.params.userId !== this.props.match.params.userId) ||\r\n            (prevProps.isAuth !== this.props.isAuth)) {\r\n            this.refresh()\r\n        }\r\n    }\r\n\r\n    refresh = () => {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.isAuth && this.props.userIdAuth) {\r\n            userId = this.props.userIdAuth.toString()\r\n            this.props.toggleItemsType('friends')\r\n            this.props.getUsersThunk()\r\n        }\r\n        if (!userId && !this.props.isAuth) {\r\n            this.props.history.push(PATH.LOGIN)\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  profile={this.props.profile} userId={this.props.match.params.userId}/>\r\n        );\r\n    }\r\n}\r\n\r\ntype ProfilePropsType = OwnProfilePropsType & RouteComponentProps<PathParamsType>\r\ntype OwnProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    userIdAuth: Nullable<number>\r\n    profile: profileDataUserType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    getUsersThunk: () => void\r\n    toggleItemsType : (itemsType: itemsT)=>void\r\n\r\n}\r\nlet mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n    userIdAuth: state.auth.data.id,\r\n    isAuth: state.auth.isAuth,\r\n    profile: state.ProfilePage.profile,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getUserStatus, updateUserStatus, saveProfileAvatar,\r\n        updateProfile, getUsersThunk,toggleItemsType\r\n    }),\r\n    withRouter)(ProfileContainer)\r\n\r\n\r\n","import {FormDataType} from \"../components/Login/Login\";\r\nimport {ERROR_MESSAGE} from \"../enums/ErrorMessages\";\r\n\r\nexport type FormikErrorType = {\r\n    message?: string\r\n    email?:string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?:string\r\n}\r\n\r\nconst minPasswordLength=8\r\nconst passwordRegex = /(?=.*[0-9])/\r\n\r\nexport const validateLoginForm = (values: FormDataType, errors: FormikErrorType) => {\r\n    if (!values.email) {\r\n        errors.email = ERROR_MESSAGE.REQUIRED;\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n    }\r\n    if (!values.password) {\r\n        errors.password = ERROR_MESSAGE.REQUIRED;\r\n    } else if (values.password.length < minPasswordLength) {\r\n        errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n    } else if (!passwordRegex.test(values.password)) {\r\n        errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n    }\r\n}","import React, {FC, memo} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\nimport {useFormik} from \"formik\";\r\nimport {EMPTY_STRING} from \"../../const\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {FormikErrorType, validateLoginForm} from \"../../utils/validators\";\r\nimport style from './Login.module.scss'\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\nimport SuperInputText from \"../SuperInput/SuperInputText\";\r\nimport SuperCheckBox from \"../SuperCheckBox/SuperCheckBox\";\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginThunk: (loginData: loginAPIDataType) => void\r\n    isAuth: boolean\r\n    captchaUrl: string\r\n}\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n\r\nexport const Login: FC<LoginPropsType> = memo(({loginThunk, isAuth, captchaUrl}) => {\r\n\r\n        const formik = useFormik<FormDataType>({\r\n            initialValues: {\r\n                email: process.env.REACT_APP_EMAIL as string,\r\n                password: process.env.REACT_APP_PASSWORD as string,\r\n                rememberMe: false,\r\n                captcha: EMPTY_STRING,\r\n            },\r\n\r\n            validate: (values) => {\r\n                const errors: FormikErrorType = {};\r\n                validateLoginForm(values, errors)\r\n                return errors;\r\n            },\r\n\r\n            onSubmit: values => {\r\n                loginThunk(values)\r\n                formik.resetForm()\r\n            },\r\n        })\r\n\r\n    const fieldsWithValidation=[\r\n        {name:'email',touched:formik.touched.email,error:formik.errors.email},\r\n        {name:'password',touched:formik.touched.password,error:formik.errors.password},\r\n    ]\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n        return (\r\n            <div className={style.loginWrapper}>\r\n                <h2 className={style.title}>Login</h2>\r\n                <form onSubmit={formik.handleSubmit} className={style.form}>\r\n\r\n                    {fieldsWithValidation.map((field,i)=>{\r\n                        return <div key={i} className={style.relativeInputBlock}>\r\n                            <SuperInputText placeholder={field.name}\r\n                                            {...formik.getFieldProps(field.name)}\r\n                                            className={style.input}/>\r\n                            {(field.touched && field.error) && <div\r\n                                className={style.error}>{field.error}</div>}\r\n                        </div>\r\n                    })}\r\n\r\n                    <SuperCheckBox type={'checkbox'} {...formik.getFieldProps('rememberMe')}\r\n                                   className={style.padding}>\r\n                        remember me\r\n                    </SuperCheckBox>\r\n\r\n                    {captchaUrl &&\r\n                    <div>\r\n                        <img src={captchaUrl} alt='captcha'/>\r\n                        <input placeholder='add captcha' {...formik.getFieldProps('captcha')}/>\r\n                    </div>}\r\n\r\n                    <SuperButton className={style.btnMargin}>Login</SuperButton>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import {Dispatch} from \"redux\";\r\nimport {actionsType} from \"../redux/redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ResponseType} from \"../api/types\";\r\nimport {setAppStatusAC} from \"../redux/reducer/app/app-reducer\";\r\n\r\nexport const handleServerNetworkError = <T>(data:ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    let textErr = data.messages.length > 0 ? data.messages[0] : 'some err'\r\n    dispatch(stopSubmit('login', {_error: textErr}))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<actionsType>","import {Dispatch} from \"redux\";\r\nimport {actionsType, ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\nimport {LoginAPI, securityAPI} from \"../../../api/api\";\r\nimport {RESULT_CODES} from \"../../../enums/ResultCode\";\r\nimport {loginAPIDataType} from \"../../../api/types\";\r\nimport {handleServerNetworkError} from \"../../../utils/errorHandler\";\r\nimport {setAuthUserData, setCaptchaSuccess} from \"./auth-reducer\";\r\n\r\nexport const getAuthDataThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.getAuthUserData()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData(data.data, true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\n\r\n\r\nexport const loginThunk = (loginData: loginAPIDataType): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        let data = await LoginAPI.login(loginData)\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            await dispatch(getAuthDataThunk())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n        if (data.resultCode === RESULT_CODES.CAPTCHA) {\r\n            await dispatch(getCaptcha())\r\n        } else {\r\n            handleServerNetworkError(data, dispatch)\r\n        }\r\n    }\r\n\r\n\r\nexport const logoutThunk = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await LoginAPI.logout()\r\n        if (data.resultCode === RESULT_CODES.SUCCESS) {\r\n            dispatch(setAuthUserData({id: null, login: null, email: null}, false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    }\r\nexport const getCaptcha = () =>\r\n    async (dispatch: Dispatch<actionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let data = await securityAPI()\r\n        dispatch(setCaptchaSuccess(data.url))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n\r\n    }","import {connect} from \"react-redux\";\r\nimport {Login} from \"./Login\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {loginAPIDataType} from \"../../api/types\";\r\nimport {loginThunk} from \"../../redux/reducer/auth/thunk\";\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    loginThunk: (loginData: loginAPIDataType) => void\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    userId: number | undefined\r\n    captchaUrl:string\r\n}\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return({\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.ProfilePage.profile.userId,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    })\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>(mapStateToProps\r\n    , {loginThunk})(Login)","import {NavLink} from \"react-router-dom\";\r\nimport style from './ItemList.module.scss';\r\nimport {FC, memo} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {IconProp} from \"@fortawesome/fontawesome-svg-core\";\r\n\r\n\r\ntype ItemListT = {\r\n    path: string\r\n    title: string\r\n    icon: IconProp\r\n}\r\n\r\nexport const ItemList: FC<ItemListT> = memo(({path, title,icon}) => {\r\n\r\n   /* const onUsersItemClick=()=>{\r\n\r\n    }*/\r\n\r\n    return (\r\n        <li className={style.item}>\r\n            <NavLink activeClassName={style.active} to={path}>\r\n                <span className={style.icon}>\r\n                    <FontAwesomeIcon icon={icon}/></span>\r\n                <span>{title}</span>\r\n            </NavLink></li>\r\n    )\r\n})","import React, {FC, memo} from 'react';\r\nimport style from './NavBar.module.scss'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {PATH} from \"../../enums/PATH\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {ItemList} from \"./ItemList/ItemList\";\r\nimport {faUser} from \"@fortawesome/free-regular-svg-icons/faUser\";\r\nimport {faEnvelope} from \"@fortawesome/free-regular-svg-icons/faEnvelope\";\r\nimport {faUsers} from \"@fortawesome/free-solid-svg-icons/faUsers\";\r\nimport {faRss} from \"@fortawesome/free-solid-svg-icons/faRss\";\r\nimport {faItunesNote} from \"@fortawesome/free-brands-svg-icons/faItunesNote\";\r\nimport {faCogs} from \"@fortawesome/free-solid-svg-icons/faCogs\";\r\nimport {faSignOutAlt} from \"@fortawesome/free-solid-svg-icons/faSignOutAlt\";\r\nimport {logoutThunk} from \"../../redux/reducer/auth/thunk\";\r\n\r\ntype NavBarPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst NavBar: FC<NavBarPropsType> = memo(({isAuth, logoutThunk}) => {\r\n\r\n\r\n    const listArray = [\r\n        {path: PATH.PROFILE, title: 'PROFILE', icon: faUser},\r\n        {path: PATH.DIALOGS, title: 'DIALOGS', icon: faEnvelope},\r\n        {path: PATH.USERS, title: 'USERS', icon: faUsers},\r\n        {path: PATH.NEWS, title: 'NEWS', icon: faRss},\r\n        {path: PATH.MUSIC, title: 'MUSIC', icon: faItunesNote},\r\n        {path: PATH.SETTINGS, title: 'SETTINGS', icon: faCogs},\r\n    ]\r\n\r\n    const onLogoutSpanClick = () => {\r\n        logoutThunk()\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <nav className={style.navBar}>\r\n            <ul className={style.list}>\r\n                {listArray.map((item, i) => <ItemList key={i} path={item.path}\r\n                                                      title={item.title} icon={item.icon}/>)}\r\n                {isAuth && <li className={style.item}>\r\n                    <span className={style.span} onClick={onLogoutSpanClick}>\r\n                        <span className={style.icon}>\r\n                        <FontAwesomeIcon icon={faSignOutAlt}/></span>\r\n                         <span>LOGOUT</span>\r\n                    </span>\r\n                </li>}\r\n            </ul>\r\n        </nav>\r\n\r\n    )\r\n})\r\n\r\ntype mapStateToPropsType = {\r\n    authId: Nullable<number>\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logoutThunk: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => ({\r\n    authId: state.auth.data.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {logoutThunk})(NavBar)","import React from \"react\";\r\n\r\nexport const NotFound = () => {\r\n    return (\r\n        <h1>404: PAGE NOT FOUND</h1>\r\n    )\r\n}","import React, {PureComponent} from 'react';\r\nimport './App.module.scss';\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport LoginContainer from \"./components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"./redux/redux-store\";\r\nimport { RequestStatusType} from \"./redux/reducer/app/app-reducer\";\r\nimport Preloader from \"./common/preloader/Preloader\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport {PATH} from \"./enums/PATH\";\r\nimport {NotFound} from \"./components/NotFound/NotFound\";\r\nimport style from './App.module.scss'\r\nimport {Initialize} from \"./redux/reducer/app/thunk\";\r\n\r\n\r\ntype AppPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass App extends PureComponent<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.Initialize()\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.isInitialization) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={style.appContainer}>\r\n                <div className={/*{this.props.isAuth? */style.appWrapperAuth /*: style.appWrapper*/}>\r\n                    <NavBar />\r\n                    <div className={style.appWrapperContent}>\r\n                        {this.props.RequestStatus === 'loading' && <Preloader/>}\r\n                        <Switch>\r\n                            <Route exact path={PATH.START}\r\n                                   render={() => <ProfileContainer/>}/>\r\n                            <Route path={PATH.PROFILE + '/:userId?'}\r\n                                   render={() => <ProfileContainer/>}/>\r\n                            <Route path={PATH.DIALOGS} render={() => <DialogsContainer/>}/>\r\n                            <Route path={PATH.NEWS} render={() => <News/>}/>\r\n                            <Route path={PATH.USERS} render={() => <UsersContainer/>}/>\r\n                            <Route path={PATH.MUSIC} render={() => <Music/>}/>\r\n                            <Route path={PATH.SETTINGS} render={() => <Settings/>}/>\r\n                            <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                            <Route path={PATH.NOT_FOUND} render={() => <NotFound/>}/>\r\n                            <Redirect from={'*'} to={PATH.NOT_FOUND}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: stateType) => {\r\n    return ({\r\n        isInitialization: state.app.isInitialization,\r\n        RequestStatus: state.app.RequestStatus,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\ntype mapStateToPropsType = {\r\n    isInitialization: boolean\r\n    RequestStatus: RequestStatusType\r\n    isAuth: boolean\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    Initialize:()=>void\r\n\r\n}\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, stateType>\r\n(mapStateToProps, {Initialize})(App);\r\n","import {ThunkType} from \"../../redux-store\";\r\nimport {setAppStatusAC, setInitialization} from \"./app-reducer\";\r\nimport {getAuthDataThunk} from \"../auth/thunk\";\r\n\r\nexport const Initialize = (): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await dispatch(getAuthDataThunk())\r\n        dispatch(setInitialization())\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }","import React from 'react';\r\nimport './index.css';\r\nimport {store} from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\n\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>, document.getElementById('root')\r\n    );\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"Users_userContainer__hu8kj\",\"navBar\":\"Users_navBar__1I9oa\",\"link\":\"Users_link__2KPRe\",\"activeLink\":\"Users_activeLink__deytZ\",\"usersBlock\":\"Users_usersBlock__iZSK1\",\"titleWithSearchInput\":\"Users_titleWithSearchInput__1cJOr\",\"usersBlockTitle\":\"Users_usersBlockTitle__3RMme\",\"inputSearch\":\"Users_inputSearch__1C4KB\",\"users\":\"Users_users__yEdDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userForm\":\"ProfileForm_userForm__2XxLY\",\"aboutMe\":\"ProfileForm_aboutMe__1cFWw\",\"contacts\":\"ProfileForm_contacts__M5zqq\",\"btnEditLinks\":\"ProfileForm_btnEditLinks__2N8A7\",\"following\":\"ProfileForm_following__auTiw\",\"followingTitle\":\"ProfileForm_followingTitle__2ThxC\",\"followingIconsBlock\":\"ProfileForm_followingIconsBlock__3Dgno\",\"followingPhoto\":\"ProfileForm_followingPhoto__2s353\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1Amt2\",\"title\":\"Login_title__3Mb8N\",\"form\":\"Login_form__1sfOd\",\"relativeInputBlock\":\"Login_relativeInputBlock__2ukZj\",\"input\":\"Login_input__2a9-e\",\"error\":\"Login_error__GVoOQ\",\"btnMargin\":\"Login_btnMargin__1IgXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__2jo_w\",\"headerBlock\":\"ProfileInfo_headerBlock__DCjFd\",\"flexCont\":\"ProfileInfo_flexCont__1eCI_\",\"nameBlock\":\"ProfileInfo_nameBlock__3rLED\",\"name\":\"ProfileInfo_name__1lRlx\",\"status\":\"ProfileInfo_status__KYg5E\",\"settingsBtn\":\"ProfileInfo_settingsBtn__325Su\",\"userForm\":\"ProfileInfo_userForm__1YStq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBlock\":\"User_userBlock__1Y_Af\",\"userPhoto\":\"User_userPhoto__3ZUbA\",\"userName\":\"User_userName__1WLaC\",\"userStatus\":\"User_userStatus__pKXgk\",\"followBtn\":\"User_followBtn__1UzCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__1igcF\",\"list\":\"NavBar_list__1kK4M\",\"span\":\"NavBar_span__1KRGP\",\"icon\":\"NavBar_icon__3Ramj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__27tgw\",\"appWrapperAuth\":\"App_appWrapperAuth__1FLT7\",\"appWrapperContent\":\"App_appWrapperContent__3tMTP\",\"appWrapper\":\"App_appWrapper__1kRkO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JOtC\",\"dialogsItems\":\"Dialogs_dialogsItems__1YeOq\",\"dialog\":\"Dialogs_dialog__2AVQe\",\"active\":\"Dialogs_active__3Zhq4\",\"addMessageWrapper\":\"Dialogs_addMessageWrapper__hc9Qh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"Modal_modalContainer__B4Nq2\",\"modalBlock\":\"Modal_modalBlock__bRKdh\",\"form\":\"Modal_form__3bnoF\",\"btnSave\":\"Modal_btnSave__2mjDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Paginator_currentPage__h8BNM\",\"pageNum\":\"Paginator_pageNum__dAqj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1AbLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__2qSuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsContainer\":\"MyPosts_myPostsContainer__3JieQ\",\"addPostForm\":\"MyPosts_addPostForm__1KsW_\",\"fieldAddPost\":\"MyPosts_fieldAddPost__2PkLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"ProfileContact_icon__1JBoZ\",\"emptyLink\":\"ProfileContact_emptyLink__1dg6W\",\"input\":\"ProfileContact_input__2qBSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckBox_checkbox__N_fxl\",\"labelForCheckBox\":\"SuperCheckBox_labelForCheckBox__i47Ap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgWrappOwner\":\"ProfileAvatar_imgWrappOwner__3IAA0\",\"profilePhoto\":\"ProfileAvatar_profilePhoto__3-rua\",\"imgWrapp\":\"ProfileAvatar_imgWrapp__EW05a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ItemList_item__3MKIo\",\"active\":\"ItemList_active__nausF\",\"icon\":\"ItemList_icon__1MKGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__YbpnJ\",\"active\":\"Dialog_active__29P3J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgPreload\":\"Preloader_imgPreload__tTJUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"SuperTextarea_textarea__27Poy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__1exWh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__1fSKU\"};"],"sourceRoot":""}